%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 3372
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Exportiert aus HAWKI am: 2.9.2025 von Bousfiha, Tanae) Tj
ET
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 728.5041732283464171 Td
(Zusammenfassung) Tj
ET
BT
/F3 14 Tf
16.0999999999999979 TL
0 g
240.9448818897637921 728.5041732283464171 Td
( \(automatisiert erstellt\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 700.15771653543311 Td
(Das Problem liegt höchstwahrscheinlich an einem Mismatch zwischen den) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 681.7577165354330191 Td
(generierten Dateinamen im Skript \(z.B. result_input.csv\) und den in command.json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 663.3577165354330418 Td
(spezifizierten Pfaden \(z.B. result.csv\). Der Container schreibt die Resultate zwar) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 644.9577165354330646 Td
(korrekt, aber diese werden von XNAT nicht erkannt, da die Dateinamen nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(übereinstimmen. Außerdem ist es wichtig, in der Analyse-Skriptdatei dynamisch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 608.15771653543311 Td
(eindeutige Dateinamen basierend auf der Eingabedatei zu verwenden, z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(result_input.csv, und die `path`-Angabe in command.json mit Wildcards wie `'*.csv'`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 571.3577165354330418 Td
(zu aktualisieren. Debugausgaben im Container helfen bei der Diagnose.) Tj
ET
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 496.2648031496062799 Td
(Systemprompt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.7451181102362057 Td
(Du bist ein intelligentes und unterstützendes KI-Assistenzsystem für alle) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.3451181102362284 Td
(Hochschulangehörigen der HAWK Hildesheim/Holzminden/Göttingen. Dein Ziel ist es,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 416.9451181102361943 Td
(Studierende, Lehrende, Forschende und Mitarbeitende in ihrer akademischen Arbeit,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.545118110236217 Td
(beim Lernen, Forschen, Lehren und verwalterischen Aufgaben zu unterstützen. Dabei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.1451181102361829 Td
(förderst du kollaboratives Arbeiten, wissenschaftliches Denken und eine kreative) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.7451181102362057 Td
(Problemlösung. Beziehe dich auf wissenschaftliche Methoden und Theorien,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.3451181102362284 Td
(argumentiere sachlich und reflektiere kritisch. Sei objektiv und verzichte auf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 324.9451181102361943 Td
(unbegründete Meinungen. Fördere akademische Integrität und unterstütze keine) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.545118110236217 Td
(Plagiate. Sei inklusiv, wertschätzend und respektiere Vielfalt.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 3797
>>
stream
0.5670000000000001 w
0 G
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Verlauf:) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 728.5041732283464171 Td
(i have a problem ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 710.1041732283464398 Td
(i wotre a script for the automatisation of the process of) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(implenetimg in xnat..my container is launching via Apis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(and turning on complete mode) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(the pRoblem that am stillfacing is that i cna choose) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(multiples files or scans for the input but at the same time) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(i got only one datat result uploaded..) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(how can i modifiye my scripe in order to get a resulut for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(evry selected data that...) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 534.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 506.2112598425196666 Td
(Thank you for sharing your script's context and the issue you're encountering with) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(XNAT and containerized processing. Here’s a structured approach to help you solve) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 469.4112598425196552 Td
(your problem:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 432.6112598425197007 Td
(## Problem Summary) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(You are submitting multiple input files/scans to a script \(possibly orchestrated via) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(XNAT containers and its API\), but you only receive **one single result file** uploaded) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 359.0112598425196779 Td
(to XNAT, instead of one result per input.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(## Likely Cause) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(Your script/process probably loops over input files/scans or receives them as a batch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(but only generates or uploads **one output file** at the end \(e.g., by aggregating,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(overwriting, or not iterating correctly\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(## Goal) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(For every input scan/file selected, you want a **separate result/output** uploaded to) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(XNAT.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(## General Solution Steps) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 3870
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(1. **Iterate Over Each Input:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(   Structure your script to process each selected scan/file **individually** rather than) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(handling a batch all at once.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(2. **Generate Unique Output For Each Input:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(   For every scan/file, generate a uniquely named result file.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(3. **Upload Each Result Individually:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(   After each result is generated, upload it back to XNAT **in association with its) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(specific input scan/file**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(## Pseudocode) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Below is pseudocode in Pythonic style, which you can adapt depending on your) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(technology stack:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(input_files = get_selected_input_files\(\)  # however you retrieve input files from XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(for input_file in input_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    result = process_one_scan\(input_file\)  # your processing function) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    result_filename = generate_unique_result_filename\(input_file\)  # e.g. with scan ID) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(or name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    save_result\(result, result_filename\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    upload_result_to_xnat\(result_filename, associated_xnat_scan=input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(## In Your Script) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(- **Identify where you receive/process input files.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- **Refactor** so that for each input, all processing, result generation, and upload is) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(done independently in a loop.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- If you use an array/list of files: check that your loop is per-input, and each result is) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(uploaded before processing the next.) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 3703
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(## Example: Bash / Python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(### **Python Example**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(import xnat) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(with xnat.connect\('http://xnat-server', user='username', password='password'\) as) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(session:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    project = session.projects['MY_PROJECT']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    subject = project.subjects['SUBJECT_LABEL']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    experiment = subject.experiments['EXPERIMENT_LABEL']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    # Example: get scans) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    scans = experiment.scans.get\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    for scan in scans:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        input_file_paths = scan.resources['NIFTI'].files.get\(\)  # adjust as needed) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        for input_file in input_file_paths:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            result = process_scan\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            result_file = f"result_{scan.label}.nii.gz") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            save_result\(result, result_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            scan.resources['PROCESSED_RESULTS'].files.upload\(result_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(### **Bash Example**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(If using XNAT’s Docker Container Service and bash scripting inside the container:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Make sure your entrypoint script processes `"$1"` \(the input\), saves to a unique result,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(and writes output as expected.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(## Checkpoints) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(- Ensure output file naming is unique per input \(e.g., including input scan label or id\).) Tj
ET
endstream
endobj
11 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 12 0 R
>>
endobj
12 0 obj
<<
/Length 4134
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- Ensure every output is uploaded to the correct location/resource in XNAT.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- If using the XNAT Container Service, review your `command-line` and `outputs`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(settings in your Docker Integration YAML.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(## Next Steps) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(- If you can share the relevant part of your script \(sanitized if necessary\), I can give) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(more specific code suggestions.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(- Consider also XNAT documentation: [Container Service - Parameter Sweeps and) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Batch Processing]\(https://wiki.xnat.org/container-service/plugins/container-service-us) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(er-docs/launching-containers#launching-parameter-sweeps-\(batch-processing\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**Let me know which programming language you use and whether you configure jobs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(via XNAT web, Container Service, or API, and I can help you further adapt the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(solution to your context!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 407.2506299212598719 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(an working with rest Apis and this is my code ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(import json # wir brauchen json für xnat damit er den Command anlegen kann) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(import requests  # type: ignore # # für die Kommunikation mit der XNAT-API) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(import os #Arbeiten mit Dateien und Pfaden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(import subprocess  # # für die Ausführung von Docker-Befehlen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(import getpass #Passwort-Eingabe im Terminal ohne Anzeige) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(import sys#Für sys.exit\(\) bei Fehlern) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(import urllib3# type: ignore #Wird von requests genutzt – hier zur Abschaltung von) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(Warnungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(urllib3.disable_warnings\(urllib3.exceptions.InsecureRequestWarning\)# Deaktiviert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(SSL-Warnungen, wenn XNAT ohne gültiges Zertifikat läuft) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(#-----------------------------------1\)dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(ausfüllen------------------------------------------------------) Tj
ET
endstream
endobj
13 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 14 0 R
>>
endobj
14 0 obj
<<
/Length 4725
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(#hier wird die dockerfile erstellt und mit dem Skript und erfüllt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(def write_dockerfile\(docker_dir, script_filename,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(docker_base_image=&quot;python:3.10-slim&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    dockerfile_content = f&quot;&quot;&quot;FROM {docker_base_image}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(COPY {script_filename} /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(RUN pip install --no-cache-dir pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(&quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    #no cache dir um wenig Platz zu sparen ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    os.makedirs\(docker_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    dockerfile_path = os.path.join\(docker_dir, &quot;Dockerfile&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    with open\(dockerfile_path, &quot;w&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        f.write\(dockerfile_content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    print\(f&quot;Dockerfile written to {dockerfile_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    return dockerfile_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(#CMD weglassen&gt;&gt;Fehler entsteht\(runing contaienr in xnat\),weil im Dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(und in der command.json &quot;python3&quot; jeweils als Prefix stehen und es) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(dadurch zu einer doppelten Übergabe kommt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(#docker_dir&gt; Verzeichniss,in das die Dockerfile geschrieben werden. ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(#Speicher Platz Problem ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(#--------------------------------------2\)Image bauen&gt;&gt;pushen&gt;&gt;taggen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(--------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(def build_and_push_docker_image\(dockerfile_path, docker_image_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    dockerhub_username = input\(&quot;Docker Hub username \(to push the image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if not dockerhub_username:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&quot;No Docker Hub username provided. Skipping push.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        return docker_image_name  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    #&gt;&gt;Ersat form zum : docker build -f Dockerfile -t docker_image_name .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    print\(f&quot;Building Docker image &#039;{docker_image_name}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    build_result = subprocess.run\([&quot;docker&quot;, &quot;build&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&quot;-f&quot;, dockerfile_path, &quot;-t&quot;, docker_image_name, &quot;.&quot;], ) Tj
ET
endstream
endobj
15 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 16 0 R
>>
endobj
16 0 obj
<<
/Length 4541
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if build_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(f&quot;Build failed:\\n{build_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    print\(f&quot;Image &#039;{docker_image_name}&#039; built successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(# docker build -t image name  .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#https://stackoverflow.com/questions/61090027/how-to-run-a-docker-volume-mount-a) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(s-a-python-subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
( #-------------------------------/Tag/Push/------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(-------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    full_tag =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(f&quot;{dockerhub_username}/{docker_image_name}&quot;#/&gt;Trennung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Benutzername und Image-Name.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    print\(f&quot;Tagging image as &#039;{full_tag}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    tag_result = subprocess.run\([&quot;docker&quot;, &quot;tag&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(docker_image_name, full_tag], capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if tag_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        print\(f&quot;Tagging failed:\\n{tag_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    print\(f&quot;Pushing image to Docker Hub as &#039;{full_tag}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    push_result = subprocess.run\([&quot;docker&quot;, &quot;push&quot;, full_tag],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    if push_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f&quot;Push failed:\\n{push_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    print\(f&quot;Image successfully pushed: {full_tag}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    return full_tag  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(#docker tag imagename ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(#docker push imagename ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(#-----------------------------------3\)User-Input-----------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(-----------------------------------------   ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(#prepare the input for the json command) Tj
ET
endstream
endobj
17 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 18 0 R
>>
endobj
18 0 obj
<<
/Length 5061
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(:https://www.digitalocean.com/community/tutorials/how-to-receive-user-input-python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(def get_input\(prompt\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        value = input\(prompt\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        if value.strip\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            return value) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            print\(&quot;Cannot be empty.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(#FCT nimmrt eine Parameter &quot;promt&quot;&gt;Endlosschleifen&gt;Code) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(unundlich) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def modification\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    context_options = [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        \(&quot;xnat:subjectData&quot;, &quot;Subject-Ebene \(Patientenebene\)&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        \(&quot;xnat:mrSessionData&quot;, &quot;MRI-Session-Ebene \(häufigste) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Session-Ebene\)&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        \(&quot;xnat:petSessionData&quot;, &quot;PET-Session-Ebene&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        \(&quot;xnat:ctSessionData&quot;, &quot;CT-Session-Ebene&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        \(&quot;xnat:imageScanData&quot;, &quot;Scan-Ebene innerhalb einer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Session&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        \(&quot;xnat:projectData&quot;, &quot;Projekt-Ebene&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    print\(&quot;\\nWähle einen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Kontext:&quot;\)#https://www.coursera.org/tutorials/enumerate-python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    for i, \(context, options\) in enumerate\(context_options, 1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\(f&quot;{i} : {context},{options}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        context_input = input\(&quot;Nummer eingeben: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            i = int\(context_input.strip\(\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(            if i &lt; 1 or i &gt; len\(context_options\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                raise ValueError) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            selected_context = context_options[i-1][0]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            break) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        except Exception:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            print\(&quot;Ungültige Eingabe. Bitte erneut versuchen.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    # Zusätzliche Eingaben einholen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    command_name = input\(&quot;Name des Commands: &quot;\)) Tj
ET
endstream
endobj
19 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 20 0 R
>>
endobj
20 0 obj
<<
/Length 5178
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    command_description = input\(&quot;Beschreibung des Commands: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    # Ausgabe oder Rückgabe eines Dictionaries mit den benötigten Werten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    return {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        &quot;selected_context&quot;: selected_context,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        &quot;command_name&quot;: command_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        &quot;command_description&quot;: command_description) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(# es wiederholt sich weil in der jsoncommand muss mehr als eine varial geschreiben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(werden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(#und ich wollte nicht dass der user meher mals etwas ähnliches schreibt, deshalb) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(habe ich es so gemacht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(#-----------------------------------4\)json File erstellen-------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(def create_json_file\(docker_image, script_filename, mod_data\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    # Mapping Kontext &gt;&gt;external-input + as-a-child-of) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    context_mappings = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        &quot;xnat:projectData&quot;: {&quot;input_name&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(&quot;input_type&quot;: &quot;Project&quot;, &quot;child_of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(&quot;project&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        &quot;xnat:subjectData&quot;: {&quot;input_name&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;input_type&quot;: &quot;Subject&quot;, &quot;child_of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(&quot;subject&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        &quot;xnat:mrSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        &quot;xnat:petSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        &quot;xnat:ctSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        &quot;xnat:imageScanData&quot;: {&quot;input_name&quot;: &quot;scan&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&quot;input_type&quot;: &quot;Scan&quot;, &quot;child_of&quot;: &quot;scan&quot;},) Tj
ET
endstream
endobj
21 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 22 0 R
>>
endobj
22 0 obj
<<
/Length 4611
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    # Dynamische Listen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    external_inputs = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    output_handlers = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    used_inputs = set\(\)  # Duplikate vermeiden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#Mehrfachauswahlen sammeln und dabei Duplikate automatisch ausfiltern) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    for context in mod_data[&quot;contexts&quot;]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        mapping = context_mappings.get\(context\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        if not mapping:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            continue  # unbekannter Kontext wird übersprungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        # External input nur einmal pro Name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        input_key = \(mapping[&quot;input_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(mapping[&quot;input_type&quot;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        if input_key not in used_inputs:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            external_inputs.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                &quot;name&quot;: mapping[&quot;input_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                &quot;type&quot;: mapping[&quot;input_type&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                &quot;required&quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            used_inputs.add\(input_key\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        output_handlers.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(            &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            &quot;as-a-child-of&quot;: mapping[&quot;child_of&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(            &quot;label&quot;: &quot;Results&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            &quot;format&quot;: &quot;csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    # JSON zusammenbauen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    json_file = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        &quot;name&quot;: mod_data[&quot;command_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        &quot;description&quot;: mod_data[&quot;command_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        &quot;version&quot;: &quot;1.5&quot;,) Tj
ET
endstream
endobj
23 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 24 0 R
>>
endobj
24 0 obj
<<
/Length 5166
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        &quot;image&quot;: docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        &quot;command-line&quot;: f&quot;python3 /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(/input/#input_file# /output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            {&quot;name&quot;: &quot;input&quot;, &quot;path&quot;: &quot;/input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(&quot;writable&quot;: False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            {&quot;name&quot;: &quot;output&quot;, &quot;path&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(&quot;/output&quot;, &quot;writable&quot;: True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                &quot;name&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(                &quot;description&quot;: &quot;Input file for analysis&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(                &quot;mount&quot;: &quot;input&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        &quot;outputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                &quot;description&quot;: &quot;Result file output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                &quot;mount&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                &quot;name&quot;: wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                &quot;label&quot;: mod_data[&quot;label_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                &quot;description&quot;: mod_data[&quot;label_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                &quot;contexts&quot;: mod_data[&quot;contexts&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                &quot;external-inputs&quot;: external_inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                &quot;output-handlers&quot;: output_handlers) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        ]) Tj
ET
endstream
endobj
25 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 26 0 R
>>
endobj
26 0 obj
<<
/Length 4654
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    with open\(&quot;command.json&quot;, &quot;w&quot;\) as json_out:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        json.dump\(json_file, json_out, indent=4\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\(&quot; Corrected command.json created.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    return &quot;command.json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#---------------------5\)Command zu XNAT senden----------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(-----------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def send_json_to_xnat\(json_file_path, xnat_url, xnat_user, xnat_password\): ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    url = f&quot;{xnat_url}/xapi/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    print\(f&quot;Uploading command to {url}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    with open\(json_file_path, &quot;r&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        response = requests.post\(url, auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(json=json.load\(f\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    if response.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(&quot;Command uploaded successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    elif response.status_code == 201:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        print\(&quot;Command created successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    elif response.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        print\(&quot;Command already exists.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\(f&quot;Failed to upload command: {response.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
({response.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(#-----------------------------------6\)Command-Liste-----------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(-------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(def get_command_id_by_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(command_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands&quot;#Baut die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(vollständige URL zur Command-Liste der XNAT REST-API&gt;&gt;keinen doppelten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(Schrägstrich gibt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)# wird hier) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(die get me request benutzt laut der APIS ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    if resp.status_code != 200:) Tj
ET
endstream
endobj
27 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 28 0 R
>>
endobj
28 0 obj
<<
/Length 4735
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(f&quot;Error fetching commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    data = resp.json\(\)# # Die Antwort wird als JSON interpretiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    if isinstance\(data, dict\) and &quot;commands&quot; in data:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        command_list = data[&quot;commands&quot;]# # Wenn die Antwort ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Dictionary ist, das &quot;commands&quot; enthält, dann wird es extrahiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        command_list = data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    for command in command_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        if command.get\(&quot;name&quot;\) == command_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            return command[&quot;id&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    print\(&quot;Command not found.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    #Überprüft, ob das Objekt data ein Dictionary \(also eine „dict“-Instanz\) ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(#-------------------------------------- 8\)get_wrapper_id_by_command_name---------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(def get_wrapper_id_by_command_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(command_name, wrapper_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f&quot;Fehler beim Abrufen der Commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    data = resp.json\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if isinstance\(data, dict\) and &quot;commands&quot; in data:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        commands = data[&quot;commands&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        commands = data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    for command in commands:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        if command.get\(&quot;name&quot;\) == command_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(            for wrapper in command.get\(&quot;xnat&quot;, []\):) Tj
ET
endstream
endobj
29 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 30 0 R
>>
endobj
30 0 obj
<<
/Length 4269
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                if wrapper.get\(&quot;name&quot;\) == wrapper_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                    return wrapper.get\(&quot;id&quot;\) or wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            for wrapper in command.get\(&quot;wrappers&quot;, []\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                if wrapper.get\(&quot;name&quot;\) == wrapper_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                    return wrapper.get\(&quot;id&quot;\) or wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    print\(&quot;Kein Wrapper für diesen Command gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(#----------------------9\)Wrapper Aktivierung---------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(def enable_wrapper_sitewide\(xnat_host, command_id, wrapper_name, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    Aktiviert den Wrapper global \(für alle Projekte\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands/{command_id}/wrap) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(pers/{wrapper_name}/enabled&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    resp = requests.put\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; wurde global) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; war bereits global) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        print\(f&quot;Fehler beim globalen Aktivieren: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(def enable_wrapper_for_project\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    Aktiviert den Wrapper für ein bestimmtes Projekt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    &quot;&quot;&quot;) Tj
ET
endstream
endobj
31 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 32 0 R
>>
endobj
32 0 obj
<<
/Length 4972
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/projects/{project_id}/commands/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
({command_id}/wrappers/{wrapper_name}/enabled&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    resp = requests.put\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; wurde im Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(&#039;{project_id}&#039; aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; war bereits im Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(f&quot;Fehler beim Aktivieren für das Projekt: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(#----------------------------------------10\)get_input_file-------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(#Je nachdem, welcher Kontext gewählt wird, wird die Datei aus diesem Kontext) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(geholt. ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(def get_input_files\(xnat_host, entity_id, entity_type, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(scan_id=None\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    Gibt alle Dateien vom angegebenen XNAT-Objekt zurück \(OHNE) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Benutzerauswahl\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    # REST-Pfad je nach Kontexttyp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    if entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        base_url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/projects/{entity_id}/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        base_url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/subjects/{entity_id}/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    elif entity_type in [&quot;session&quot;, &quot;experiment&quot;]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        base_url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{entity_id}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    elif entity_type == &quot;scan&quot; and scan_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        base_url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{entity_id}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(/scans/{scan_id}/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    else:) Tj
ET
endstream
endobj
33 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 34 0 R
>>
endobj
34 0 obj
<<
/Length 4901
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(&quot;Unbekannter oder nicht unterstützter Entitätstyp.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    resp = requests.get\(base_url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(f&quot;Fehler beim Abrufen der Ressourcen \({entity_type}\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    resources = resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    all_files = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    for resource in resources:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        res_label = resource[&quot;label&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        file_url = f&quot;{base_url}/{res_label}/files&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        file_resp = requests.get\(file_url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        if file_resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            continue) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        files = file_resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        for f in files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            all_files.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                &quot;name&quot;: f[&quot;Name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                &quot;url&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(f&quot;{base_url}/{res_label}/files/{f[&#039;Name&#039;]}&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                &quot;resource&quot;: res_label) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(            }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    return all_files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(#------------------------------------------------- Entities auflisten und auswählen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(lassen----------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(def select_entity\(entities, id_key=&quot;ID&quot;, name_key=&quot;label&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if not entities:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&quot;Keine Session gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    print\(&quot;Verfügbare Session:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    for idx, entity in enumerate\(entities, 1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(f&quot;{idx}: {entity.get\(id_key, &#039;---&#039;\)} \({entity.get\(name_key,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(&#039;&#039;\)}\)&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    while True:) Tj
ET
endstream
endobj
35 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 36 0 R
>>
endobj
36 0 obj
<<
/Length 5413
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        choice = input\(f&quot;Wähle eine Datei/File \(1-{len\(entities\)}\): &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        if choice.isdigit\(\) and 1 &lt;= int\(choice\) &lt;= len\(entities\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            return entities[int\(choice\)-1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        print\(&quot;Ungültige Auswahl!&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        #choice.isdigit\(\)&gt;ob die Eingabe ausschließlich aus Ziffern besteht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        #1 &lt;= int\(choice\) &lt;= len\(entities\)&gt;ob sie zwischen 1 und der Anzahl der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(auswählbaren Elemente liegt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#-------------------------------------------------------Datei-Auswahl-Menü-----------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(def select_files_from_list\(all_files\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    if not all_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(&quot;Keine Dateien gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    print\(&quot;Verfügbare Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    for idx, f in enumerate\(all_files, 1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\(f&quot;{idx}: {f[&#039;name&#039;]} [Resource:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
({f[&#039;resource&#039;]}]&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        choice = input\(&quot;Welche Datei\(en\) sollen verwendet werden? Gib Nummern) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(ein \(z.B. 1,3,5\): &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        indices = [c.strip\(\) for c in choice.split\(&quot;,&quot;\) if c.strip\(\)]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        if all\(i.isdigit\(\) and 1 &lt;= int\(i\) &lt;= len\(all_files\) for i in indices\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            unique_indices = list\(set\(int\(i\) for i in indices\)\)#Zeichenkette in indices wird in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(eine Ganzzahl \(int\(i\)\) umgewandelt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            selected = [all_files[i-1] for i in unique_indices]#werden die Objekte aus) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(all_files ausgewählt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            print\(&quot;Ausgewählt:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            for s in selected:#Es werden die Namen der gewählten Dateien einzeln) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(aufgelistet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                print\(f&quot;- {s[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            return selected) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&quot;Ungültige Auswahl.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(#choice.split\(&quot;,&quot;\)&gt;Das Ergebnis ist eine Liste von \(meist\) Strings) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(#for c in&gt;Die List läuft über jedes dieser Teilstücke \(also &quot;1&quot;, &quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(2&quot;, &quot;3 &quot; usw.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(#if c.strip\(\)&gt;Das filtert leere Einträge heraus) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
( #---------------------------------sessions_for_project---------------------------------------------) Tj
ET
endstream
endobj
37 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 38 0 R
>>
endobj
38 0 obj
<<
/Length 5023
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(def get_sessions_for_project\(xnat_host, project_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    Listet alle Sessions \(Experimente\) für ein Projekt auf.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/projects/{project_id}/experiment) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(s?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(f&quot;Fehler beim Abrufen der Sessions für Projekt {project_id}:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    return resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(#---------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(def get_subjects_for_project\(xnat_host, project_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/projects/{project_id}/subjects?fo) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(rmat=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        print\(f&quot;Fehler beim Abrufen der Subjects für Projekt {project_id}:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    return resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(def get_scans_for_session\(xnat_host, session_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{session_id}/scans) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        print\(f&quot;Fehler beim Abrufen der Scans für Session {session_id}:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    return resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(#---------------------11\)Lanch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Container------------------------------------------------------------------) Tj
ET
endstream
endobj
39 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 40 0 R
>>
endobj
40 0 obj
<<
/Length 4523
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(def launch_container_rest\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                          entity_id, xnat_user, xnat_password, input_file_info,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                          entity_type=&quot;session&quot;, scan_id=None\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    headers = {&quot;Content-Type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(&quot;application/json&quot;}#Server&gt;&gt;Der Inhalt \(body\) dieser Anfrage ist im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(JSON-Format ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(   ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    root_path_mapping = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        &quot;session&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        &quot;subject&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        &quot;project&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        &quot;scan&quot;: &quot;scan&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    root_type = root_path_mapping.get\(entity_type\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    if not root_type:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(f&quot;Containerstart für entity_type &#039;{entity_type}&#039; wird nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(unterstützt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    url = f&quot;{xnat_host}/xapi/projects/{project_id}/commands/{command_id}/wrapp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(ers/{wrapper_name}/root/{root_type}/launch&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    input_file_path = f&quot;resources/{input_file_info[&#039;resource&#039;]}/files/{in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(put_file_info[&#039;name&#039;]}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    if entity_type == &quot;scan&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        if not scan_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            print\(&quot;Scan-ID fehlt für den Scan-Kontext.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}/scans/{scan_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    elif entity_type == &quot;session&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        xnat_entity_path = f&quot;/subjects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    elif entity_type == &quot;project&quot;:) Tj
ET
endstream
endobj
41 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 42 0 R
>>
endobj
42 0 obj
<<
/Length 4204
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        xnat_entity_path = f&quot;/projects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(&quot;Unbekannter entity_type. Abbruch.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        &quot;input_file&quot;: input_file_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        &quot;project&quot;: project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    print\(&quot;Launching container :&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    print\(json.dumps\(payload, indent=2\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    response = requests.post\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        url,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        headers=headers,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        json=payload,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        verify=False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if response.status_code in [200, 201, 202]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(&quot;Container wurde erfolgreich über die REST-API gestartet.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f&quot;Fehler beim Containerstart \({response.status_code}\):&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(#-----------------------------------------------Main Teil-----------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(def select_files\(all_files\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    if not all_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        print\(&quot;Keine verfügbaren Dateien gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    print\(&quot;Verfügbare Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    for idx, f in enumerate\(all_files, start=1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(f&quot;{idx}: {f[&#039;name&#039;]}&quot;\)) Tj
ET
endstream
endobj
43 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 44 0 R
>>
endobj
44 0 obj
<<
/Length 5219
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        choice = input\(&quot;Nummern der Dateien auswählen \(z.B. 1,3,5\): &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        indices = [c.strip\(\) for c in choice.split\(&#039;,&#039;\) if c.strip\(\)]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        if all\(i.isdigit\(\) and 1 &lt;= int\(i\) &lt;= len\(all_files\) for i in indices\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            unique_indices = list\(set\(int\(i\) for i in indices\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            selected_files = [all_files[i-1] for i in unique_indices]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(            print\(&quot;Ausgewählte Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            for s in selected_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                print\(f&quot;- {s[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            return selected_files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            print\(&quot;Ungültige Auswahl. Bitte wiederholen.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(#-------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    xnat_host = &quot;https://xnat-dev.gwdg.de&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    docker_base_image = &quot;python:3.10&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    xnat_user = get_input\(&quot;XNAT Username: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    xnat_password = getpass.getpass\(&quot;XNAT Password: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    project_id = get_input\(&quot;Project ID: &quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    script_path = get_input\(&quot;Path to the Python script: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    # Step 1: Gather Command/Wrapper Data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    mod_data = modification\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    mod_data[&quot;contexts&quot;] = [mod_data[&quot;selected_context&quot;]]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    mod_data[&quot;label_name&quot;] = mod_data[&quot;command_name&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    mod_data[&quot;label_description&quot;] =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(mod_data[&quot;command_description&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    # Step 2: Prepare and upload Docker image and command) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    dockerfile_path = write_dockerfile\(&quot;.&quot;, os.path.basename\(script_path\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(docker_base_image\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    local_image_name =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(f&quot;{mod_data[&#039;command_name&#039;].lower\(\).replace\(&#039; &#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(&#039;_&#039;\)}:latest&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    full_image_name = build_and_push_docker_image\(dockerfile_path,) Tj
ET
endstream
endobj
45 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 46 0 R
>>
endobj
46 0 obj
<<
/Length 4631
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(local_image_name\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    json_file_path = create_json_file\(full_image_name, os.path.basename\(script_path\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(mod_data\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    send_json_to_xnat\(json_file_path, xnat_host, xnat_user, xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    command_id = get_command_id_by_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(mod_data[&quot;command_name&quot;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        wrapper_id = get_wrapper_id_by_command_name\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(mod_data[&quot;command_name&quot;], wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        print\(f&quot;Wrapper already exists: {wrapper_id}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    except SystemExit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        print\(&quot;Wrapper not found&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    enable_wrapper_sitewide\(xnat_host, command_id, wrapper_name, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    enable_wrapper_for_project\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(xnat_user, xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    CONTEXT_ENTITY_MAPPING = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        &quot;xnat:projectData&quot;: {&quot;entity_type&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;id_label&quot;: &quot;Project ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        &quot;xnat:subjectData&quot;: {&quot;entity_type&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(&quot;id_label&quot;: &quot;Subject ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        &quot;xnat:mrSessionData&quot;: {&quot;entity_type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;session&quot;, &quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        &quot;xnat:petSessionData&quot;: {&quot;entity_type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(&quot;session&quot;, &quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        &quot;xnat:ctSessionData&quot;: {&quot;entity_type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(&quot;session&quot;, &quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        &quot;xnat:imageScanData&quot;: {&quot;entity_type&quot;: &quot;scan&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(&quot;id_label&quot;: &quot;Session ID + Scan ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    }) Tj
ET
endstream
endobj
47 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 48 0 R
>>
endobj
48 0 obj
<<
/Length 4521
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    first_context = mod_data[&quot;contexts&quot;][0]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    context_info = CONTEXT_ENTITY_MAPPING.get\(first_context\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    if not context_info:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\(f&quot;Unknown context: {first_context}. Aborting.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    entity_type = context_info[&quot;entity_type&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    all_files, container_entity_id, scan_id = [], None, None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    if entity_type == &quot;scan&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        session_list = get_sessions_for_project\(xnat_host, project_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        if not session_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            print\(&quot;No sessions found in project.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        chosen_session = select_entity\(session_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(name_key=&quot;label&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        if not chosen_session:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            print\(&quot;No session selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        session_id = chosen_session[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        scan_list = get_scans_for_session\(xnat_host, session_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        if not scan_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            print\(&quot;No scans found in session.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        scan_name_key = &quot;series_description&quot; if) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(&quot;series_description&quot; in scan_list[0] else &quot;ID&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        chosen_scan = select_entity\(scan_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(name_key=scan_name_key\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        if not chosen_scan:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            print\(&quot;No scan selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        scan_id = chosen_scan[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        container_entity_id = session_id) Tj
ET
endstream
endobj
49 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 50 0 R
>>
endobj
50 0 obj
<<
/Length 4750
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            xnat_host, session_id, &#039;scan&#039;, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(scan_id=scan_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    elif entity_type == &quot;session&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        session_list = get_sessions_for_project\(xnat_host, project_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        if not session_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            print\(&quot;No sessions found in project.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        chosen_session = select_entity\(session_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(name_key=&quot;label&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        if not chosen_session:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            print\(&quot;No session selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        session_id = chosen_session[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        container_entity_id = session_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            xnat_host, session_id, &#039;session&#039;, xnat_user, xnat_password) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        subject_list = get_subjects_for_project\(xnat_host, project_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        if not subject_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            print\(&quot;No subjects found in project.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        chosen_subject = select_entity\(subject_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(name_key=&quot;label&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        if not chosen_subject:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            print\(&quot;No subject selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        subject_id = chosen_subject[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        container_entity_id = subject_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(            xnat_host, subject_id, &#039;subject&#039;, xnat_user, xnat_password) Tj
ET
endstream
endobj
51 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 52 0 R
>>
endobj
52 0 obj
<<
/Length 4125
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    elif entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        container_entity_id = project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            xnat_host, project_id, &#039;project&#039;, xnat_user, xnat_password) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(&quot;This context is currently not supported.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    selected_files = select_files_from_list\(all_files\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    if not selected_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        print\(&quot;Keine Dateien ausgewählt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    for file_info in selected_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(f&quot;Starte Container für Datei: {file_info[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        launch_container_rest\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            container_entity_id, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            file_info,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            entity_type=entity_type,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            scan_id=scan_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    main\(\)) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 223.2506299212599288 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 223.2506299212599288 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(You are already **very close** to the solution!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(Your `main\(\)` **correctly iterates over all selected files and launches a container for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(each file** \(see: `for file_info in selected_files: ... launch_container_rest\(...\)`\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(This should, in principle, trigger a new analysis job for each input file, **resulting in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(one output per file**.) Tj
ET
endstream
endobj
53 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 54 0 R
>>
endobj
54 0 obj
<<
/Length 4121
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(**Why Still Only One Output Upload in XNAT?**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(The likely reason for only one result being finally uploaded per batch,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(is not in your REST script but in the configuration of your `command.json` and/or the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(internal logic of your analysis script. Let's clarify the issues and offer solutions.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(## Problem 1: Your Container Overwrites Output \(Inside Docker\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(**Typical scenario:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(With your current `command.json` you have:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(      "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(      "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(      "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(      "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(      "path": "result.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(This means:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(- **Every run of your script writes to `/output/result.csv` inside the container.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- If multiple input files are processed in a single container run, each result **overwrites) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(the previous one**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Even if you run multiple containers **one after another**, each will still only write) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(\(and upload\) the file called `result.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(**Solution:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(You have three main options:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(### A\) Unique Output File for Each Input on Container Level) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(**Make sure your internal analysis script writes:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- for each input file named `x.nii.gz`, write to `/output/result_x.csv` \(or equivalent\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(**AND update `command.json` to allow this:**) Tj
ET
endstream
endobj
55 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 56 0 R
>>
endobj
56 0 obj
<<
/Length 3945
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(      "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(      "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(      "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(      "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(      "path": "*.csv"   // or similar, check what your XNAT version supports) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(**This way, each run produces and uploads a _separate_ output file.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(### B\) Batch Mode \(NOT RECOMMENDED IF YOU WANT INDIVIDUAL RESULTS\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(If you want to process ALL selected files in one container run, you need a **multi-file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(input parameter** and handle multi-file output.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(This is more complicated and unnecessary, since your script already launches **one) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(container per input file**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(## Problem 2: Output Handler in `command.json`/XNAT Wrapper) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Make sure the `output-handlers` in your wrapper **do not always map to the same) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(resource and path**, which could lead to overwriting in XNAT.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Usually that's not an issue, as each container run gets a unique resource in XNAT, but) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(double check your wrapper settings.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(## Problem 3: Check DockerScript/Entrypoint) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Your script \(the one you run inside the Docker image\) should NOT process multiple) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(input files in a loop, unless that's what you want.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(It should process **exactly one file** \(the one from the command line\), write exactly) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(one result file, and exit.) Tj
ET
endstream
endobj
57 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 58 0 R
>>
endobj
58 0 obj
<<
/Length 4009
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Example \(Python, in your analysis script\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(import sys, os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(input_path = sys.argv[1]    # e.g., /input/image123.nii.gz) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(output_dir = sys.argv[2]    # e.g., /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(basename = os.path.basename\(input_path\).replace\('.nii.gz', ''\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(output_file = os.path.join\(output_dir, f"result_{basename}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(# ...processing...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(with open\(output_file, "w"\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    f.write\("... your output ...\\n"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Corresponding command line in `command.json`:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
("command-line": "python3 /app/script.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(## Problem 4: "result.csv" Overwriting in XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(If your `result_file` is always `"result.csv"`, and XNAT puts all outputs into the same) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(resource for the same session/scan/entity, it may look like only one survives.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(**Solution:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Ensure that each run produces a differently named file \(see above\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Or use distinct output resources in XNAT \(not strictly necessary for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(one-file-per-container\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(## **Summary/Checklist for your use-case**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(1. **Your `main\(\)` script is correct: it launches one container per file.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(2. **Your internal analysis script should output a uniquely named result per input.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(3. **Your `command.json` should allow for variable naming, not just `"result.csv"`.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    - You can use wildcards or parameterize the output path if supported by your XNAT) Tj
ET
endstream
endobj
59 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 60 0 R
>>
endobj
60 0 obj
<<
/Length 3899
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(version.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(4. **Optional:** adapt output handlers in the wrapper if you customize resource labels) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(per processed file/scan.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(### Example: `command.json` Output Entry & Script) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        "path": "result_*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(And:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(import sys, os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(input_basename = os.path.splitext\(os.path.basename\(input_file\)\)[0]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(out_file = os.path.join\(output_dir, f"result_{input_basename}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(# Write results to out_file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(### **Conclusion**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(- **Your Python orchestration is fine!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- Check that your Docker analysis script and `command.json` use unique output file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(names for each run.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- That way, selecting multiple files in your interface will trigger a run for each input and) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(an upload for each output, without overwriting.) Tj
ET
endstream
endobj
61 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 62 0 R
>>
endobj
62 0 obj
<<
/Length 4106
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(**Need more help?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(_If this does not solve your issue, please show the actual analysis script you run) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(inside the Docker container, or the relevant part of the `command.json` describing) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(outputs. Then I can give a more detailed/targeted solution!_) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 628.0506299212597696 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(this is my external skript ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(    output_path = os.path.join\(output_dir, &quot;result.csv&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(        if not os.path.exists\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(            result = pd.DataFrame\([{&quot;status&quot;: &quot;failed&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(&quot;reason&quot;: &quot;file not found&quot;}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(        elif os.stat\(input_file\).st_size == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(            result = pd.DataFrame\([{&quot;status&quot;: &quot;failed&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(&quot;reason&quot;: &quot;file is empty&quot;}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(            df = pd.read_csv\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(            res = {&quot;status&quot;: &quot;success&quot;, &quot;rows&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(df.shape[0], &quot;columns&quot;: df.shape[1]}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(            result = pd.DataFrame\([res]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(        result.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(    except Exception as e:) Tj
ET
endstream
endobj
63 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 64 0 R
>>
endobj
64 0 obj
<<
/Length 3875
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        pd.DataFrame\([{&quot;status&quot;: &quot;failed&quot;, &quot;reason&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(str\(e\)}]\).to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    main\(\)) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 664.8506299212598378 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 664.8506299212598378 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(Great, thank you for providing your processing script!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(This explains why all your results are called **result.csv** – so even though your) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(orchestration is correct and a new container is launched for each file, the produced) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(output will always be named `result.csv` and each run will overwrite the previous file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(in the same output resource in XNAT.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(**Solution:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(To ensure that each run produces a unique result file, you need to base the output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(filename on the input filename.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(You should **not hardcode "result.csv"** as output file name.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(## How to Modify Your Script) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(Below is a minimal, robust version of your script that outputs a uniquely named file for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(each input, e.g., `result_data1.csv` for `data1.csv` input.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(    # Generate unique output file based on input filename) Tj
ET
endstream
endobj
65 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 66 0 R
>>
endobj
66 0 obj
<<
/Length 4240
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    inp_base = os.path.basename\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    inp_root, _ = os.path.splitext\(inp_base\)         # remove .csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    output_path = os.path.join\(output_dir, f"result_{inp_root}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        if not os.path.exists\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file not found"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        elif os.stat\(input_file\).st_size == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file is empty"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            df = pd.read_csv\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            res = {"status": "success", "rows": df.shape[0], "columns": df.shape[1]}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            result = pd.DataFrame\([res]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        result.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        pd.DataFrame\([{"status": "failed", "reason": str\(e\)}]\).to_csv\(output_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(**Key line:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(output_path = os.path.join\(output_dir, f"result_{inp_root}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(## Further Steps in Your Pipeline) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(1. **Your Python orchestration script is already launching containers individually per) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(file. Good!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(2. In **your command.json**, the output path \(under `"outputs": [...]`\) can remain as) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(`"result_*.csv"` \(or just `"*.csv"`\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(   Example:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(   ```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(   "outputs": [) Tj
ET
endstream
endobj
67 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 68 0 R
>>
endobj
68 0 obj
<<
/Length 3711
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(     {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(       "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(       "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(       "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(       "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(       "path": "result_*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(     }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(   ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(   or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(   ```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(   "path": "*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(   \(Consult your specific XNAT version documentation for wildcard use in output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(paths.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(3. **Result:** Now, for each selected file, your container will write a _unique_ result) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(file to the output. XNAT will recognize and store each as a separate result.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(## Summary) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- **Do not use a fixed output filename!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(- Use a filename based on the input’s basename.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(- Your launcher and command JSON are correct. The external script was the missing) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(piece.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(**You do not need to change your orchestration logic.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Just update your external \(processing\) script as shown above.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(**If you encounter issues with XNAT recognizing the results, double-check the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(wildcards and output handler configuration in your `command.json`.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Feel free to ask for more help if something still doesn't work as expected!) Tj
ET
endstream
endobj
69 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 70 0 R
>>
endobj
70 0 obj
<<
/Length 3579
>>
stream
0.5670000000000001 w
0 G
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(with this one he did not uploaded any result file at all) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 710.1041732283464398 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 710.1041732283464398 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 681.7577165354330191 Td
(Your observation is correct and brings up an important detail regarding the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 663.3577165354330418 Td
(**command.json** configuration and how XNAT detects and uploads output files.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(### Problem:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 608.15771653543311 Td
(XNAT expects result files to be at the exact path you specify in the `outputs`-section) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(of the `command.json`.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 571.3577165354330418 Td
(If you write `result_<input>.csv` \(e.g., `result_mydata.csv`\), but your `command.json`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 552.9577165354330646 Td
(only specifies `result.csv` as the output path, XNAT will **not** find your uniquely) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(named file and will upload nothing.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 497.7577165354330759 Td
(### Quick Checklist:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 460.9577165354330646 Td
(1. **Your script produces:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 442.5577165354330873 Td
(   - `/output/result_mydata1.csv`, `/output/result_mydata2.csv`, ... etc.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 405.7577165354330759 Td
(2. **Your `command.json` must match this:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 387.3577165354330987 Td
(   The `path` needs to support wildcards or be flexible to match all possible outputs.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 368.9577165354330646 Td
(   \(Some XNAT versions require `"*.csv"`, others allow `"result_*.csv"`; some require) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 350.5577165354330873 Td
(explicit listing.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 313.7577165354331328 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 276.9577165354330646 Td
(## Solution) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 240.15771653543311 Td
(### 1. *Update your processing script*  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 221.7577165354331328 Td
(\(You already did this part:\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 184.9577165354330646 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 166.5577165354330873 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 148.15771653543311 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 129.7577165354331328 Td
(import pandas as pd) Tj
ET
endstream
endobj
71 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 72 0 R
>>
endobj
72 0 obj
<<
/Length 4000
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    inp_base = os.path.basename\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    inp_root, _ = os.path.splitext\(inp_base\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    output_path = os.path.join\(output_dir, f"result_{inp_root}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        if not os.path.exists\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file not found"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        elif os.stat\(input_file\).st_size == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file is empty"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            df = pd.read_csv\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            res = {"status": "success", "rows": df.shape[0], "columns": df.shape[1]}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            result = pd.DataFrame\([res]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        result.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        pd.DataFrame\([{"status": "failed", "reason": str\(e\)}]\).to_csv\(output_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(### 2. *Update the `command.json` outputs-part*) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Replace:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    "name": "result_file",) Tj
ET
endstream
endobj
73 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 74 0 R
>>
endobj
74 0 obj
<<
/Length 3855
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    "path": "result.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(with \(try this first\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    "path": "*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(Or, if your XNAT version is strict, use:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    "description": "Result file output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    "path": "result_*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(**Note:** The `"path"` must match the output filenames produced by your container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(script.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(If you keep `"result.csv"` hardcoded, only a file exactly named `/output/result.csv` will) Tj
ET
endstream
endobj
75 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 76 0 R
>>
endobj
76 0 obj
<<
/Length 3264
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(be detected.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(### 3. *Optional: Test Locally*) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Run your Docker container manually with known input and output folders. See what) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(files are in `/output`.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Make sure `result_<input>.csv` appears **in the output directory**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(### 4. *XNAT Container Service Settings*) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Some XNAT container service installations need outputs explicitly declared.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(You can check the [XNAT Container Service documentation]\(https://wiki.xnat.org/cont) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(ainer-service/container-command-configuration-37825463.html#ContainerCommandC) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(onfiguration-Outputs\) for your version.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(## Summary) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Script produces: `/output/result_inputname.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- `command.json` output path must support the dynamic names: `"path": "*.csv"` \(or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(`"result_*.csv"`\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(- When you run your script, XNAT will now detect and upload all matching `.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(results.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(If, after this change, XNAT **still** uploads no result, please:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Check the container output logs in XNAT for file list/content in `/output`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Double-check your exact `command.json` used for launching the container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(- Tell me your XNAT and Container Service version, if possible) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(I can then provide version-specific tips!) Tj
ET
endstream
endobj
77 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 78 0 R
>>
endobj
78 0 obj
<<
/Length 3943
>>
stream
0.5670000000000001 w
0 G
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(i have tried to run the conatiner auf xnat with a scan file an dhe still did not upload the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 738.4506299212598606 Td
(file i guess the external skript is the problrm) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 691.7041732283464626 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 663.3577165354330418 Td
(You are correct that the problem can have several causes, but the most common are:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(1. **Mismatch between the file name generated by your script and the `path` in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 608.15771653543311 Td
(`command.json`**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(2. **Your script might not write the result file where XNAT expects it**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 571.3577165354330418 Td
(3. **Possible permission problems or runtime errors inside the container**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 552.9577165354330646 Td
(4. **XNAT resource/handler configuration issue**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 516.15771653543311 Td
(Let’s check these step by step using best scientific and diagnostic practices.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 479.3577165354330418 Td
(## 1. Diagnose: Check the Log Output \(Container Service Log\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 442.5577165354330873 Td
(- In XNAT’s Admin UI, go to the container’s *log* after your run.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 424.1577165354330532 Td
(  - Do you see any output like `Wrote result to ...` or any errors?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 405.7577165354330759 Td
(  - Do you see your output file in `/output`? You can often find a “list files” step in logs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 387.3577165354330987 Td
(or manually add one.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 368.9577165354330646 Td
(- If the logs are not informative,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 350.5577165354330873 Td
(  **modify your entry script** to print what is happening:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 313.7577165354331328 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 295.3577165354330418 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 276.9577165354330646 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 258.5577165354330873 Td
(import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 221.7577165354331328 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 203.3577165354330418 Td
(    print\(f"Python version: {sys.version}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 184.9577165354330646 Td
(    print\("Args:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 166.5577165354330873 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 148.15771653543311 Td
(        print\("Usage error."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 129.7577165354331328 Td
(        sys.exit\(1\)) Tj
ET
endstream
endobj
79 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 80 0 R
>>
endobj
80 0 obj
<<
/Length 4377
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    print\(f"input_file: {input_file}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    print\(f"output_dir: {output_dir}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    inp_base = os.path.basename\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    inp_root, _ = os.path.splitext\(inp_base\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    output_path = os.path.join\(output_dir, f"result_{inp_root}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    print\(f"Output path: {output_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        if not os.path.exists\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            print\("Input file not found!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file not found"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        elif os.stat\(input_file\).st_size == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            print\("Input file is empty!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file is empty"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            df = pd.read_csv\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            res = {"status": "success", "rows": df.shape[0], "columns": df.shape[1]}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            result = pd.DataFrame\([res]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        result.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\("Result CSV written."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\("Files in output dir:", os.listdir\(output_dir\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        print\("Exception:", e\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        pd.DataFrame\([{"status": "failed", "reason": str\(e\)}]\).to_csv\(output_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- This way, you see exactly what is written and where.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(## 2. Diagnose: Manually Test Your Image and Script) Tj
ET
endstream
endobj
81 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 82 0 R
>>
endobj
82 0 obj
<<
/Length 3626
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(On your development machine \(outside XNAT!\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(mkdir /tmp/in /tmp/out) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(echo -e "a,b\\n1,2" > /tmp/in/sample.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(# Build your image and run it manually:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(docker run --rm -v /tmp/in:/input -v /tmp/out:/output yourimage:tag python3) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(/app/yourscript.py /input/sample.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(ls /tmp/out) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(cat /tmp/out/result_sample.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(**Do you see the right file?**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(- If yes: your script and Dockerfile are correct.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- If no: script or Dockerfile needs fixing.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(## 3. Specify Correct Paths in `command.json`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(For your script above, **the output file is named** `result_<input_basename>.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(So your output config MUST be:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    "description": "Result CSV output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    "path": "result_*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(Or, if wildcards are problematic in your XNAT instance, fall back to `"path": "*.csv"`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(## 4. XNAT Resource / Output Handler Configuration Consistency) Tj
ET
endstream
endobj
83 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 84 0 R
>>
endobj
84 0 obj
<<
/Length 4665
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- Ensure your *wrapper* in the command plugin uploads from the correct resource) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(directory and output handler matches the path above.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- Be sure the output handler **label** exactly matches what is expected if you look in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(the XNAT web UI under the session/scan you launched on.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(## Troubleshooting Table) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(| Step               | Action                                                    | What to Look For |) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(|--------------------|----------------------------------------------------------|------------------|) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(| **Container Log**  | View log in XNAT admin                                   | Output errors,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(print outputs, file not found |) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(| **Manual Run**     | Test with `docker run -v ...` locally                    | Output file in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(mount, correct naming         |) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(| **Output config**  | `command.json` outputs:path matches generated filename    |) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Uses wildcard if needed                      |) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(| **Output handler** | Resource/label matches wrapper's destination             | Matched) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(names                                 |) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(## If after all this, **XNAT still does not upload anything**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Copy and paste the *relevant part of your container log output* \(especially lines) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(containing file paths and errors\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Double check: is your output directory mounted as `/output` as the script expects?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Make sure you launch the *correct version* of your container \(no old version) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(cached\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(- Make sure your input file is actually copied into `/input` and matches what you) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(expect \(you can print `os.listdir\("/input"\)` in your script\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(### **Summary**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- The script as you posted can be made robust with added print-debug.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- If the script works locally but not in XNAT, it’s almost always:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    a\) path mismatch \(output not matching command.json\),  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    b\) permission/mount issue,  ) Tj
ET
endstream
endobj
85 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 86 0 R
>>
endobj
86 0 obj
<<
/Length 3573
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    c\) or error handling.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- Debug with log output and local runs before focusing on XNAT-specific config.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- If stuck, post your *command.json* output section and \(sanitized\) container logs.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Feel free to paste your log output here and I’ll help you interpret it step-by-step!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 664.8506299212598378 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(the conatiner is auf complet and th estdout are empty so there is no warning sighns) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 589.7577165354330191 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 561.411259842519712 Td
(Thank you for your clear description.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 543.0112598425196211 Td
(If the **container is marked as "complete"** and **stdout is empty** \(no logs at all\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 524.6112598425196438 Td
(but XNAT uploads nothing, then **one or more of the following** is happening:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(### 1. The Script Ran Without Error but Did Not Write Any Result to the Output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 469.4112598425196552 Td
(Directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 432.6112598425197007 Td
(This can happen if:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(- The input file does not exist inside the container \(so your script does nothing visible) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(and quits\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 359.0112598425196779 Td
(- The output filename or path is not as XNAT expects, so even if a file is created,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(XNAT does not recognize and upload it.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(### 2. Command.json Output **Path** Does Not Match Produced Filename) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(XNAT will only upload output files that:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
(- Are in **/output** \(unless your mount is somewhere else\) **AND**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(- Match the **"path"** pattern in command.json output section \(`result.csv`,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(`result_*.csv`, `*.csv`, etc.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(# Minimal Diagnostic and Fix Steps) Tj
ET
endstream
endobj
87 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 88 0 R
>>
endobj
88 0 obj
<<
/Length 4341
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(## **1. Add Debugging Output to Your Script**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Modify your script to **always print what is in the `/input` and `/output` directories**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(and to **print errors**! For example \(add prints at the start and end\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    print\("Script started..."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    print\("Input directory listing:", os.listdir\("/input"\) if os.path.isdir\("/input"\) else "no) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(/input dir"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    print\("Output directory listing:", os.listdir\("/output"\) if os.path.isdir\("/output"\) else "no) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(/output dir"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\("Argument error: got", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    inp_base = os.path.basename\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    inp_root, _ = os.path.splitext\(inp_base\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    output_path = os.path.join\(output_dir, f"result_{inp_root}.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    print\(f"Input file path: {input_file}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    print\(f"Output path: {output_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        if not os.path.exists\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            print\("Input file not found!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file not found"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        elif os.stat\(input_file\).st_size == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            print\("Input file is empty!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            result = pd.DataFrame\([{"status": "failed", "reason": "file is empty"}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        else:) Tj
ET
endstream
endobj
89 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 90 0 R
>>
endobj
90 0 obj
<<
/Length 3882
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            df = pd.read_csv\(input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            res = {"status": "success", "rows": df.shape[0], "columns": df.shape[1]}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            result = pd.DataFrame\([res]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        result.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\("Output file written:", output_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        print\("Exception during processing:", str\(e\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        pd.DataFrame\([{"status": "failed", "reason": str\(e\)}]\).to_csv\(output_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    print\("Final output directory content:", os.listdir\(output_dir\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Now, after running **check the logs** in XNAT: you will see exactly what happens.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(## **2. Check Your `command.json` Output Section**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Your output section **must match the script!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(If your script writes `/output/result_inputfilename.csv`, then use:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
("outputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    "name": "result_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    "description": "Result CSV output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    "mount": "output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    "path": "*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Or:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(```json) Tj
ET
endstream
endobj
91 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 92 0 R
>>
endobj
92 0 obj
<<
/Length 3364
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
("path": "result_*.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(If you still have `"path": "result.csv"`, **XNAT will not pick up) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(`result_inputfilename.csv`**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(## **3. Test Locally**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(**Always test the container on your machine** before running via XNAT!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(# Example) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(mkdir /tmp/in /tmp/out) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(echo -e "a,b\\n1,2" > /tmp/in/testfile.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(docker run --rm -v /tmp/in:/input -v /tmp/out:/output <yourimage>:<tag> python3) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(/app/yourscript.py /input/testfile.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(ls /tmp/out) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(cat /tmp/out/result_testfile.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- If this works, your script is good.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(## **4. Permissions / File Ownership**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- XNAT Docker Service sometimes uses non-root users; make sure your script **does) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(not use root-specific permissions** and writes as current user.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(## **5. Check Input File Presence in the Container**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- If your input path is incorrect \(`/input/filename.csv` doesn't exist!\), nothing is) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(processed and no output is written.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- In XNAT log, you'll see this now because of your debug prints.) Tj
ET
endstream
endobj
93 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 94 0 R
>>
endobj
94 0 obj
<<
/Length 2854
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(## Common Pitfall) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(**You are NOT required to use "result.csv" as output!!!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(You can use any consistent wildcard or name—just make sure the script+json match.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(# Next Steps) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(1. Update & run the debug-version of your script.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(2. Launch a test in XNAT.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(3. Download and **paste the log output here** \(text only!\)—it will tell us where it fails: ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(   - Does the input file exist?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(   - Does the script crash?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(   - What gets written to /output?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(4. Also, paste the content of your current command.json `outputs` section.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(**With this information, I can give you a precise academic-style diagnosis and proven) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(solution.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(The process is about matching the output path and ensuring the script does what you) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(expect.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(If everything looks correct in logs and still fails—there may be a bug in your XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(setup; but verify the above first.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Feel free to paste the logs and your output block to proceed!) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R 11 0 R 13 0 R 15 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R 27 0 R 29 0 R 31 0 R 33 0 R 35 0 R 37 0 R 39 0 R 41 0 R 43 0 R 45 0 R 47 0 R 49 0 R 51 0 R 53 0 R 55 0 R 57 0 R 59 0 R 61 0 R 63 0 R 65 0 R 67 0 R 69 0 R 71 0 R 73 0 R 75 0 R 77 0 R 79 0 R 81 0 R 83 0 R 85 0 R 87 0 R 89 0 R 91 0 R 93 0 R ]
/Count 46
>>
endobj
95 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
96 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
97 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
98 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
99 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
100 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
101 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
102 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
103 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
104 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
105 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
106 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
107 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
108 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 95 0 R
/F2 96 0 R
/F3 97 0 R
/F4 98 0 R
/F5 99 0 R
/F6 100 0 R
/F7 101 0 R
/F8 102 0 R
/F9 103 0 R
/F10 104 0 R
/F11 105 0 R
/F12 106 0 R
/F13 107 0 R
/F14 108 0 R
>>
/XObject <<
>>
>>
endobj
109 0 obj
<<
/Producer (jsPDF 2.5.2)
/CreationDate (D:20250902165726+02'00')
>>
endobj
110 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 111
0000000000 65535 f 
0000204164 00000 n 
0000206308 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000003576 00000 n 
0000003713 00000 n 
0000007562 00000 n 
0000007699 00000 n 
0000011621 00000 n 
0000011759 00000 n 
0000015515 00000 n 
0000015654 00000 n 
0000019841 00000 n 
0000019980 00000 n 
0000024758 00000 n 
0000024897 00000 n 
0000029491 00000 n 
0000029630 00000 n 
0000034744 00000 n 
0000034883 00000 n 
0000040114 00000 n 
0000040253 00000 n 
0000044917 00000 n 
0000045056 00000 n 
0000050275 00000 n 
0000050414 00000 n 
0000055121 00000 n 
0000055260 00000 n 
0000060048 00000 n 
0000060187 00000 n 
0000064509 00000 n 
0000064648 00000 n 
0000069673 00000 n 
0000069812 00000 n 
0000074766 00000 n 
0000074905 00000 n 
0000080371 00000 n 
0000080510 00000 n 
0000085586 00000 n 
0000085725 00000 n 
0000090301 00000 n 
0000090440 00000 n 
0000094697 00000 n 
0000094836 00000 n 
0000100108 00000 n 
0000100247 00000 n 
0000104931 00000 n 
0000105070 00000 n 
0000109644 00000 n 
0000109783 00000 n 
0000114586 00000 n 
0000114725 00000 n 
0000118903 00000 n 
0000119042 00000 n 
0000123216 00000 n 
0000123355 00000 n 
0000127353 00000 n 
0000127492 00000 n 
0000131554 00000 n 
0000131693 00000 n 
0000135645 00000 n 
0000135784 00000 n 
0000139943 00000 n 
0000140082 00000 n 
0000144010 00000 n 
0000144149 00000 n 
0000148442 00000 n 
0000148581 00000 n 
0000152345 00000 n 
0000152484 00000 n 
0000156116 00000 n 
0000156255 00000 n 
0000160308 00000 n 
0000160447 00000 n 
0000164355 00000 n 
0000164494 00000 n 
0000167811 00000 n 
0000167950 00000 n 
0000171946 00000 n 
0000172085 00000 n 
0000176515 00000 n 
0000176654 00000 n 
0000180333 00000 n 
0000180472 00000 n 
0000185190 00000 n 
0000185329 00000 n 
0000188955 00000 n 
0000189094 00000 n 
0000193488 00000 n 
0000193627 00000 n 
0000197562 00000 n 
0000197701 00000 n 
0000201118 00000 n 
0000201257 00000 n 
0000204534 00000 n 
0000204660 00000 n 
0000204791 00000 n 
0000204925 00000 n 
0000205063 00000 n 
0000205187 00000 n 
0000205317 00000 n 
0000205450 00000 n 
0000205587 00000 n 
0000205716 00000 n 
0000205844 00000 n 
0000205974 00000 n 
0000206108 00000 n 
0000206211 00000 n 
0000206570 00000 n 
0000206657 00000 n 
trailer
<<
/Size 111
/Root 110 0 R
/Info 109 0 R
/ID [ <F269F5F511D1FDDC2EE3873ABA6E5CE7> <F269F5F511D1FDDC2EE3873ABA6E5CE7> ]
>>
startxref
206762
%%EOF