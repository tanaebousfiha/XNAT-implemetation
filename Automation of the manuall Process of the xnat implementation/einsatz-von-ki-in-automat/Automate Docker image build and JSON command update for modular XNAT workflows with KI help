%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 3632
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Exportiert aus HAWKI am: 11.6.2025 von Bousfiha, Tanae) Tj
ET
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 728.5041732283464171 Td
(Zusammenfassung) Tj
ET
BT
/F3 14 Tf
16.0999999999999979 TL
0 g
240.9448818897637921 728.5041732283464171 Td
( \(automatisiert erstellt\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 700.15771653543311 Td
(Diese Konversation beschreibt die Automatisierung beim Build eines Docker-Images) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 681.7577165354330191 Td
(und der Aktualisierung des `command.json`-Files mit dem neuen Image-Namen/Tag,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 663.3577165354330418 Td
(um eine wiederholbare und erweiterbare Prozesskette zu schaffen. Es wird) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 644.9577165354330646 Td
(empfohlen, das Image nach dem Build in der Funktion) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(`update_command_json_with_image\(\)` in das JSON einzutragen, um) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 608.15771653543311 Td
(Automatisierung und Flexibilität zu gewährleisten. Das Skript wird modular aufgebaut,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(sodass zukünftige Erweiterungen, wie z.B. zusätzliche Dateitypen oder weitere) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 571.3577165354330418 Td
(Automatisierungsschritte, problemlos integriert werden können. Insgesamt wird ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 552.9577165354330646 Td
(strukturierter, erweiterbarer Workflow für Container-Workflow und XNAT-Integration) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(präsentiert.) Tj
ET
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 459.4648031496062686 Td
(Systemprompt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 416.9451181102361943 Td
(Du bist ein intelligentes und unterstützendes KI-Assistenzsystem für alle) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.545118110236217 Td
(Hochschulangehörigen der HAWK Hildesheim/Holzminden/Göttingen. Dein Ziel ist es,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.1451181102361829 Td
(Studierende, Lehrende, Forschende und Mitarbeitende in ihrer akademischen Arbeit,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.7451181102362057 Td
(beim Lernen, Forschen, Lehren und verwalterischen Aufgaben zu unterstützen. Dabei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.3451181102362284 Td
(förderst du kollaboratives Arbeiten, wissenschaftliches Denken und eine kreative) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 324.9451181102361943 Td
(Problemlösung. Beziehe dich auf wissenschaftliche Methoden und Theorien,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.545118110236217 Td
(argumentiere sachlich und reflektiere kritisch. Sei objektiv und verzichte auf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.1451181102362398 Td
(unbegründete Meinungen. Fördere akademische Integrität und unterstütze keine) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.7451181102362625 Td
(Plagiate. Sei inklusiv, wertschätzend und respektiere Vielfalt.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 4251
>>
stream
0.5670000000000001 w
0 G
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Verlauf:) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 728.5041732283464171 Td
(can you modifiy my Skript so that he take the new image) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 710.1041732283464398 Td
(and added it in the json command import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(import getpass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(import requests) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(import json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(import subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(def write_dockerfile\(dockerfile_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(    content = &#039;&#039;&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(FROM python:3.10-slim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(COPY requirements.txt .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(RUN pip install --no-cache-dir -r requirements.txt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(COPY . .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(CMD [&quot;python&quot;, &quot;Skript.py&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(&#039;&#039;&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(    with open\(dockerfile_path, &quot;w&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(        f.write\(content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(    print\(f&quot;Dockerfile written at:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
({dockerfile_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(def docker_image_exists\(image_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(        [&quot;docker&quot;, &quot;images&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(&quot;-q&quot;, image_name],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(        capture_output=True, text=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(    return result.stdout.strip\(\) != &quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(def build_docker_image\(image_name, dockerfile_dir\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(    print\(&quot;Building Docker image...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(        [&quot;docker&quot;, &quot;build&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(&quot;-t&quot;, image_name, dockerfile_dir],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(        capture_output=True, text=True) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 4550
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if result.returncode == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(&quot;Docker image built successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(&quot;Docker build failed!&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        print\(result.stdout\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        print\(result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def docker_login\(username, password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    print\(&quot;Logging into DockerHub...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        [&quot;docker&quot;, &quot;login&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(&quot;--username&quot;, username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(&quot;--password-stdin&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        input=password, text=True, capture_output=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if result.returncode == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        print\(&quot;Docker login successful.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        print\(&quot;Docker login failed!&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(def push_docker_image\(local_image, dockerhub_tag,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(dockerhub_user, dockerhub_pass\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    subprocess.run\([&quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;tag&quot;, local_image, dockerhub_tag]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if not docker_login\(dockerhub_user, dockerhub_pass\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    print\(&quot;Pushing to DockerHub...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        [&quot;docker&quot;, &quot;push&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(dockerhub_tag],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        capture_output=True, text=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    \)) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 4598
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    if result.returncode == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        print\(&quot;Push successful.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\(&quot;Push failed!&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(def upload_command_json\(xnat_host, username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(password, json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    print\(f&quot;Uploading command.json to XNAT:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
({json_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    with open\(json_path, &#039;r&#039;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        data = f.read\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(f&quot;{xnat_host}/xapi/containers/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    headers = {&#039;Content-Type&#039;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(&#039;application/json&#039;}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    resp = requests.post\(url, auth=\(username, password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(headers=headers, data=data\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        print\(&quot;Command uploaded successfully&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(&quot;Command already exists&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(f&quot;Upload error:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
({resp.status_code}\\n{resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(def get_project_sessions\(xnat_host, project_id,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(username, password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    url = f&quot;{xnat_host}/data/projects/{project_id}/subj) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(ects?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    resp = requests.get\(url, auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    resp.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    subjects = resp.json\(\)[&#039;ResultSet&#039;][&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Result&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    session_list = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    for subj in subjects:) Tj
ET
endstream
endobj
11 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 12 0 R
>>
endobj
12 0 obj
<<
/Length 4807
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        subject_id = subj[&#039;ID&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        url_sessions = f&quot;{xnat_host}/data/subjects/{su) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(bject_id}/experiments?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        resp2 = requests.get\(url_sessions,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        resp2.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        sessions = resp2.json\(\)[&#039;ResultSet&#039;][&#) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(039;Result&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        for sess in sessions:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            session_list.append\(sess[&#039;ID&#039;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    return session_list) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(def get_csv_from_session\(xnat_host, session_id,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(username, password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    # Look for &quot;CSV&quot; resource in session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    resource_url = f&quot;{xnat_host}/data/experiments/{s) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(ession_id}/resources?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    resp = requests.get\(resource_url, auth=\(username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    resp.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    resources = resp.json\(\)[&#039;ResultSet&#039;][&#03) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(9;Result&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    csv_resource = None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    for res in resources:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        if res[&#039;label&#039;] == &#039;CSV&#039;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(            csv_resource = res[&#039;label&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            break) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    if not csv_resource:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    # List files in CSV resource) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    files_url = f&quot;{xnat_host}/data/experiments/{sessio) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(n_id}/resources/{csv_resource}/files?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    resp = requests.get\(files_url, auth=\(username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    resp.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    files = resp.json\(\)[&#039;ResultSet&#039;][&#039;Res) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(ult&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    for f in files:) Tj
ET
endstream
endobj
13 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 14 0 R
>>
endobj
14 0 obj
<<
/Length 4600
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        if) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(f[&#039;Name&#039;].endswith\(&#039;.csv&#039;\) or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(f[&#039;Name&#039;].endswith\(&#039;.tsv&#039;\) or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(f[&#039;Name&#039;].endswith\(&#039;.txt&#039;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            return f[&#039;Name&#039;] # Just return the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(first match) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(def launch_container\(xnat_host, username, password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(session_id, input_filename,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(command_name=&quot;Automatistation&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        &quot;command&quot;: command_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        &quot;inputs&quot;: {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            &quot;INPUT_FILE&quot;: input_filename) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        &quot;context&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(&quot;xnat:mrSessionData&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        &quot;external-inputs&quot;: {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            &quot;session&quot;: session_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    print\(f&quot;Launching container for session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
({session_id} and file {input_filename}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    url = f&quot;{xnat_host}/xapi/containers&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    resp = requests.post\(url, json=payload,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        print\(&quot;Container launched:&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(resp.json\(\).get\(&quot;container-id&quot;\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(f&quot;Launch error:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
({resp.status_code}\\n{resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    print\(&quot;Enter your XNAT credentials:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    xnat_host = input\(&quot;XNAT Host \(e.g.,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(https://xnat.example.com\):) Tj
ET
endstream
endobj
15 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 16 0 R
>>
endobj
16 0 obj
<<
/Length 4322
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(&quot;\).strip\(\).rstrip\(&#039;/&#039;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    project_id = input\(&quot;XNAT Project ID:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(&quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    username = input\(&quot;XNAT Username:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(&quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    password = getpass.getpass\(&quot;XNAT Password:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    # Docker setup) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    dockerfile_dir = os.getcwd\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    dockerfile_path = os.path.join\(dockerfile_dir,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(&quot;Dockerfile&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    requirements_path = os.path.join\(dockerfile_dir,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(&quot;requirements.txt&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    docker_image =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(&quot;tanaebousfiha/osa-analyzer:latest&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    # 1. Write Dockerfile if not present) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if not os.path.isfile\(dockerfile_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        write_dockerfile\(dockerfile_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    # 2. Write requirements.txt if not present \(minimal\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if not os.path.isfile\(requirements_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        with open\(requirements_path, &quot;w&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            f.write\(&quot;requests\\n&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(&quot;Wrote requirements.txt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    # 3. Build Docker image if not present) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    if not docker_image_exists\(docker_image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        build_ok = build_docker_image\(docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(dockerfile_dir\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        if not build_ok:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            print\(&quot;Aborting: Docker build failed.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(f&quot;Docker image {docker_image} already) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(exists.&quot;\)) Tj
ET
endstream
endobj
17 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 18 0 R
>>
endobj
18 0 obj
<<
/Length 4888
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    # 4. Optionally push to DockerHub) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    should_push = input\(&quot;Push image to) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(DockerHub? \(y/n\): &quot;\).strip\(\).lower\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    if should_push == &quot;y&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        dockerhub_user = input\(&quot;DockerHub) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Username: &quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        dockerhub_pass =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(getpass.getpass\(&quot;DockerHub Password: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        push_ok = push_docker_image\(docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(docker_image, dockerhub_user, dockerhub_pass\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        if not push_ok:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            print\(&quot;Aborting: Docker push failed.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    # 5. Write command.json if not present) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    command_json_path = &quot;command.json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    if not os.path.isfile\(command_json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        command_json = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            &quot;name&quot;: &quot;Automatistation&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            &quot;description&quot;: &quot;Automatisierung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(von Container.&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            &quot;version&quot;: &quot;1.0&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            &quot;image&quot;: &quot;&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            &quot;command-line&quot;: &quot;python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(/app/OSA_xnat.py /app/input/#INPUT_FILE#) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(/app/output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                    &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(&quot;output_mount&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                    &quot;writable&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                    &quot;path&quot;: &quot;/app/output&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                    &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(&quot;input_mount&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                    &quot;writable&quot;: False,) Tj
ET
endstream
endobj
19 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 20 0 R
>>
endobj
20 0 obj
<<
/Length 4843
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                    &quot;path&quot;: &quot;/app/input&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            &quot;environment-variables&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            &quot;ports&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                    &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(&quot;INPUT_FILE&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                    &quot;description&quot;: &quot;Name der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Eingabedatei&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                    &quot;type&quot;: &quot;string&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                    &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                    &quot;select-values&quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            &quot;outputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                    &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                    &quot;description&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(&quot;Result&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                    &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                    &quot;mount&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(&quot;output_mount&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                    &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                    &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(&quot;wrapper_final&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                    &quot;label&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(&quot;Automatisation&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                    &quot;description&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(&quot;Calculation.&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                    &quot;contexts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                        &quot;xnat:mrSessionData&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                    ],) Tj
ET
endstream
endobj
21 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 22 0 R
>>
endobj
22 0 obj
<<
/Length 5029
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                    &quot;external-inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                            &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(&quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                            &quot;type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(&quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                            &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                            &quot;load-children&quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                    ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                    &quot;derived-inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                            &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(&quot;csv_resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                            &quot;type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(&quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(                            &quot;matcher&quot;: &quot;@.label) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(== &#039;CSV&#039;&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                            &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                           ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(&quot;provides-files-for-command-mount&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(&quot;input_mount&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                            &quot;load-children&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                           ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(&quot;derived-from-wrapper-input&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                            &quot;multiple&quot;: False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                        },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                            &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(&quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                            &quot;type&quot;: &quot;File&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                            &quot;matcher&quot;: &quot;@.name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(=~ /.*\\\\.\(csv|tsv|txt\)$/&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                            &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                            &quot;load-children&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                           ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&quot;derived-from-wrapper-input&quot;:) Tj
ET
endstream
endobj
23 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 24 0 R
>>
endobj
24 0 obj
<<
/Length 4984
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(&quot;csv_resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                            &quot;multiple&quot;: False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                        },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                            &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(&quot;input_file_name&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                            &quot;type&quot;: &quot;string&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                            &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                           ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(&quot;provides-value-for-command-input&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(&quot;INPUT_FILE&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                            &quot;user-settable&quot;: False,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                            &quot;load-children&quot;: False,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                           ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(&quot;derived-from-wrapper-input&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(&quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(                           ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(&quot;derived-from-xnat-object-property&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(&quot;name&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                            &quot;multiple&quot;: False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                    ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                    &quot;output-handlers&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                            &quot;name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                            &quot;accepts-command-output&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(&quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                            &quot;as-a-child-of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                            &quot;type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(&quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                            &quot;label&quot;: &quot;Result&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                            &quot;format&quot;: &quot;csv&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                            &quot;tags&quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                    ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                }) Tj
ET
endstream
endobj
25 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 26 0 R
>>
endobj
26 0 obj
<<
/Length 4155
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            &quot;container-labels&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            &quot;generic-resources&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            &quot;ulimits&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            &quot;secrets&quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        with open\(command_json_path, &quot;w&quot;\) as) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(            json.dump\(command_json, f, indent=2\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(f&quot;Wrote {command_json_path}.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    # 6. Upload command.json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    upload_command_json\(xnat_host, username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(password, command_json_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    # 7. Get all sessions in the project) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    sessions = get_project_sessions\(xnat_host,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(project_id, username, password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    print\(f&quot;Found {len\(sessions\)} sessions in project) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
({project_id}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    # 8. For each session, find CSV/TSV/TXT and launch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    for sess_id in sessions:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        input_file = get_csv_from_session\(xnat_host,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(sess_id, username, password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        if input_file:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            launch_container\(xnat_host, username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(password, sess_id, input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            print\(f&quot;No input file found in session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
({sess_id}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(if __name__ == &#039;__main__&#039;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    main\(\)) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 112.8506299212598378 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 112.8506299212598378 Td
(\(gpt-4.1\):) Tj
ET
endstream
endobj
27 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 28 0 R
>>
endobj
28 0 obj
<<
/Length 4351
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Natürlich! Die **zentrale Anforderung** ist:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Wenn das Docker-Image einen neuen \(möglicherweise per Build/Pull/push) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(erzeugten\) Namen/Tag bekommt, soll genau dieser Name/Tag automatisch in die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Datei `command.json` in das Feld `"image"` geschrieben werden, bevor) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(`command.json` hochgeladen wird!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(### Umsetzungsschritte) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(#### Was du ändern musst:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(1. **Trage nach dem Build/Push den Namen/Tag des Images in die command.json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(ein, bevor du sie schreibst/hochlädst**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(2. \(Optional: Wenn `command.json` schon existiert, kann es sinnvoll sein, es) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(einzulesen, das `"image"`-Feld zu setzen und dann wieder zu speichern.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Hier ist der relevante **modifizierte Teil deines Skripts**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(import getpass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(import requests) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(import json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(import subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(# ... \(DEINE ganze Funktions-Sammlung bleibt wie sie ist\) ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(def write_command_json\(command_json_path, docker_image_full_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    command_json = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        "name": "Automatistation",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        "description": "Automatisierung von Container.",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        "version": "1.0",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        "image": docker_image_full_name,  # Hier setzen wir das Image!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        "type": "docker",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        "command-line": "python /app/OSA_xnat.py /app/input/#INPUT_FILE#) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(/app/output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        # ... rest wie gehabt ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        # \(hier gekürzt aus Platzgründen - du kopierst den existierenden Block!\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    with open\(command_json_path, "w"\) as f:) Tj
ET
endstream
endobj
29 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 30 0 R
>>
endobj
30 0 obj
<<
/Length 3946
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        json.dump\(command_json, f, indent=2\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    print\(f"Wrote {command_json_path}."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(def update_image_in_command_json\(command_json_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(docker_image_full_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    if os.path.isfile\(command_json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        with open\(command_json_path\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            data = json.load\(f\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        data['image'] = docker_image_full_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        with open\(command_json_path, "w"\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            json.dump\(data, f, indent=2\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(f"Updated image in {command_json_path}."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    # ... \(wie vorher\) ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    docker_image = "tanaebousfiha/osa-analyzer:latest"  # Kann ggf. dynamisch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(werden!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    # ... \(Docker build/push wie gehabt\) ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    # 5. Write or update command.json with current image!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    command_json_path = "command.json") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if not os.path.isfile\(command_json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        write_command_json\(command_json_path, docker_image\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        update_image_in_command_json\(command_json_path, docker_image\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    # 6. Upload usw.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    # ... Rest wie gehabt ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(if __name__ == '__main__':) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(**Kopiere außerdem deinen originalen, vollständigen Block für das JSON-Objekt im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(`write_command_json` rein.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(---) Tj
ET
endstream
endobj
31 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 32 0 R
>>
endobj
32 0 obj
<<
/Length 4293
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(### **Hinweis**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- Das Skript schreibt **immer das gerade verwendete Image** \(inkl. Tag\) in die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(`command.json`, bevor sie zu XNAT hochgeladen wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
( -   F a l l s   d u   I m a g e s   m i t   V e r s i o n s - T a g   b a u s t   \( z . / B .   ` " m e i n u s e r / m e i n i m a g e : v 2 " ` \) ,   d a n n) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(stelle sicher, dass die Variable `docker_image` entsprechend belegt ist, sonst nehme) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(den Wert aus deinem Build/Push-Schritt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(## **Zusammenfassung der Anpassungen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(- **Neue Funktion:** `update_image_in_command_json`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(- **Neue Logik:** Vor Upload von `command.json` wird das `"image"`-Feld auf den) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(aktuell gebauten Image-Tag gesetzt, immer!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(- **Robust & Überschreibt alte Werte** \(altes Image wird ggf. überschrieben\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
( F a l l s   d u   d a z u   w e i t e r e   A n f o r d e r u n g e n   h a s t   \( z . / B .   i n t e r a k t i v e   N a m e n s e i n g a b e   f ü r   d a s) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Image\), lässt sich das leicht ergänzen!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 407.2506299212598719 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(can you modifiy my Skript so that he take the new image and added it in the json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(command import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(import getpass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(import requests) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(import json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(import subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(def write_dockerfile\(dockerfile_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(    content = &amp;#039;&amp;#039;&amp;#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(FROM python:3.10-slim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(COPY requirements.txt .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(RUN pip install --no-cache-dir -r requirements.txt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(COPY . .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(CMD [&amp;quot;python&amp;quot;, &amp;quot;Skript.py&amp;quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(&amp;#039;&amp;#039;&amp;#039;) Tj
ET
endstream
endobj
33 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 34 0 R
>>
endobj
34 0 obj
<<
/Length 4688
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    with open\(dockerfile_path, &amp;quot;w&amp;quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        f.write\(content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    print\(f&amp;quot;Dockerfile written at: {dockerfile_path}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(def docker_image_exists\(image_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        [&amp;quot;docker&amp;quot;, &amp;quot;images&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(&amp;quot;-q&amp;quot;, image_name],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        capture_output=True, text=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    return result.stdout.strip\(\) != &amp;quot;&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(def build_docker_image\(image_name, dockerfile_dir\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    print\(&amp;quot;Building Docker image...&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        [&amp;quot;docker&amp;quot;, &amp;quot;build&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(&amp;quot;-t&amp;quot;, image_name, dockerfile_dir],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        capture_output=True, text=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    if result.returncode == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        print\(&amp;quot;Docker image built successfully.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(&amp;quot;Docker build failed!&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\(result.stdout\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(def docker_login\(username, password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    print\(&amp;quot;Logging into DockerHub...&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        [&amp;quot;docker&amp;quot;, &amp;quot;login&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(&amp;quot;--username&amp;quot;, username,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(&amp;quot;--password-stdin&amp;quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        input=password, text=True, capture_output=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    if result.returncode == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(&amp;quot;Docker login successful.&amp;quot;\)) Tj
ET
endstream
endobj
35 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 36 0 R
>>
endobj
36 0 obj
<<
/Length 4837
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(&amp;quot;Docker login failed!&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        print\(result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(def push_docker_image\(local_image, dockerhub_tag, dockerhub_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(dockerhub_pass\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    subprocess.run\([&amp;quot;docker&amp;quot;, &amp;quot;tag&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(local_image, dockerhub_tag]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    if not docker_login\(dockerhub_user, dockerhub_pass\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    print\(&amp;quot;Pushing to DockerHub...&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        [&amp;quot;docker&amp;quot;, &amp;quot;push&amp;quot;, dockerhub_tag],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        capture_output=True, text=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    if result.returncode == 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(&amp;quot;Push successful.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        print\(&amp;quot;Push failed!&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        print\(result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(def upload_command_json\(xnat_host, username, password, json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    print\(f&amp;quot;Uploading command.json to XNAT: {json_path}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    with open\(json_path, &amp;#039;r&amp;#039;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        data = f.read\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    url = f&amp;quot;{xnat_host}/xapi/containers/commands&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    headers = {&amp;#039;Content-Type&amp;#039;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(&amp;#039;application/json&amp;#039;}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    resp = requests.post\(url, auth=\(username, password\), headers=headers,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(data=data\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(&amp;quot;Command uploaded successfully&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(&amp;quot;Command already exists&amp;quot;\)) Tj
ET
endstream
endobj
37 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 38 0 R
>>
endobj
38 0 obj
<<
/Length 4958
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        print\(f&amp;quot;Upload error: {resp.status_code}\\n{resp.text}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(def get_project_sessions\(xnat_host, project_id, username, password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(f&amp;quot;{xnat_host}/data/projects/{project_id}/subjects?format=json&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    resp = requests.get\(url, auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    resp.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    subjects =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(resp.json\(\)[&amp;#039;ResultSet&amp;#039;][&amp;#039;Result&amp;#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    session_list = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    for subj in subjects:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        subject_id = subj[&amp;#039;ID&amp;#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        url_sessions = f&amp;quot;{xnat_host}/data/subjects/{subject_id}/experiments?f) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(ormat=json&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        resp2 = requests.get\(url_sessions, auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        resp2.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        sessions =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(resp2.json\(\)[&amp;#039;ResultSet&amp;#039;][&amp;#039;Result&amp;#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        for sess in sessions:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            session_list.append\(sess[&amp;#039;ID&amp;#039;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    return session_list) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(def get_csv_from_session\(xnat_host, session_id, username, password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    # Look for &amp;quot;CSV&amp;quot; resource in session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    resource_url = f&amp;quot;{xnat_host}/data/experiments/{session_id}/resources?fo) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(rmat=json&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    resp = requests.get\(resource_url, auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    resp.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    resources =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(resp.json\(\)[&amp;#039;ResultSet&amp;#039;][&amp;#039;Result&amp;#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    csv_resource = None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    for res in resources:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        if res[&amp;#039;label&amp;#039;] == &amp;#039;CSV&amp;#039;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            csv_resource = res[&amp;#039;label&amp;#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            break) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    if not csv_resource:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        return None) Tj
ET
endstream
endobj
39 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 40 0 R
>>
endobj
40 0 obj
<<
/Length 5050
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    # List files in CSV resource) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    files_url = f&amp;quot;{xnat_host}/data/experiments/{session_id}/resources/{csv_re) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(source}/files?format=json&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    resp = requests.get\(files_url, auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    resp.raise_for_status\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    files =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(resp.json\(\)[&amp;#039;ResultSet&amp;#039;][&amp;#039;Result&amp;#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    for f in files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        if f[&amp;#039;Name&amp;#039;].endswith\(&amp;#039;.csv&amp;#039;\) or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(f[&amp;#039;Name&amp;#039;].endswith\(&amp;#039;.tsv&amp;#039;\) or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(f[&amp;#039;Name&amp;#039;].endswith\(&amp;#039;.txt&amp;#039;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            return f[&amp;#039;Name&amp;#039;] # Just return the first match) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(def launch_container\(xnat_host, username, password, session_id, input_filename,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(command_name=&amp;quot;Automatistation&amp;quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        &amp;quot;command&amp;quot;: command_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        &amp;quot;inputs&amp;quot;: {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            &amp;quot;INPUT_FILE&amp;quot;: input_filename) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        &amp;quot;context&amp;quot;: &amp;quot;xnat:mrSessionData&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        &amp;quot;external-inputs&amp;quot;: {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            &amp;quot;session&amp;quot;: session_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    print\(f&amp;quot;Launching container for session {session_id} and file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
({input_filename}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    url = f&amp;quot;{xnat_host}/xapi/containers&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    resp = requests.post\(url, json=payload, auth=\(username, password\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&amp;quot;Container launched:&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(resp.json\(\).get\(&amp;quot;container-id&amp;quot;\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        print\(f&amp;quot;Launch error: {resp.status_code}\\n{resp.text}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    print\(&amp;quot;Enter your XNAT credentials:&amp;quot;\)) Tj
ET
endstream
endobj
41 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 42 0 R
>>
endobj
42 0 obj
<<
/Length 4844
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    xnat_host = input\(&amp;quot;XNAT Host \(e.g., https://xnat.example.com\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(&amp;quot;\).strip\(\).rstrip\(&amp;#039;/&amp;#039;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    project_id = input\(&amp;quot;XNAT Project ID: &amp;quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    username = input\(&amp;quot;XNAT Username: &amp;quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    password = getpass.getpass\(&amp;quot;XNAT Password: &amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    # Docker setup) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    dockerfile_dir = os.getcwd\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    dockerfile_path = os.path.join\(dockerfile_dir, &amp;quot;Dockerfile&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    requirements_path = os.path.join\(dockerfile_dir,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(&amp;quot;requirements.txt&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    docker_image = &amp;quot;tanaebousfiha/osa-analyzer:latest&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    # 1. Write Dockerfile if not present) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    if not os.path.isfile\(dockerfile_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        write_dockerfile\(dockerfile_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    # 2. Write requirements.txt if not present \(minimal\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if not os.path.isfile\(requirements_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        with open\(requirements_path, &amp;quot;w&amp;quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            f.write\(&amp;quot;requests\\n&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        print\(&amp;quot;Wrote requirements.txt.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    # 3. Build Docker image if not present) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    if not docker_image_exists\(docker_image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        build_ok = build_docker_image\(docker_image, dockerfile_dir\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        if not build_ok:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            print\(&amp;quot;Aborting: Docker build failed.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        print\(f&amp;quot;Docker image {docker_image} already exists.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    # 4. Optionally push to DockerHub) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    should_push = input\(&amp;quot;Push image to DockerHub? \(y/n\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(&amp;quot;\).strip\(\).lower\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    if should_push == &amp;quot;y&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        dockerhub_user = input\(&amp;quot;DockerHub Username: &amp;quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        dockerhub_pass = getpass.getpass\(&amp;quot;DockerHub Password:) Tj
ET
endstream
endobj
43 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 44 0 R
>>
endobj
44 0 obj
<<
/Length 5208
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        push_ok = push_docker_image\(docker_image, docker_image, dockerhub_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(dockerhub_pass\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        if not push_ok:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            print\(&amp;quot;Aborting: Docker push failed.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    # 5. Write command.json if not present) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    command_json_path = &amp;quot;command.json&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    if not os.path.isfile\(command_json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        command_json = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            &amp;quot;name&amp;quot;: &amp;quot;Automatistation&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            &amp;quot;description&amp;quot;: &amp;quot;Automatisierung von) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Container.&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            &amp;quot;image&amp;quot;: &amp;quot;&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            &amp;quot;type&amp;quot;: &amp;quot;docker&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            &amp;quot;command-line&amp;quot;: &amp;quot;python /app/OSA_xnat.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(/app/input/#INPUT_FILE# /app/output&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            &amp;quot;mounts&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                    &amp;quot;name&amp;quot;: &amp;quot;output_mount&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                    &amp;quot;writable&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                    &amp;quot;path&amp;quot;: &amp;quot;/app/output&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                    &amp;quot;name&amp;quot;: &amp;quot;input_mount&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                    &amp;quot;writable&amp;quot;: False,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                    &amp;quot;path&amp;quot;: &amp;quot;/app/input&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            &amp;quot;environment-variables&amp;quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            &amp;quot;ports&amp;quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            &amp;quot;inputs&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                    &amp;quot;name&amp;quot;: &amp;quot;INPUT_FILE&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                    &amp;quot;description&amp;quot;: &amp;quot;Name der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Eingabedatei&amp;quot;,) Tj
ET
endstream
endobj
45 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 46 0 R
>>
endobj
46 0 obj
<<
/Length 5600
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                    &amp;quot;required&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                    &amp;quot;select-values&amp;quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            &amp;quot;outputs&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                    &amp;quot;name&amp;quot;: &amp;quot;result_file&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                    &amp;quot;description&amp;quot;: &amp;quot;Result&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                    &amp;quot;required&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                    &amp;quot;mount&amp;quot;: &amp;quot;output_mount&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                    &amp;quot;path&amp;quot;: &amp;quot;result.csv&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            &amp;quot;xnat&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(                {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(                    &amp;quot;name&amp;quot;: &amp;quot;wrapper_final&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(                    &amp;quot;label&amp;quot;: &amp;quot;Automatisation&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                    &amp;quot;description&amp;quot;: &amp;quot;Calculation.&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                    &amp;quot;contexts&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                        &amp;quot;xnat:mrSessionData&amp;quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                    ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                    &amp;quot;external-inputs&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                            &amp;quot;name&amp;quot;: &amp;quot;session&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                            &amp;quot;type&amp;quot;: &amp;quot;Session&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                            &amp;quot;required&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                            &amp;quot;load-children&amp;quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                    ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                    &amp;quot;derived-inputs&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                            &amp;quot;name&amp;quot;: &amp;quot;csv_resource&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                            &amp;quot;type&amp;quot;: &amp;quot;Resource&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                            &amp;quot;matcher&amp;quot;: &amp;quot;@.label ==) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(&amp;#039;CSV&amp;#039;&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                            &amp;quot;required&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                            &amp;quot;provides-files-for-command-mount&amp;quot;:) Tj
ET
endstream
endobj
47 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 48 0 R
>>
endobj
48 0 obj
<<
/Length 5574
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(&amp;quot;input_mount&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                            &amp;quot;load-children&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                            &amp;quot;derived-from-wrapper-input&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(&amp;quot;session&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                            &amp;quot;multiple&amp;quot;: False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(                        },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                            &amp;quot;name&amp;quot;: &amp;quot;input_file&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                            &amp;quot;type&amp;quot;: &amp;quot;File&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                            &amp;quot;matcher&amp;quot;: &amp;quot;@.name =~) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(/.*\\\\.\(csv|tsv|txt\)$/&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                            &amp;quot;required&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                            &amp;quot;load-children&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                            &amp;quot;derived-from-wrapper-input&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(&amp;quot;csv_resource&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(                            &amp;quot;multiple&amp;quot;: False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(                        },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                            &amp;quot;name&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(&amp;quot;input_file_name&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                            &amp;quot;required&amp;quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                            &amp;quot;provides-value-for-command-input&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(&amp;quot;INPUT_FILE&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                            &amp;quot;user-settable&amp;quot;: False,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                            &amp;quot;load-children&amp;quot;: False,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                            &amp;quot;derived-from-wrapper-input&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(&amp;quot;input_file&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                            &amp;quot;derived-from-xnat-object-property&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&amp;quot;name&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                            &amp;quot;multiple&amp;quot;: False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                    ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                    &amp;quot;output-handlers&amp;quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                            &amp;quot;name&amp;quot;: &amp;quot;output&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                            &amp;quot;accepts-command-output&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&amp;quot;result_file&amp;quot;,) Tj
ET
endstream
endobj
49 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 50 0 R
>>
endobj
50 0 obj
<<
/Length 4934
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                            &amp;quot;as-a-child-of&amp;quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(&amp;quot;session&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                            &amp;quot;type&amp;quot;: &amp;quot;Resource&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                            &amp;quot;label&amp;quot;: &amp;quot;Result&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                            &amp;quot;format&amp;quot;: &amp;quot;csv&amp;quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(                            &amp;quot;tags&amp;quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                    ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            &amp;quot;container-labels&amp;quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(            &amp;quot;generic-resources&amp;quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            &amp;quot;ulimits&amp;quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            &amp;quot;secrets&amp;quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        with open\(command_json_path, &amp;quot;w&amp;quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            json.dump\(command_json, f, indent=2\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\(f&amp;quot;Wrote {command_json_path}.&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    # 6. Upload command.json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    upload_command_json\(xnat_host, username, password, command_json_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    # 7. Get all sessions in the project) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    sessions = get_project_sessions\(xnat_host, project_id, username, password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    print\(f&amp;quot;Found {len\(sessions\)} sessions in project {project_id}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    # 8. For each session, find CSV/TSV/TXT and launch container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    for sess_id in sessions:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        input_file = get_csv_from_session\(xnat_host, sess_id, username, password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        if input_file:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            launch_container\(xnat_host, username, password, sess_id, input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            print\(f&amp;quot;No input file found in session {sess_id}&amp;quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(if __name__ == &amp;#039;__main__&amp;#039;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(ich möchte eine Automatisation of the Prozess of building that why am am Asking) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(youif the Dockerfile image should comae after writhing the Skript? because am) Tj
ET
endstream
endobj
51 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 52 0 R
>>
endobj
52 0 obj
<<
/Length 3995
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Writing just  a exemple i want in Skript i mean the begiging to set  the idea that he) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(take the xnat file in a session those who are like txt or csv or tsv and then leave the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(place for a Erweiterungen...can i realise that?) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 701.6506299212597924 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 701.6506299212597924 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(Sehr gute und reflektierte Frage  das Ziel ist klar:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(**Der command.json soll immer das gerade verwendete/neu gebaute Image) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(eintragen, und das Skript soll modular und erweiterbar werden**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(**Antworten auf deine \(impliziten\) Teilfragen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(### 1. ***Wann/wo im Skript muss das Image in command.json geschrieben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(werden?***) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(Das Docker-Image muss **gebaut sein** \(also existieren und ggf. schon zu) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(DockerHub gepusht\), denn erst dann steht fest, welchen Namen und Tag es hat.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(Das Feld `"image"` in der `command.json` zeigt immer exakt auf das Image \(inkl.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(Tag\), das XNAT dann per Container startet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(**Deshalb:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
( -   * * B a u e   d a s   D o c k e r - I m a g e * *  !   d a n n) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
( -   * * S c h r e i b e / a k t u a l i s i e r e   c o m m a n d . j s o n * *   \( t r a g e   d a s   _ a k t u e l l e _   I m a g e   e i n \)  !   d a n n) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(- **Lade command.json hoch**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(### 2. ***Wie automatisiere/modularisiere ich das?***) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(Du kannst nach dem Bau des Images \(und ggf. Push zu DockerHub\) eine Funktion) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(aufrufen, die das Feld `"image"` in deiner `command.json` ersetzt/aktualisiert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(Du kannst dann in Zukunft diese Stelle beliebig **erweitern**  noch mehr Inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(andere Auswertungen etc.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(## **Konkret: Script-Modularisierung & Erweiterbarkeit**) Tj
ET
endstream
endobj
53 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 54 0 R
>>
endobj
54 0 obj
<<
/Length 4421
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Das folgende Beispiel ist für dich als Grundidee, wie du es **modular** aufsetzt \(mit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(klaren Schritten und Platzhaltern für Erweiterungen\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(import getpass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(import requests) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(import json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(import subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def build_and_tag_image\(image_name, build_context\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    # Optionaler Build-Step für Erweiterungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    result = subprocess.run\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        ["docker", "build", "-t", image_name, build_context],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        capture_output=True, text=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    if result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        raise RuntimeError\("Docker build failed: " + result.stderr\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    print\(f"Docker image {image_name} built."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    return image_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(def update_command_json_with_image\(command_json_path, image_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    # Schreibe oder aktualisiere das 'image'-Feld) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    if os.path.exists\(command_json_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        with open\(command_json_path\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(            data = json.load\(f\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        data = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            "name": "Automatistation",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(            "description": "Automatisierung von Container.",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            "version": "1.0",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            # ... weitere Standardfelder ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    data["image"] = image_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    with open\(command_json_path, "w"\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        json.dump\(data, f, indent=2\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    print\(f"Updated {command_json_path} with image: {image_name}"\)) Tj
ET
endstream
endobj
55 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 56 0 R
>>
endobj
56 0 obj
<<
/Length 4464
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    # --- 1. Meta-Info und Creds ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    xnat_host = input\("XNAT Host: "\).rstrip\("/"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    project_id = input\("Project ID: "\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    username = input\("XNAT Username: "\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    password = getpass.getpass\("XNAT Password: "\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    # --- 2. Docker-Build \(hier Platz für weitere Erweiterungen, z.B. Abfrage von Tag\) ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    image_name = "tanaebousfiha/osa-analyzer:latest" # oder: input\("Image name: "\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    build_and_tag_image\(image_name, "."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    # --- 3. Update command.json mit aktuellem Image ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    update_command_json_with_image\("command.json", image_name\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    # --- 4. Upload command.json, Sessions durchgehen, Container starten, ... ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    # Hier weiter wie gehabt...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    # Platz für Erweiterungen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    # Du kannst neue Funktionen rufen, weitere Dateitypen unterstützen etc.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(if __name__ == '__main__':) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(### **Zusammengefasst:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- **Ja, du kannst es automatisieren:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  Image nach dem Build immer automatisch in die command.json schreiben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Die modularen Funktionsaufrufe ermöglichen es dir später, z.B. mehr Dateitypen zu) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(prüfen oder weitere Automatismen/Abfragen hinzuzufügen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- **Typische Erweiterung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(  Füge im Haupt-Workflow einfach weitere Funktionsaufrufe und Parameter hinzu,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(z.B. für zusätzliche Analyseschritte, Feedback-Mechanismen, zusätzliche) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(XNAT-Ressourcen/Inputs.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(**Tipp für die Zukunft:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Wenn du das Skript als Vorlage für Studierende/Kolleg*innen gibst, dokumentiere im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Code mit `# HIER KANN WEITER ERWEITERT WERDEN!`.) Tj
ET
endstream
endobj
57 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 58 0 R
>>
endobj
58 0 obj
<<
/Length 995
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(#### **Kurz:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Deine Grundidee ist genau richtig.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Das Image wird _nach_ dem Build in das JSON geschrieben,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(und du kannst an exakt dieser Stelle im Workflow beliebig erweitern!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Wenn du magst, kann ich auch ein noch stärker kommentiertes, leeres Grundgerüst) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(für Modulierbarkeit/Lehrzwecke posten. Sag einfach Bescheid!) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R 11 0 R 13 0 R 15 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R 27 0 R 29 0 R 31 0 R 33 0 R 35 0 R 37 0 R 39 0 R 41 0 R 43 0 R 45 0 R 47 0 R 49 0 R 51 0 R 53 0 R 55 0 R 57 0 R ]
/Count 28
>>
endobj
59 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
60 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
61 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
62 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
63 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
64 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
65 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
66 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
67 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
68 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
69 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
70 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
71 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
72 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 59 0 R
/F2 60 0 R
/F3 61 0 R
/F4 62 0 R
/F5 63 0 R
/F6 64 0 R
/F7 65 0 R
/F8 66 0 R
/F9 67 0 R
/F10 68 0 R
/F11 69 0 R
/F12 70 0 R
/F13 71 0 R
/F14 72 0 R
>>
/XObject <<
>>
>>
endobj
73 0 obj
<<
/Producer (jsPDF 2.5.2)
/CreationDate (D:20250611161613+02'00')
>>
endobj
74 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 75
0000000000 65535 f 
0000132197 00000 n 
0000134206 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000003836 00000 n 
0000003973 00000 n 
0000008276 00000 n 
0000008413 00000 n 
0000013015 00000 n 
0000013153 00000 n 
0000017804 00000 n 
0000017943 00000 n 
0000022803 00000 n 
0000022942 00000 n 
0000027595 00000 n 
0000027734 00000 n 
0000032109 00000 n 
0000032248 00000 n 
0000037189 00000 n 
0000037328 00000 n 
0000042224 00000 n 
0000042363 00000 n 
0000047445 00000 n 
0000047584 00000 n 
0000052621 00000 n 
0000052760 00000 n 
0000056968 00000 n 
0000057107 00000 n 
0000061511 00000 n 
0000061650 00000 n 
0000065649 00000 n 
0000065788 00000 n 
0000070134 00000 n 
0000070273 00000 n 
0000075014 00000 n 
0000075153 00000 n 
0000080043 00000 n 
0000080182 00000 n 
0000085193 00000 n 
0000085332 00000 n 
0000090435 00000 n 
0000090574 00000 n 
0000095471 00000 n 
0000095610 00000 n 
0000100871 00000 n 
0000101010 00000 n 
0000106663 00000 n 
0000106802 00000 n 
0000112429 00000 n 
0000112568 00000 n 
0000117555 00000 n 
0000117694 00000 n 
0000121742 00000 n 
0000121881 00000 n 
0000126355 00000 n 
0000126494 00000 n 
0000131011 00000 n 
0000131150 00000 n 
0000132441 00000 n 
0000132567 00000 n 
0000132698 00000 n 
0000132832 00000 n 
0000132970 00000 n 
0000133094 00000 n 
0000133223 00000 n 
0000133355 00000 n 
0000133491 00000 n 
0000133619 00000 n 
0000133746 00000 n 
0000133875 00000 n 
0000134008 00000 n 
0000134110 00000 n 
0000134459 00000 n 
0000134545 00000 n 
trailer
<<
/Size 75
/Root 74 0 R
/Info 73 0 R
/ID [ <BCD4BE49352F49BECE9575440CD59F0F> <BCD4BE49352F49BECE9575440CD59F0F> ]
>>
startxref
134649
%%EOF