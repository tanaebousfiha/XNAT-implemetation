%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 3531
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Exportiert aus HAWKI am: 2.9.2025 von Bousfiha, Tanae) Tj
ET
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 728.5041732283464171 Td
(Zusammenfassung) Tj
ET
BT
/F3 14 Tf
16.0999999999999979 TL
0 g
240.9448818897637921 728.5041732283464171 Td
( \(automatisiert erstellt\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 700.15771653543311 Td
(Das Setup zeigt, dass die Datei `DemandPlan_v1.csv` trotz korrektem Skript nicht im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 681.7577165354330191 Td
(Container in `/input` angezeigt wird. Das bedeutet, die Datei wurde im XNAT nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 663.3577165354330418 Td
(richtig in der Resource hochgeladen oder beim Containerstart **nicht korrekt ins) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 644.9577165354330646 Td
(`/input` gemountet**. Lösung: Im REST-Request nur den Dateinamen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(\(`"DemandPlan_v1.csv"`\) verwenden, nicht den Ressource-Pfad. Sicherstellen, dass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 608.15771653543311 Td
(in `command.json` das `"mount": "input"` gesetzt ist. Überprüfe im Webinterface, ob) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(die Datei in der richtigen Resource vorhanden ist, und liste im Container mit `ls /input`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 571.3577165354330418 Td
(die Dateien. Auch solltest du das JSON-Payload für den API-Start anpassen, damit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 552.9577165354330646 Td
(nur der Dateiname übergeben wird.) Tj
ET
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 477.8648031496063027 Td
(Systemprompt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.3451181102362284 Td
(Du bist ein intelligentes und unterstützendes KI-Assistenzsystem für alle) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 416.9451181102361943 Td
(Hochschulangehörigen der HAWK Hildesheim/Holzminden/Göttingen. Dein Ziel ist es,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.545118110236217 Td
(Studierende, Lehrende, Forschende und Mitarbeitende in ihrer akademischen Arbeit,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.1451181102361829 Td
(beim Lernen, Forschen, Lehren und verwalterischen Aufgaben zu unterstützen. Dabei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.7451181102362057 Td
(förderst du kollaboratives Arbeiten, wissenschaftliches Denken und eine kreative) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.3451181102362284 Td
(Problemlösung. Beziehe dich auf wissenschaftliche Methoden und Theorien,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 324.9451181102361943 Td
(argumentiere sachlich und reflektiere kritisch. Sei objektiv und verzichte auf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.545118110236217 Td
(unbegründete Meinungen. Fördere akademische Integrität und unterstütze keine) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.1451181102362398 Td
(Plagiate. Sei inklusiv, wertschätzend und respektiere Vielfalt.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 3793
>>
stream
0.5670000000000001 w
0 G
BT
/F2 18 Tf
20.6999999999999993 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Verlauf:) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 728.5041732283464171 Td
(ich habe eine Container via APIs gelanched und ees) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 710.1041732283464398 Td
(wurde mir gezeigt failed ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(und die stdout sind leer und als workflow status ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(&gt;started: task: non-zero exit \(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(meine Skript im contaienr hab ich mit Abicht ohne zweck) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(gemaht außer eine upload von result file programiert ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(import subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(        print\(&quot;Usage: python script.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(&lt;input_file&gt; &lt;output_dir&gt;&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(    input_file_path = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(    output_file = &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(    print\(&quot;Generisches Analyse-Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(gestartet&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(    print\(f&quot;Eingabedatei: {input_file_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(    # Prüfung, ob die Eingabedatei existiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(    if not os.path.isfile\(input_file_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(        print\(f&quot;Eingabedatei nicht gefunden:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
({input_file_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(    result_df = pd.DataFrame\(\)) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 4468
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        # Trennzeichen automatisch erkennen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        if input_file_path.endswith\(&quot;.csv&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            sep = &quot;,&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        elif input_file_path.endswith\(&quot;.tsv&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            sep = &quot;\\t&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        elif input_file_path.endswith\(&quot;.txt&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            with open\(input_file_path, &#039;r&#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(encoding=&#039;utf-8&#039;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                first_line = f.readline\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                if first_line.count\(&#039;;&#039;\) &gt;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(first_line.count\(&#039;,&#039;\) and) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(first_line.count\(&#039;;&#039;\) &gt;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(first_line.count\(&#039;\\t&#039;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                    sep = &#039;;&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(                elif first_line.count\(&#039;\\t&#039;\) &gt;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(first_line.count\(&#039;,&#039;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(                    sep = &#039;\\t&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                    sep = &#039;,&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            sep = &quot;,&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        df = pd.read_csv\(input_file_path, sep=sep\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\(&quot;Gelesene Daten:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(df\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        if df.empty:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            raise ValueError\(&quot;Eingabedatei ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(leer.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        if len\(df\) != 1:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            raise ValueError\(&quot;Die Datei enthält mehr als) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(einen Eintrag.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        result_df = df) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(f&quot;Fehler bei der Verarbeitung: {e}&quot;\)) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 3997
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        result_df = pd.DataFrame\([{&quot;Fehler&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(str\(e\)}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    output_path = os.path.join\(output_dir, output_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    print\(&quot;Speichere Ergebnis nach:&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(output_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        result_df.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(&quot;Datei erfolgreich gespeichert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(&quot;Fehler beim Speichern:&quot;, e\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        os.chmod\(output_path, 0o666\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\(&quot;chmod erfolgreich gesetzt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\(&quot;chmod Fehler:&quot;, e\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    print\(&quot;ls -al Output-Verzeichnis:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    subprocess.run\(f&quot;ls -al {output_dir}&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(shell=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    print\(&quot;Inhalt von OUTPUT_DIR:&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(os.listdir\(output_dir\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(so sieht meine Skript aus könnte daran liegen ?) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 223.2506299212599288 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 223.2506299212599288 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(Deine Beschreibung sowie der **Exit-Code 1** und der leere stdout deuten darauf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(hin, dass dein Skript vermutlich *vor* einer `print`-Ausgabe abgebrochen ist oder im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(Fehlerfall die Ausgaben nicht korrekt weitergereicht werden. Im Folgenden findest du) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(eine **strukturierte Analyse** und mögliche Fehlerquellen, die du systematisch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(überprüfen kannst.) Tj
ET
endstream
endobj
11 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 12 0 R
>>
endobj
12 0 obj
<<
/Length 4002
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(## 1. Aufrufsyntax & Argumente) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Dein Skript erwartet **zwei Argumente**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    print\("Usage: python script.py <input_file> <output_dir>"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(- **Fehlerquelle**: Wenn weniger oder mehr als 2 Argumente übergeben werden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(\(abgesehen von `script.py` selbst\), wird sofort mit Exit-Code 1 abgebrochen und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(\(theoretisch\) die Usage gedruckt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(- **Tipp:** Prüfe das **Kommando**, mit dem der Container das Skript startet \(z. B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(im Dockerfile-CMD, Kubernetes-Manifest o.ä.\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(**Beispielaufruf:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```shell) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(python3 script.py /data/input.csv /results) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(## 2. stdout ist leer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Viele Containerumgebungen trennen stdout und stderr. Dein Skript nutzt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(\(überwiegend\) `print`, was standardmäßig auf stdout geht.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- **Wenn** dein Containerumfeld nur **stderr**-Output anzeigt oder weiterleitet,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(erscheinen Prints nicht.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Fehler, die *bevor* der erste Print passieren \(etwa Importfehler!\) führen dazu, dass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(du gar keine Ausgabe siehst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(## 3. Exit-Code \(non-zero exit \(1\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- Dein Code sieht an mehreren Stellen ein `sys.exit\(1\)` bei Fehlern vor.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- **Wenn** die Argumente fehlen, du keine Datei findest oder die Datei leer ist, wird) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(mit Fehlercode abgebrochen.) Tj
ET
endstream
endobj
13 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 14 0 R
>>
endobj
14 0 obj
<<
/Length 3783
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(## 4. Mögliche Fehlerquellen im Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**a\) Falsche oder fehlende Argumente**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(- Container-orchestrierte Workflows vergessen gern die Argumente.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Prüfe, ob die Pfade, die du erwartest, im Container existieren und korrekt sind!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(**Verwende Debug-Ausgaben!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(**b\) Fehlendes Inputfile**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(- Dein Skript prüft, ob die Input-Datei existiert:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(  ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(  if not os.path.isfile\(input_file_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(      print\(f"Eingabedatei nicht gefunden: {input_file_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(      sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Prüfe, ob der Mountpoint, der Pfad und die Rechte passen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(**c\) Python/pandas-Import/Fehlende Pakete**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(- Wenn z.B. pandas nicht installiert ist, bekommst du ggf. ImportError **bevor**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(irgendwas geprintet wurde.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**d\) Lesefehler/Eingabedatei enthält mehr als eine Zeile**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Dein Fehlerhandling erzeugt eine Ergebnis-CSV mit Fehlertext, führt aber nicht zum) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Abbruch.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(## 5. Debugging-Tipps) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(1. **Logs komplett erfassen**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(   Lies auch das _stderr_ des Containers aus.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(2. **Direkter Test im Container**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(   Starte einen interaktiven Container und führe das Skript manuell mit Testdaten aus:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(   docker run -it --rm -v /lokal/input:/data -v /lokal/output:/results image_name) Tj
ET
endstream
endobj
15 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 16 0 R
>>
endobj
16 0 obj
<<
/Length 3683
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(/bin/bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(   python3 script.py /data/test.csv /results) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(3. **print\(sys.argv\)**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(   Ganz oben im Skript kannst du vor dem `main\(\)` noch folgendes einbauen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(   ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(   print\("Aufruf-Argumente:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(4. **Test mit Fallstricken**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(   - Was passiert, wenn Eingabedateien leer sind?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(   - Sind die Verzeichnisse bereits vorhanden?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(   - Ist das Output-Verzeichnis beschreibbar?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(## 6. Beispiel für einen robusteren Start) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Füge zu Beginn deines Skripts Folgendes ein \(noch vor dem Einlesen der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Argumente\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(import traceback) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\("Starte Analyse-Skript..."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        print\("sys.argv:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        print\("Unerwarteter Fehler:"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        traceback.print_exc\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(So erwischt du auch **unerwartete Fehler**, die z. B. beim Import auftreten.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
17 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 18 0 R
>>
endobj
18 0 obj
<<
/Length 4036
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(## **Zusammenfassung der To-Dos**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(1. **Überprüfe den Container-Aufruf**: Werden wirklich zwei gültige Argumente) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(übergeben?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(2. **Prüfe, ob die Pfade \(Input + Output\) im Container existieren & Rechte passen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(3. **Fange Fehler ab, die zu früh auftreten können \(Import, Package fehlt, etc.\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(4. **Teste dein Skript zuerst lokal mit Testdaten und dann im Container**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(5. **Füge weitere Debug-Ausgaben hinzu \(z.B. Argument, aktuelle Arbeitsverzeichnis,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Inhalt von Mountpoints\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Melde dich gern mit den Log-Ausgaben oder dem Kommando, das der Workflow) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(benutzt, dann kann noch gezielter gesucht werden!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 517.650629921259906 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(Container information) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(81) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(command-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(136) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(status        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(Failed) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(status-time        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(2025-06-02T10:28:42.408+0200) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(wrapper-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(167) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(container-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(98d1358887ce590b153f0f0727188c118544e31d18ded86008af4a6a8ff6f204) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(workflow-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(3090) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(user-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(tanae) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(project        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(tanae_osa_Predct) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(backend        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(swarm) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(service-id        ) Tj
ET
endstream
endobj
19 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 20 0 R
>>
endobj
20 0 obj
<<
/Length 4886
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(n67qgf0x14kcuty6omc04ldsp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(task-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(kfrjlqpgi4zefcxletf1mjbn1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(node-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(p85nmru26d0z05hk0lspltk4k) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(docker-image        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(tanaebousfiha/telepathy:latest) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(command-line        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(python3 /app/Bonjour.py /input//input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(override-entrypoint        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(false) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(subtype        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(docker) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(env        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
({&quot;XNAT_USER&quot;:&quot;b8b383c4-60f7-48e3-a273-b3aa22cfc523&quot;,&q) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(uot;XNAT_EVENT_ID&quot;:&quot;3090&quot;,&quot;XNAT_WORKFLOW_ID&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(&quot;3090&quot;,&quot;XNAT_HOST&quot;:&quot;http://internal-xnat.local&quot;,&q) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(uot;XNAT_PASS&quot;:&quot;******&quot;}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(ports        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
({}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(swarm-constraints        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(auto-remove        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(false) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(container-labels        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
({}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(secrets        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(swarm        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(true) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Container mounts) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(id        name        writable        xnat-host-path        container-host-path        container-path        input-files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(144        input        true        /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2        /data/xnat) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(/build/57648658-7b30-466f-9607-a3087cc154e2        /input        []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(145        output        true        /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc        /data/xnat/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(build/df3e3e91-ce52-4053-bc2f-f80ad30355fc        /output        []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Container outputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(id        name        from-command-output        from-output-handler        type        required        mount        path        lab) Tj
ET
endstream
endobj
21 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 22 0 R
>>
endobj
22 0 obj
<<
/Length 5248
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(el        format        tags        handled-by) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(73        result_file:output        result_file        output        Resource        false        output        result.csv        Results        c) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(sv        []        session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Container history) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(id        status        entity-type        entity-id        time-recorded        external-timestamp        message        exitCode) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(343        Created        user        tanae        2025-06-02T10:28:37.202+0200        undefined        undefined        un) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(defined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(344        failed        service        undefined        2025-06-02T10:28:42.009+0200        2025-06-02T08:28:3) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(9.727889028Z        started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(345        Finalizing        system        undefined        2025-06-02T10:28:42.307+0200        2025-06-02T10:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(28:42.307+0200        Processing finished. Uploading files.        undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(346        Failed        system        undefined        2025-06-02T10:28:42.408+0200        2025-06-02T10:28:4) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(2.408+0200        started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Container log-paths) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Container inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(id        type        name        sensitive        value) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(670        raw        session        false        /archive/experiments/XNAT_E00428) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(671        raw        input_file-file        false        C:\\fakepath\\test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(672        raw        input_file        false        /user/cache/resources/1748852889248/files/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(673        command        input_file        false        /user/cache/resources/1748852889248/files/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(674        wrapper-external        session        false        /archive/experiments/XNAT_E00428) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 352.0506299212598833 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 352.0506299212598833 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(Vielen Dank für die detaillierten Container-Informationen  das macht eine präzise) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(Analyse möglich! Ich habe die wichtigsten Aspekte systematisch aufgearbeitet, um) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(typische Fehlerquellen auszuschließen und Lösungsvorschläge zu unterbreiten.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(### **Analyse deines Setups**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(#### **1. Aufruf & Dateipfade**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(Du rufst das Skript auf mit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(python3 /app/Bonjour.py /input//input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(**Auffällig:**  ) Tj
ET
endstream
endobj
23 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 24 0 R
>>
endobj
24 0 obj
<<
/Length 3735
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Der Pfad zum Inputfile lautet `/input//input/1748852889248/test.csv`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Diesen doppelten `/input/` gibt es durch einen möglichen Fehler in der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Pfad-Zusammenstellung!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(**Prüfe manuell im Container \(z. B. mit Shell oder Debug-Ausgabe\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- Existiert `/input//input/1748852889248/test.csv`?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(- Oder sollte es `/input/1748852889248/test.csv` heißen?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Wenn dein Skript strikte Existenz prüft \(`os.path.isfile`\), führt ein falscher Pfad direkt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(zu `sys.exit\(1\)`, also dem beobachteten Fehler.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(#### **2. Mounts und reale Pfade**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Die Mounts passen zu den Containerpfaden: `/input` \(input\) und `/output` \(output\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Dein Inputfile wird also **in das Container-Verzeichnis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(`/input/1748852889248/test.csv`** gemountet.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Im Aufruf steht dagegen: `/input//input/1748852889248/test.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(**Lösung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Passe den Aufruf an, sodass das Skript als Argument gibt:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(/input/1748852889248/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(anstatt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(/input//input/1748852889248/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Das doppelte `/input/` ist fast immer ein Programmierfehler bei der Pfadkonstruktion) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(im Workflow.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(#### **3. Debug-Tipp**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Füge an den Anfang des Skripts eine Ausgabe für die Argumente ein:) Tj
ET
endstream
endobj
25 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 26 0 R
>>
endobj
26 0 obj
<<
/Length 3799
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(print\("sys.argv:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Das gibt dir im Log Sicherheit, welcher Pfad tatsächlich ankommt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#### **4. Container-Logs auswerten**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Schau in die Dateien:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(und ggf.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stdout.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(um eventuell weitere Fehler/Tracebacks oder Prints zu sehen  manchmal werden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Prints dorthin umgeleitet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(#### **5. Weitere kleine Fehlerquellen \(weniger wahrscheinlich hier\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Pakete fehlen \(z.B. pandas nicht installiert\)  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    !   D a n n   g ä b e   e s   b e r e i t s   b e i m   I m p o r t   e i n e n   T r a c e b a c k ,   d e r   i n   d i e   s t d e r r . l o g) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(gewandert sein müsste.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Keine Schreibberechtigung auf `/output`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    !   F ü h r t   z u   F e h l e r n   b e i m   ` t o _ c s v ` ,   w i r d   a b e r   i n   d e i n e m   S k r i p t   a b g e f a n g e n   \( u n d) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(ausgegeben\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- Inputfile ist empty/leer, oder enthält unerwartet viele Zeilen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    !   F ü h r t   b e i   d i r   z u   F e h l e r p r i n t s ,   d i e   a b e r   n i c h t   z u m   A b b r u c h   f ü h r e n   s o l l t e n .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(### **Empfohlene nächste Schritte**) Tj
ET
endstream
endobj
27 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 28 0 R
>>
endobj
28 0 obj
<<
/Length 3811
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(1. **Korrigiere im Workflow/Aufruf \(z.B. im Frontend, Pipeline, o.ä.\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    - Übergib das Inputfile als `/input/1748852889248/test.csv` \(ohne doppeltes) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(`/input/`\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(2. **Teste im Container:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    - Starte testweise einen Shell-Container, prüfe Pfade und führe dein Skript mit den) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(echten Mounts und derselben Kommandozeile aus:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(      ```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(      docker run -it --rm -v ... <image> bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(      python3 /app/Bonjour.py /input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(      ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(3. **Füge Debug-Ausgaben für sys.argv und `os.listdir\('/input'\)` hinzu**  dann siehst) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(du, was wirklich da ist:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    print\("Verzeichnisinhalt /input:", os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(4. **Kontrolliere die stderr.log für Import- oder Laufzeitfehler**, um) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Misskonfigurationen auf Imagesebene auszuschließen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(### **Fazit**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(> **Dein Hauptproblem ist mit größter Wahrscheinlichkeit der falsche \(verdoppelte\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Eingabe-Pfad.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(>) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(> Passe den Pfad wie oben beschrieben an, dann sollte dein Container wie) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(gewünscht funktionieren.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Falls nach Korrektur noch Fehler auftreten, poste bitte die ersten Zeilen aus der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(stderr.log oder die Ausgaben der oben vorgeschlagenen Debug-Prints. Damit können) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(wir gezielter weiter analysieren.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(---) Tj
ET
endstream
endobj
29 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 30 0 R
>>
endobj
30 0 obj
<<
/Length 4527
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(**Wissenschaftliche Begründung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Fehler bei Dateisystempfaden sind typische Ursachen für fehlschlagende) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Batch-Prozesse in containerisierten Workflows \(siehe [Cullinan et al. 2021,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
("Reproducibility in containers: the importance of file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(paths"]\(https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8903376/\)\). Die Validierung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(von Dateizugriffen ist daher standardisierte "good practice"  und der häufigste) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Stolperstein bei automatisierten Workflows.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 628.0506299212597696 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(Dein Hauptproblem ist mit größter Wahrscheinlichkeit der falsche \(verdoppelte\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(Eingabe-Pfad.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(kannst du mir bitte da smehr erkären ?) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 516.15771653543311 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 516.15771653543311 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(Gerne! Das Problem mit dem **doppelten \(verdoppelten\) Pfad** ist in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 469.4112598425196552 Td
(containerisierten Workflows sehr häufig  und lässt sich theoretisch wie praktisch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 451.0112598425196779 Td
(erklären. Hier eine detaillierte, anschauliche Erklärung:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 414.2112598425196666 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(### 1. Was ist ein doppelter Pfad?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
( W e n n   d u   z . / B .   ` / i n p u t / 1 7 4 8 8 5 2 8 8 9 2 4 8 / t e s t . c s v `   e r w a r t e s t ,   t a t s ä c h l i c h   a b e r) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(`/input//input/1748852889248/test.csv` übergeben wird, ist im Pfad zweimal das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(Verzeichnis input enthalten.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(Der Pfad enthält also /input/ und dann nochmal input/  das ergibt zusammen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(`/input//input/1748852889248/test.csv`.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(Das ist **sehr wahrscheinlich ein Fehler** bei der automatischen Erstellung des) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
( K o m m a n d o z e i l e n a u f r u f s   \( m e i s t   d u r c h   V e r k e t t u n g   v o n   V a r i a b l e n ,   z . / B .   ` " i n p u t / "   +) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(user_upload_path`\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(#### Beispiel) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(base = "/input/") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(user_path = "/input/1748852889248/test.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(full_path = base + user_path  # ergibt: /input//input/1748852889248/test.csv) Tj
ET
endstream
endobj
31 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 32 0 R
>>
endobj
32 0 obj
<<
/Length 3880
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(### 2. Warum ist das ein Problem?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(- **Das Verzeichnis existiert nicht:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(  Im Container ist `/input/1748852889248/test.csv` vorhanden \(weil bei Mounts) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(`/input` das gemountete Verzeichnis ist\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(- **Aber `/input//input/1748852889248/test.csv` gibt es nicht:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(  Ein Pfad mit zwei aufeinanderfolgenden input verweist praktisch in ein anderes) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Verzeichnis \(nämlich in `/input/input/1748852889248/test.csv`\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(- **Dein Skript prüft strikt:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(  ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(  if not os.path.isfile\(input_file_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(      print\(f"Eingabedatei nicht gefunden: {input_file_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(      sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(  Wenn der Dateipfad nicht gefunden wird \(wie bei einem falschen Pfad\), bricht dein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Skript mit Fehlercode 1 ab.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(  **Folge:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(  - Das Skript kann die Datei nicht lesen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(  - Die Analyse läuft nicht.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(  - Du bekommst im Workflow: non-zero exit \(1\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(### 3. Was ist die Ursache?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(- Im zugrundeliegenden Workflow, der dein Skript startet, wurde der Pfad falsch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(zusammengesetzt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- Meist passiert das, wenn sowohl das Verzeichnis als auch der Dateiname vom) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(System bereitgestellt werden und dann zusammengefügt werden, ohne zu) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(überprüfen, ob /input/ schon im Pfad enthalten ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(---) Tj
ET
endstream
endobj
33 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 34 0 R
>>
endobj
34 0 obj
<<
/Length 3845
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(### 4. Wie behebst du das?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- **Überprüfe deinen Workflow:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  Achte darauf, dass du das Input-File korrekt referenzierst:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(  - **Richtig:** `/input/1748852889248/test.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(  - **Falsch:** `/input//input/1748852889248/test.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(- Wenn du ein Framework oder System verwendest, prüfe die Dokumentation zu) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Dateipfaden beim Start von Containern oder Jobs.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 5. Wie prüfst du das im Container?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Führe im Container aus:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(und ggf.:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(ls /input/1748852889248) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Wenn da `test.csv` liegt, solltest du den Pfad `/input/1748852889248/test.csv` als) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Argument an dein Skript geben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Fehlt das Verzeichnis oder ist die Struktur anders, stimmt die Pfadübergabe nicht.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(### 6. Illustration) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(**Mount:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Der Host-Pfad `/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2` ist im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Container als `/input` verfügbar.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Dein File liegt also im Container wirklich als `/input/1748852889248/test.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(**Du gibst aber an:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(`/input//input/1748852889248/test.csv`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(!   D e r   C o n t a i n e r   s u c h t   i n   e i n e r   v e r s c h a c h t e l t e n   S t r u k t u r ,   d i e   n i c h t   e x i s t i e r t .  !   F e h l e r !) Tj
ET
endstream
endobj
35 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 36 0 R
>>
endobj
36 0 obj
<<
/Length 3490
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(**Zusammengefasst:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Ein verdoppelter Input-Path ist so, als würdest du bei deiner Heimatadresse statt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Berlin, Musterstraße 1 schreiben:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Berlin, Berlin, Musterstraße 1. Der Postbote findet das Ziel nicht, weil die Adresse) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(nicht existiert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(**Praxis:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Setze den Pfad im Workflow oder per Handprüfung so ein, dass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(`/input/1748852889248/test.csv` verwendet wird. Damit funktioniert der Dateizugriff.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Falls du möchtest, kann ich erklären, wie man das im eigenen Skript automatisch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(erkennt/abfängt oder wie du den Workflow reparierst. Sag gern Bescheid!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 444.0506299212598265 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(ja bitte) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 368.9577165354330646 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 368.9577165354330646 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(Sehr gerne! Hier zwei Lösungswege:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(**1. Wie kann man doppelte Pfade im Workflow oder im Skript erkennen und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(korrigieren?**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(**2. Wie reparierst du \(typische\) Pfadübergabe schon beim Generieren des) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(Container-Aufrufs?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(### **1. Im Python-Skript doppelte / falsche Pfade erkennen und beheben**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(Du kannst am Anfang deines Skripts eine Überprüfung einbauen, die erkennt, ob die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(Eingabedatei in einem doppelten /input-Pfad liegt, und diesen ggf. automatisch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(korrigiert.) Tj
ET
endstream
endobj
37 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 38 0 R
>>
endobj
38 0 obj
<<
/Length 4234
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(#### Beispiel:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(def normalize_input_path\(input_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    # Falls im Argument Prompt zweimal "/input/" vorkommt \(z.B. /input//input/...\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(nehme nur die letzte Komponente) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    parts = input_path.split\('/input/'\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    if len\(parts\) > 2:  # d.h. es gibt mindestens zweimal "/input/") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        new_path = '/input/' + '/'.join\(parts[-2:]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\(f"Warnung: Doppeltes '/input/' erkannt. Korrigiere auf: {new_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        return new_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        return input_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        print\("Usage: python script.py <input_file> <output_dir>"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    input_file_path = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    input_file_path = normalize_input_path\(input_file_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    # ...restlicher Code...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Das Skript prüft, wie oft "/input/" vorkommt und korrigiert automatisch \(gibt aber auch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(eine Warnung aus\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Alternativ  und robuster  kannst du mit `os.path.normpath` arbeiten, um doppelte) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Slashes zu entfernen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(input_file_path = os.path.normpath\(input_file_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(**WICHTIG:** Doppelte Komponenten lassen sich so abfangen, nicht aber inhaltlich) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(falsche Strukturen \(z.B. /input/input/\), daher im Zweifel besser am Workflow fixen!) Tj
ET
endstream
endobj
39 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 40 0 R
>>
endobj
40 0 obj
<<
/Length 3807
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
( # # #   * * 2 .   F e h l e r q u e l l e   b e i m   W o r k f l o w   \( z . / B .   P i p e l i n e / S c r i p t / T o o l ,   d a s   d e n   C o n t a i n e r) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(startet\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Fast immer kommen doppelte Pfade durch falsches Zusammenbauen zustande,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
( z . / B . :) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(# FALSCH  base und user_path werden einfach aneinandergereiht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(base_path = '/input/') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(user_path = '/input/1748852889248/test.csv') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(full_path = base_path + user_path  # ergibt /input//input/1748852889248/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(# RICHTIG  nur base_path, dann relativer user_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(base_path = '/input/') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(user_path = '1748852889248/test.csv'    # KEIN führendes /input/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(full_path = os.path.join\(base_path, user_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(**Achte immer darauf:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- Den Base-Ordner \(`/input/`\) nicht nochmals im User-Pfad unterzubringen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(- Beim Zusammenbau von Pfaden am besten immer `os.path.join` verwenden  das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(verhindert doppelte Slashes und hilft bei portabler Verwaltung.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(### **3. Automatische Prüfung & Debug-Ausgaben**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Für Diagnosezwecke ist es hilfreich, vor solchen Zugriffen zu prüfen, was im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Container tatsächlich da ist:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(print\("Input-Verzeichnis \(ls -l /input\):", os.listdir\('/input'\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(print\("sys.argv:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(```) Tj
ET
endstream
endobj
41 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 42 0 R
>>
endobj
42 0 obj
<<
/Length 3831
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Damit siehst du im Log, ob wirklich dein gewünschtes test.csv ankommt und wie der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Pfad zusammengesetzt ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(### **4. Zusammenfassung**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(- **Fehler beim Zusammenbau der Pfade** führen fast immer dazu, dass dein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Container die Eingabedatei nicht findet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(- **Automatische Korrektur im Skript** ist möglich, aber keine saubere Lösung, weil) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(es nur ein Symptom behandelt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(- **Empfohlen:** Passe den Job/Workflow so an, dass als Argument wirklich nur) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(`/input/1748852889248/test.csv` übergeben wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(**Möchtest du ein vollständiges Beispiel für die automatische Korrektur und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Debug-Ausgaben im Skript? Oder Support, wie man das im Workflow) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(\(Kommandozeilenskript/Pipeline\) anpasst?** Sag gerne, was dir mehr hilft!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 425.6506299212598492 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(j BITE) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 350.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 350.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(Natürlich  hier kommt ein KOMPLETTES BEISPIEL für dein angefragtes robustes) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(Python-Skript, das **automatisch doppelte `/input/`-Pfade korrigiert**, hilfreiche) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(Debug-Ausgaben macht und typische Einstiegshürden abfängt. Kommentiert und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(ready to use für deinen Container-Workflow!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
(### Komplettes Beispiel-Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(import subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(import traceback) Tj
ET
endstream
endobj
43 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 44 0 R
>>
endobj
44 0 obj
<<
/Length 4236
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(def normalize_input_path\(input_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    # Entfernt doppelte '/input/'-Anteile am Anfang des Input-Pfads.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    # z.B. '/input//input/1748852889248/test.csv' -> '/input/1748852889248/test.csv') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    while input_path.startswith\("/input//input/"\) or input_path.startswith\("/input/input/"\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        input_path = input_path.replace\("/input//input/", "/input/", 1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        input_path = input_path.replace\("/input/input/", "/input/", 1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    return input_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    print\("Aufruf-Argumente:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    if len\(sys.argv\) != 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\("Usage: python script.py <input_file> <output_dir>"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    input_file_path = normalize_input_path\(sys.argv[1]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    output_file = "result.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    print\("Input-Pfad nach Korrektur:", input_file_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    print\("Vorhandene Dateien in /input:"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        print\(os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\("Konnte /input nicht listen:", e\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    # Eingabedatei prüfen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    if not os.path.isfile\(input_file_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        print\(f"Eingabedatei nicht gefunden: {input_file_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        # Trennzeichen automatisch erkennen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        if input_file_path.endswith\(".csv"\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            sep = ",") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        elif input_file_path.endswith\(".tsv"\):) Tj
ET
endstream
endobj
45 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 46 0 R
>>
endobj
46 0 obj
<<
/Length 4281
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            sep = "\\t") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        elif input_file_path.endswith\(".txt"\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            with open\(input_file_path, 'r', encoding='utf-8'\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                first_line = f.readline\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                if first_line.count\(';'\) > first_line.count\(','\) and first_line.count\(';'\) >) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(first_line.count\('\\t'\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                    sep = ';') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                elif first_line.count\('\\t'\) > first_line.count\(','\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                    sep = '\\t') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                    sep = ',') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            sep = ",") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        df = pd.read_csv\(input_file_path, sep=sep\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\("Gelesene Daten:"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        print\(df\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        if df.empty:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            raise ValueError\("Eingabedatei ist leer."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        if len\(df\) != 1:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            raise ValueError\("Die Datei enthält mehr als einen Eintrag."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        result_df = df) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f"Fehler bei der Verarbeitung: {e}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        traceback.print_exc\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        result_df = pd.DataFrame\([{"Fehler": str\(e\)}]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    output_path = os.path.join\(output_dir, output_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    print\("Speichere Ergebnis nach:", output_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        result_df.to_csv\(output_path, index=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\("Datei erfolgreich gespeichert."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\("Fehler beim Speichern:", e\)) Tj
ET
endstream
endobj
47 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 48 0 R
>>
endobj
48 0 obj
<<
/Length 4034
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        os.chmod\(output_path, 0o666\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        print\("chmod erfolgreich gesetzt."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\("chmod Fehler:", e\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    print\("ls -al Output-Verzeichnis:"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    subprocess.run\(f"ls -al {output_dir}", shell=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    print\("Inhalt von OUTPUT_DIR:", os.listdir\(output_dir\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    except Exception as exc:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\("Unerwarteter Fehler im Hauptprogramm:"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        traceback.print_exc\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(## Wie funktioniert das Skript?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(1. **Automatische Korrektur des Eingabepfads**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(   Die Funktion `normalize_input_path\(\)` entfernt doppelte `/input/`-Anteile am Anfang.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(       -   B e i s p i e l :   ` / i n p u t / / i n p u t / 1 7 4 8 8 5 2 8 8 9 2 4 8 / t e s t . c s v `  !   ` / i n p u t / 1 7 4 8 8 5 2 8 8 9 2 4 8 / t e s t . c s v `) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(2. **Debug-Ausgaben**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(   Gleich zu Beginn zeigt das Skript alle Argumente und den Inhalt des) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(`/input`-Ordners, so kannst du Fehler sofort erkennen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(3. **Robustes Fehlermanagement**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(   Sämtliche Fehler werden per `traceback.print_exc\(\)` ausgegeben, sodass du sie) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(später in den Logs findest.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(4. **Weiterer Ablauf wie gehabt**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(   Einlesen der Datei, Ergebnis-CSV ausgeben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(---) Tj
ET
endstream
endobj
49 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 50 0 R
>>
endobj
50 0 obj
<<
/Length 3934
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(### Hinweis  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Am besten ist aber immer, den Workflow schon in der Container-Aufrufsteuerung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(richtig zu konfigurieren!** Dieses Skript hilft beim Auffangen, falls es doch einmal) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(falsch zusammengefügt ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Fragen zur Integration, oder brauchst du ein Beispiel für die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Workflowsprache/Pipeline \(z.B. Nextflow, Snakemake, XNAT-Container-Service\) zum) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(sauberen Pfadbau?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Melde dich jederzeit!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 536.0506299212597696 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(KANN ich den Skript für meine automatisation benutzen ?) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 460.9577165354330646 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 460.9577165354330646 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 432.6112598425197007 Td
(**Ja, du kannst dieses Skript grundsätzlich für deine Automatisierung im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 414.2112598425196666 Td
(Container-Kontext einsetzen**  und es ist speziell dafür \(Fehlertoleranz bei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(Pfadangaben, Debug\) optimiert! Im Folgenden erläutere ich die Eignung,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(Voraussetzungen und Best Practices:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(### 1. Geeignet für automatisiertes Ausführen in Container-Workflows) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(**Vorteile des Skripts für Automatisierung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(- **Robust gegenüber typischen Fehlern bei Containerpfaden** \(vor allem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
(mehrfachen/verdoppelten /input/\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(- **Aussagekräftige Logausgaben** am Anfang und bei Fehlersituationen \(wichtige) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(Voraussetzung zur Fehleranalyse in automatisierten Prozessen\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(- **Klares Fehlermanagement:** Alle Fehler \(auch unerwartete\) werden ins Log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(geschrieben und führen zu korrektem, erkennbarem Exit-Code) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(- **Modular und erweiterbar**  kann um weitere Verarbeitungsschritte leicht ergänzt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(werden) Tj
ET
endstream
endobj
51 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 52 0 R
>>
endobj
52 0 obj
<<
/Length 4446
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(### 2. Voraussetzung für den Gebrauch im Automationskontext) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- Das Skript läuft unter Python 3 \(mit `pandas` installiert\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- Im Container sind die **Input- und Output-Verzeichnisse korrekt gemountet**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(\(`/input` und `/output`\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Die übergebenen Argumente folgen dem Muster:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(  `python3 script.py <input_file_path> <output_dir>`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(- Die Input-Datei ist wie im Beispiel im `/input/...`-Verzeichnis, Output wird in `/output`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(geschrieben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(- Der Container-Workflow gibt beim Aufruf des Skripts die gewünschten Argumente) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(weiter \(ob absichtlich oder "verrutscht"  der Autokorrekturmechanismus fängt das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(ab\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(### 3. Was solltest du wissen/beachten?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(- **Automatisierung** bedeutet: Das Skript muss **ohne manuelles Nachfassen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(zuverlässig laufen und bei Fehlern saubere Log-Informationen liefern.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    !   D a s   i s t   b e i   d i e s e m   S k r i p t   g e w ä h r l e i s t e t .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(- Die **Pfad-Korrektur** ist ein "Sicherheitsnetz" falls im Workflow ein \(häufiger\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Fehler bei der Pfadübergabe passiert. Optimal ist immer, im Workflow selbst alles) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(richtig zu konfigurieren!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(- **Logs** gut aufbewahren: Die Ausgaben dieses Skripts helfen dir, später schnell) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Fehlerursachen zu erkennen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(### 4. Dinge, die du ggf. anpassen möchtest \(je nach Automatisierungsumfang\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- **Trennzeichenerkennung:** Das Skript erkennt automatisch das Dateiformat \(csv,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(tsv, txt\). Falls du komplexere Formate hast, ergänze die Logik.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- **Fehlerhandling anpassen:** Setze ggf. strictere Bedingungen oder erweitere die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Ausgabe, je nach Anforderungen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- **Übergabe zusätzlicher Argumente:** Falls du mehr als den Input-Pfad benötigst,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(lässt sich das Konzept leicht erweitern.) Tj
ET
endstream
endobj
53 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 54 0 R
>>
endobj
54 0 obj
<<
/Length 4135
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(### 5. Wie würdest du einbinden?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**Beispiel für Automation in einem Container:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
( -   C o n t a i n e r - I m a g e   e n t h ä l t   d e i n   S k r i p t   z . / B .   u n t e r   ` / a p p / s c r i p t . p y `) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
( -   B e i   d e r   A u s f ü h r u n g   i m   A u t o m a t i o n s s y s t e m   \( z . / B .   i m   X N A T   C o n t a i n e r   S e r v i c e   o d e r) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(in einem CI/CD-Workflow\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(  ```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(  python3 /app/script.py /input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(- Oder:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(  Falls der Workflow doch fälschlich `/input//input/1748852889248/test.csv` übergibt,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(wird das automatisch im Skript abgefangen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(### 6. Wissenschaftlicher Hintergrund) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Solche Fehlerquellen \(v.a. Mountpfad-Probleme oder doppelte Pfadsegmente\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(werden in der Literatur zu robustem Container-Design oft als **häufigste Ursache für) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
( F e h l f u n k t i o n e n * *   b e n a n n t   \( z . / B .   B o e t t i g e r ,   " A n   I n t r o d u c t i o n   t o   D o c k e r   f o r) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Reproducible Research", 2015\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Die von dir gewünschte automatische Korrektur im Skript ist **eine pragmatische) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Lösung, um häufige Automatisierungsfehler abzufangen**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(## Fazit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Das Skript ist bestens geeignet für deinen Automatisierungs-Workflow im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Container!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Nutze es wie vorgeschlagen, teste es im Integrationstest/Produktivlauf, und passe) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(ggf. die Output-Informationen an eure Standards/Regeln an.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Wenn du später spezielle Wünsche hast \(z. B. mehr Argumente, Multi-File-Input,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Datenvalidierung, etc.\) kannst du das Grundkonzept einfach erweitern.) Tj
ET
endstream
endobj
55 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 56 0 R
>>
endobj
56 0 obj
<<
/Length 4589
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Gerne unterstütze ich dich bei der konkreten Workflow-Integration  melde dich) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
( e i n f a c h   m i t   D e t a i l s   z u m   A u t o m a t i o n s s y s t e m   \( z . / B .   X N A T ,   J e n k i n s ,   A i r f l o w ,   . . . \)   w e n n) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(du Hilfe brauchst!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(id        status        entity-type        entity-id        time-recorded        external-timestamp        message        exitCode) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(359        Created        user        tanae        2025-06-02T11:23:07.639+0200        undefined        undefined        un) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(defined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(360        preparing        service        undefined        2025-06-02T11:23:09.269+0200        2025-06-02T09:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(23:07.95448609Z        preparing        undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(361        failed        service        undefined        2025-06-02T11:23:19.656+0200        2025-06-02T09:23:1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(2.296289501Z        started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(362        Finalizing        system        undefined        2025-06-02T11:23:19.985+0200        2025-06-02T11:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(23:19.985+0200        Processing finished. Uploading files.        undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(363        Failed        system        undefined        2025-06-02T11:23:20.323+0200        2025-06-02T11:23:2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(0.323+0200        started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(failed still) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 405.7577165354330759 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 405.7577165354330759 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(Deine Logs zeigen, dass der **Container weiterhin mit Exit-Code 1 fehlschlägt** und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 359.0112598425196779 Td
(der Fehler direkt nach dem Start auftritt \("started: task: non-zero exit \(1\)"\). Um) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(automatisiert *und* effizient das Problem zu lösen, solltest du nun gezielt folgende) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(Schritte durchführen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(**1. Unbedingt Log-Dateien überprüfen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(Das wichtigste Diagnosemittel ist jetzt die Fehlerausgabe **\(stderr.log\)** des) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(Containers:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(Pfad aus deiner ersten Nachricht \(sinngemäß\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(/data/xnat/archive/CONTAINER_EXEC/<Container-ID>/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(```) Tj
ET
endstream
endobj
57 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 58 0 R
>>
endobj
58 0 obj
<<
/Length 3904
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Bitte öffne oder gib den Inhalt dieser Datei \(zumindest die ersten 30 Zeilen\) aus!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- Dort steht im Regelfall der exakte Grund für den Fehler,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(- z.B. ein Importfehler, ein nicht gefundenes File, fehlende Berechtigung oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Syntaxfehler.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Ohne diese Log-Ausgabe kann auch das beste Skript nicht sehen, was tatsächlich) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(im Container passiert!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(**-> Schicke mir ggf. den Inhalt der stderr.log, falls du nicht weiterkommst.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(**2. Typische Fehlerquellen  noch einmal im Kontext deiner Automatisierung**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(- Wurde das neue Skript wirklich ins Image übernommen? \(Manchmal läuft noch ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(altes Skript\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- Ist Python3 und pandas im Container richtig installiert?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Existiert die übergebene Eingabedatei tatsächlich unter dem Argumenten-Pfad?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- Hat das Output-Verzeichnis Schreibrechte?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(**3. Zusatz-Check mit Debug-Version deines Skripts**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Da du jetzt ein Skript mit ausführlichen Prints/Tracebacks verwendest, sollten schon) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(ganz am Anfang Ausgaben im Log erscheinen, z.B.:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Aufruf-Argumente: [...]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Input-Pfad nach Korrektur: ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Vorhandene Dateien in /input: [...]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Wenn **diese Zeilen schon nicht erscheinen**, ist entweder das Skript gar nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(gestartet worden ODER es knallt noch bei einem ganz frühen Import \(z.B. pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(fehlt\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(**4. Prüfung: Wird das Skript richtig aufgerufen?**) Tj
ET
endstream
endobj
59 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 60 0 R
>>
endobj
60 0 obj
<<
/Length 4021
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- Wird das Skript als `python3 /app/script.py ...` gestartet, oder hat sich der Name/Ort) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(\(z.B. `/app/Bonjour.py`\) oder der Eintrag im Dockerfile geändert?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(- Wird das richtige Image wirklich neu gebaut und benutzt, wenn du das Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(änderst?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(**5. Kurz: Empfohlene Sofort-Schritte \(wissenschaftliches Debugging\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(1. Schaue in die **stderr.log** des Containers) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(2. Prüfe, ob darin eine der folgenden Arten von Fehlern steht:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    - ImportError \(z.B. pandas fehlt, falsche Python-Version\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    - FileNotFoundError \(falscher Input-Pfad\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    - PermissionError \(keine Schreibrechte im Output\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    - SyntaxError \(Syntaxfehler durch Kopierfehler etc.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    - Oder steht da nichts außer dem Exit-Code?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(3. Nutze ggf. zusätzlich ein minimales Testskript:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    - Nur mit `print\("Ich laufe!"\); print\(sys.argv\)`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    - So erkennst du, ob der Container grundsätzlich Scripte ausführen kann.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**6. Was tun, wenn keine Logs erscheinen?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(- Stimmt der Pfad zum Skript \(liegt es wirklich an dieser Stelle im Image\)?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Wird das Skript direkt ausgeführt ODER gibt es ein ENTRYPOINT oder CMD im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Dockerfile, das alles überschreibt?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Funktioniert ein Test mit `docker run -it --rm ... image bash` und dort Aufruf von) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(`python3 ...`?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(**Fazit**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Dein neues Skript ist aus Sicht der Automatisierung robust. Wenn nun **keine) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Prints** aus deinem Skript im Log erscheinen, liegt das Problem vor dem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(eigentlichen Anwendungscode:) Tj
ET
endstream
endobj
61 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 62 0 R
>>
endobj
62 0 obj
<<
/Length 3703
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- Falscher Container-Aufruf?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- Fehlerhafter Import?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- Falscher Container-Build?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(!   * * O h n e   d i e   k o n k r e t e   s t d e r r . l o g   o d e r   e i n   m i n i m a l e s   " p r i n t " - T e s t s k r i p t   k ö n n e n   k e i n e) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(weiteren Details genannt werden.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(### **Nächster Schritt:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Bitte öffne und zeige \(anonymisiert, falls nötig\) die ersten Zeilen der Datei  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(**/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(Oder baue in dein Skript ganz oben ein  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(print\("Ich werde gestartet!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(print\(sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Dann sieht man, ob \(und wie\) das Skript überhaupt läuft.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(So kann wissenschaftlich fundiert und praktisch effizient weiter analysiert werden.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**Melde dich gerne mit den Logs. Dann finden wir den Fehler zuverlässig!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 315.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(https://xnat-dev.gwdg.de//data/xnat/archive/CONTAINER_EXEC/%3CContainer-ID%3) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(E/LOGS/docker/stderr.log sol ich einfach so eigeneben in google) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 221.7577165354331328 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 221.7577165354331328 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(Nein, du solltest den Link **nicht** einfach in Google oder im Webbrowser eingeben.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(Hier die Erklärung und das empfohlene Vorgehen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(### 1. Warum nicht in Google/Webbrowser?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(- **Google \(oder andere Suchmaschinen\) können damit nichts anfangen.**) Tj
ET
endstream
endobj
63 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 64 0 R
>>
endobj
64 0 obj
<<
/Length 4490
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  - Sie indizieren keine privaten oder geschützten Ressourcen wie deine) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(XNAT-Umgebung.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- **Dein Link ist ein Platzhalter:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  - Der Link enthält `<Container-ID>`. Das muss durch eine echte Container-ID \(z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(`81` oder eine lange Zeichenkette wie `98d1358887ce...`\) ersetzt werden.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- **Meist ist der Pfad nur innerhalb eurer Infrastruktur \(z.B. per SSH oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Dateibrowser\) sichtbar.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- **Öffentliche Freigabe von Protokollen sollte immer datenschutzkonform erfolgen.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 2. Wie gelangst du an die Datei?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(**Variante A: Du hast Zugriff auf das Dateisystem des XNAT-Servers \(per SSH,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Terminal, etc.\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Dann kannst du ein Terminal öffnen und z. B. ausführen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(cat /data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(oder \(um die ersten Zeilen zu sehen\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(head -30 /data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(**Variante B: Über die XNAT-Weboberfläche**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Viele XNAT-Systeme bieten die Möglichkeit, Logdateien direkt über das Webinterface) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(des Container-Plugins herunterzuladen oder anzuzeigen.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Logge dich in dein XNAT-Webinterface ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(- Navigiere zu dem entsprechenden Workflow \(Container-Ausführung\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(- Schau nach einem Tab oder Link wie `Logs`, `stderr` oder `Fehlerprotokolle`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(- Lade die stderr.log herunter oder zeige sie im Browser an) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(**Variante C: Du hast nur relative HTTP-Links**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- Ersetze im Link `<Container-ID>` durch die reale ID \(z.B. `81` oder die mit `98d...`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(beginnende Zeichenkette\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- Rufe dann nach Login in dein internes XNAT ggf.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(  ```text) Tj
ET
endstream
endobj
65 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 66 0 R
>>
endobj
66 0 obj
<<
/Length 3942
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  https://xnat-dev.gwdg.de/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/std) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(err.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  im Browser auf \(nur erreichbar, wenn du Rechte im Netzwerk/XNAT hast\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(### 3. Was tun, wenn du die Datei hast?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Kopiere den Inhalt \(am besten die ersten 30-50 Zeilen\) und  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(**füge ihn hier  nach Möglichkeit anonymisiert ** ein.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Dann kann ich dir gezielt und fundiert sagen, woran der Fehler tatsächlich liegt und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(wie du ihn löst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(### 4. Kurzes Fazit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- **Nicht Google oder Suchmaschine nutzen!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(- **Den Pfad im Terminal oder in eurer XNAT-Weboberfläche aufrufen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(- **Logdatei herunterladen oder anzeigen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
( -   * * W e s e n t l i c h e   T e i l e   p o s t e n  !   d a n n   g i b t   e s   g e z i e l t   H i l f e ! * *) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Bei Fragen zur Navigation im XNAT, zu Linux/Terminal oder falls du nicht sicher bist,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(wie du an die Logs kommst, kann ich dich Schritt für Schritt anleiten! Sag einfach) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Bescheid, welches System und welche Rechte du hast.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 241.650629921259906 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ cat) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(cat: /data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log: No such file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ head -30) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(head: cannot open) Tj
ET
endstream
endobj
67 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 68 0 R
>>
endobj
68 0 obj
<<
/Length 4817
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(&#039;/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log&#039; for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(reading: No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 701.6506299212597924 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 701.6506299212597924 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(Das ist eine zentrale Information:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(**Die Datei `/data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/stderr.log`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(existiert nicht \(No such file or directory\).**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(Was bedeutet das?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(**1. Mögliche Ursachen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(- Dein Container ist zwar gescheitert, aber es wurde keine `stderr.log` geschrieben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(- Der Pfad/die ID stimmt nicht \(z.B. durch einen Zahlendreher, falsches Verzeichnis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(oder einen anderen Pfadnamen, den dein System verwendet\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(- Der Workflow oder das Container-Plugin hat den Container vor dem eigentlichen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(Ausführen des Skripts bereits abgebrochen \(early exit\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(- Es gab beim Aufbau/Initialisierung des Containers einen fundamentaleren Fehler,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(sodass nie ein Prozess startete, der etwas nach `stderr` schreiben konnte.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(**2. Überprüfe:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(- Stimmt die Container-ID? Existiert ein anderer Containerlauf mit anderer ID, der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(aktuell ist?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(  - Schaue ggf. in `/data/xnat/archive/CONTAINER_EXEC/` und dort in die richtige ID.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(- Gibt es andere LOG-Dateien in nahegelegenen Verzeichnissen?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(  - Zeige z.B. mit `ls -l /data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/` den) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(Verzeichnisinhalt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(- Werden in höheren Verzeichnissen andere Logdateien wie `stdout.log`, `exec.log`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(oder generische Fehlerprotokolle geschrieben?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(- Bekommst du über das XNAT-Webinterface irgendwo eine Fehlermeldung oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(Loganzeige, die beim letzten Lauf geschrieben wurde?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(**3. Was tun beim Fehlen von Logs?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(Wenn keine Logs vorliegen, bedeutet das meistens einen sehr frühen Abbruch.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(Die Gründe können sein:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(- Das Startkommando im Container ist falsch oder auf ein nicht existentes) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(Skript/Programm gesetzt.) Tj
ET
endstream
endobj
69 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 70 0 R
>>
endobj
70 0 obj
<<
/Length 4660
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- Das Image selbst ist fehlerhaft \(START-Kommando zeigt z.B. auf ein nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(vorhandenes Python-Skript\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- Es fehlt Python oder eine andere Basiskomponente ganz im Image oder sie ist am) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(falschen Ort.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- Die Rechte/Policies der XNAT- oder Docker-Infrastruktur verbieten das Schreiben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(des Logs \(selten, aber möglich\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**4. Empfehlungen für systematisches Vorgehen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(a\) **Prüfe, ob andere LOGs im Container-Verzeichnis existieren:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(ls -l /data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(ls -l /data/xnat/archive/CONTAINER_EXEC/81/LOGS/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(b\) **Starte den Container testweise manuell lokal \(falls möglich\)  das ist oft der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(schnellste Weg zur Ursachenfindung.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Beispiel:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(docker run -it --rm -v /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2:/input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(-v /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc:/output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(# Nun im Container:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(python3 /app/Bonjour.py /input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(!   G i b t   e s   e i n e   A u s g a b e ?   K o m m t   e i n e   F e h l e r m e l d u n g ?   G i b t   e s   i m   C o n t a i n e r   d a s) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Python-Skript und Python selbst?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(c\) **Prüfe das Dockerfile/dein Image:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(- Gibt es ein korrektes `CMD`- oder `ENTRYPOINT`-Statement?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(- Liegt dein Skript \(Bonjour.py oder script.py\) wirklich in `/app/` innerhalb des) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Containers?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(- Enthält das Image tatsächlich Python3 und pandas?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(d\) **Minimales Testskript:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Probiere ein kleines Skript \(z.B. `/app/test.py`\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(```python) Tj
ET
endstream
endobj
71 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 72 0 R
>>
endobj
72 0 obj
<<
/Length 4192
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(print\("Hallo von im Container!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(print\(sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Und starte:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(python3 /app/test.py foo bar) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(!   W e n n   d a s   s c h o n   n i c h t   g e h t ,   s t i m m t   e t w a s   G r u n d l e g e n d e s   \( I m a g e ,   P f a d e ,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Interpreter\) nicht.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(**Zusammenfassung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(- Fehlende stderr.log = Frühzeitiger oder grundsätzlicher Fehler beim Containerstart.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(- Kontrolliere Umgebungsfaktoren, lokale Log-Dateien und das Image selbst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- Teste alles einmal manuell im Container/Shell.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(**Falls du möchtest, schreibe bitte die Ausgabe von**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(ls -l /data/xnat/archive/CONTAINER_EXEC/81/LOGS/docker/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(ls -l /data/xnat/archive/CONTAINER_EXEC/81/LOGS/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**und/oder**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Wie dein `Dockerfile` aussieht und was für ein `CMD` oder `ENTRYPOINT` gesetzt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Welche Pfade im Container wirklich existieren \(`ls /app`, `ls /input` etc.\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Damit kann ich noch genauer helfen und den Fehler mit dir finden!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 223.2506299212599288 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ docker run -it --rm) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(-v /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2:/input -v) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(/data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc:/output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(# Nun im Container:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(ls /input) Tj
ET
endstream
endobj
73 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 74 0 R
>>
endobj
74 0 obj
<<
/Length 4182
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(python3 /app/Bonjour.py /input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Traceback \(most recent call last\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  File &quot;/app/Bonjour.py&quot;, line 3, in &lt;module&gt;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(ModuleNotFoundError: No module named &#039;pandas&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(ls: cannot access &#039;/input&#039;: No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(ls: cannot access &#039;/output&#039;: No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(python3: can&#039;t open file &#039;/app/Bonjour.py&#039;: [Errno 2] No such file or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(directory) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 572.8506299212598378 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 572.8506299212598378 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(Das ist eine äußerst wichtige Fehlermeldung! Deine manuelle Test-Session im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(Container zeigt mehrere grundlegende Probleme. Hier ein Überblick, was alles nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(stimmt und wie du es Schritt für Schritt lösen kannst:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(### 1. Ordner fehlen im Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(**Fehlermeldung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(`ls: cannot access '/input': No such file or directory`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(`ls: cannot access '/output': No such file or directory`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(**Interpretation:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(Beim Start des Containers existieren die gemounteten Verzeichnisse `/input` und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(`/output` nicht.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(Das kann bedeuten:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(- Die Quellverzeichnisse auf deinem Host **existieren nicht** oder sind **leer**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(- Der Pfad bei `-v` stimmt nicht, enthält Schreibfehler oder die Berechtigungen reichen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(nicht aus.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(**Lösung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(Auf deinem Hostsystem prüfe bitte mit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(ls -l /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
endstream
endobj
75 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 76 0 R
>>
endobj
76 0 obj
<<
/Length 3545
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(ls -l /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(und prüfe, ob beide Verzeichnisse existieren, lesbar sind und ggf. Dateien enthalten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(\(z.B. test.csv\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(### 2. Das Python-Skript existiert im Container nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(**Fehlermeldung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(`python3: can't open file '/app/Bonjour.py': [Errno 2] No such file or directory`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(**Interpretation:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Im Container gibt es an `/app/Bonjour.py` **kein Skript**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(**Lösung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- Baue sicher dein Image neu, sodass das Skript auch wirklich in /app/ landet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Kontrolliere dein Dockerfile:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(  ```dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(  COPY Bonjour.py /app/Bonjour.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
( -   K o n t r o l l i e r e   z u r   L a u f z e i t   i m   C o n t a i n e r   z . / B .   m i t :) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(  ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(  ls /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  Gibt es dort Bonjour.py?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(### 3. Python-Paket pandas ist nicht installiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Fehlermeldung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(`ModuleNotFoundError: No module named 'pandas'`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(**Interpretation:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(pandas ist im Container nicht installiert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(**Lösung:**  ) Tj
ET
endstream
endobj
77 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 78 0 R
>>
endobj
78 0 obj
<<
/Length 4199
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- Ergänze im Dockerfile \(meist nach Wechsel z.B. zu python:3.X-slim als Base\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(  ```dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(  RUN pip install pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- Wenn du weitere Pakete brauchst \(z.B. numpy, etc.\), analog ergänzen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(### **Empfohlene Schritte zur Fehlerbehebung**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(1. **Mounts prüfen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(   - Rufe auf deinem Hostsystem auf:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(     ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(     ls -l /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(     ls -l /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(   - Stelle sicher, dass sie existieren und beschreibbar sind.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(2. **Dockerfile korrigieren und Image neu bauen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(   - Beispiel-Mindestkonfiguration, die für deinen Zweck funktioniert:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(     ```dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(     FROM python:3.10-slim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(     WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(     COPY Bonjour.py /app/Bonjour.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(     RUN pip install pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(     # falls weitere requirements:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(     # COPY requirements.txt /app/requirements.txt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(     # RUN pip install -r requirements.txt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(     CMD ["python3", "/app/Bonjour.py"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(   - **Baue das Image neu**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(     ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(     docker build -t tanaebousfiha/telepathy:latest .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(3. **Funktionsprüfung im Container**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(   - Starte einen Interaktiv-Container:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(     ```sh) Tj
ET
endstream
endobj
79 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 80 0 R
>>
endobj
80 0 obj
<<
/Length 4109
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(     docker run -it --rm -v ...\(wie oben\)... tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(   - Prüfe:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(     ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(     ls /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(     ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(     ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(     python3 /app/Bonjour.py /input/1748852889248/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(   - Jetzt solltest du **kein** pandas-Fehler mehr bekommen und dein Skript sollte) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(laufen  sofern `/input/1748852889248/test.csv` existiert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(4. **Im Zweifel Testskript probieren**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(   - Erstelle testweise ein einfaches Skript:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(     ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(     # test.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(     print\("Container funktioniert!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(   - Baue es ins Image ein und teste mit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(     ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(     python3 /app/test.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(### **Zusammenfassung**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Deinen derzeitigen Fehler verursachen **drei** unabhängige Container-Probleme:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(  1. Fehlende Input-/Output-Volumes \(Mounts\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(  2. Fehlende Python-Abhängigkeiten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(  3. Falscher/fehlender Pfad zum Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- **Behebe zuerst dein Dockerfile und die Volume-Mounts!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(- **Installiere pandas im Dockerfile.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- **Kopiere sicher Bonjour.py ins Image.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- **Teste immer lokal im Container vor dem Produktivlauf.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Melde dich, wenn du bei einem Schritt Hilfe brauchst  z.B. beim Schreiben eines) Tj
ET
endstream
endobj
81 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 82 0 R
>>
endobj
82 0 obj
<<
/Length 3740
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Dockerfile, debug build, requirements.txt, weiteren Volumes oder einer bestimmten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Fehlermeldung.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Sobald der Container lokal läuft, sollte es auch im automatisierten Workflow) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(funktionieren!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ ls -l) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(ls -l /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(total 0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(total 0) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 534.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 506.2112598425196666 Td
(Sehr gut, dass du das überprüft hast  das ist ein **zentrales Ergebnis für die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(Fehlersuche**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 451.0112598425196779 Td
(### Was bedeutet das?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 414.2112598425196666 Td
(Beide Verzeichnisse, die du als Volumes ins Docker-Image mountest \(`/input` und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(`/output` im Container\),  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(sind **auf dem Host leer**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(ls -l /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(total 0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(ls -l /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(total 0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(Das bedeutet:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(- In **/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2** \(sollte Input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(enthalten, z.B. `test.csv`\) ist **KEINE Datei**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(- In **/data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc** \(Output-Ziel\) ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(**KEINE Datei**.) Tj
ET
endstream
endobj
83 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 84 0 R
>>
endobj
84 0 obj
<<
/Length 3783
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(### Konsequenz) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Da `/input` im Container auf ein **leeres** Verzeichnis gemountet wird, gibt es beim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Ausführen deines Skriptes KEINE Input-Datei,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(auf die dein Skript zugreifen kann. Der Fehler `FileNotFoundError` oder "Eingabedatei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(nicht gefunden" wird entstehen   ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(das Skript kann gar nicht richtig arbeiten, **egal wie gut es geschrieben ist**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Das gleiche gilt für `/output`: Wenn das Output-Verzeichnis gar nicht existiert, kann) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(auch kein Ergebnis gespeichert werden.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(## Lösungsschritte:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(1. **Input-Datei bereitstellen**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(   Lege _vor_ dem Start deines Containers deine Eingabedatei ins passende) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Verzeichnis auf dem Host:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(   cp /pfad/zu/deiner/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(   Kontrolliere dann:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(   ls -l /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(   Jetzt sollte dort mindestens `test.csv` aufgelistet werden.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(2. **Sicherstellen, dass Output-Verzeichnis existiert**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(   Das Output-Verzeichnis muss existieren und für Docker schreibbar sein \(was bei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(existierendem, leeren Ordner idR. passt\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(   Falls nicht, lege es an:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(   mkdir -p /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
endstream
endobj
85 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 86 0 R
>>
endobj
86 0 obj
<<
/Length 3408
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(3. **Container neu starten und testen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(   docker run -it --rm \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(      -v /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2:/input \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(      -v /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc:/output \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(      tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(   Prüfe im Container:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(   ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(   ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(   Dort sollte nun `/input/test.csv` erscheinen!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(   Dann starte dein Skript:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(   ```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(   python3 /app/Bonjour.py /input/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(   ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(### **Fazit**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Dein unmittelbares Problem:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(**Deine Container-Volumes werden mit leeren Host-Verzeichnissen gemountet.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Ohne Input-Datei kann kein Workflow laufen!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Erst wenn die Input-Datei am richtigen Ort liegt,** kann dein Tool arbeiten.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Wenn du das umgesetzt hast, wird das Skript entweder wie gewünscht laufen  oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(es gibt weitere Fehlermeldungen, die du dann gezielt weiter eingrenzen kannst!) Tj
ET
endstream
endobj
87 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 88 0 R
>>
endobj
88 0 obj
<<
/Length 4721
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Melde dich gerne, wie der nächste Lauf ausgeht oder wenn du Details zu den) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Log-Ausgaben brauchst!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 720.0506299212597696 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ ls -l) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(ls -l /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(total 0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(total 0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ cp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(/pfad/zu/deiner/test.csv /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(cp: cannot stat &#039;/pfad/zu/deiner/test.csv&#039;: No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ ls -l) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(total 0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ mkdir -p) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(/data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ docker run -it --rm) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(\\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(   -v /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2:/input \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(   -v /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc:/output \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(   tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(Traceback \(most recent call last\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(  File &quot;/app/Bonjour.py&quot;, line 3, in &lt;module&gt;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(    import pandas as pd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(ModuleNotFoundError: No module named &#039;pandas&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$ ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(ls: cannot access &#039;/input&#039;: No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(ls: cannot access &#039;/output&#039;: No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(tanae@mi0082n:~/dockerfile/xnat-osa/Ziel1_osaDockerContainer$) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 166.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 166.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(Du hast damit zwei **Hauptprobleme** identifiziert:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(---) Tj
ET
endstream
endobj
89 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 90 0 R
>>
endobj
90 0 obj
<<
/Length 3994
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(### **1. Input-Datei fehlt / falscher Copy-Befehl**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(**Fehler:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(cp: cannot stat '/pfad/zu/deiner/test.csv': No such file or directory) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Bedeutung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Die angegebene Datei `/pfad/zu/deiner/test.csv` existiert NICHT.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Du musst anstelle von `/pfad/zu/deiner/test.csv` **den tatsächlichen Pfad zu deiner) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(test.csv** auf deinem Rechner einsetzen.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Beispiel:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(cp /home/tanae/daten/test.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**Lösung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Finde heraus, wo deine Testdatei wirklich liegt \(`find ~ -name test.csv` kann helfen\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- Kopiere diese Datei wirklich ins Input-Verzeichnis.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(### **2. Container-Image ist fehlerhaft / pandas fehlt**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(**Fehler:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(ModuleNotFoundError: No module named 'pandas') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(**Bedeutung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Im Docker-Image ist die Python-Bibliothek `pandas` nicht installiert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Lösung \(im Dockerfile\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Öffne dein `Dockerfile` und **füge folgendes hinzu:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```Dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(FROM python:3.10-slim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(COPY Bonjour.py /app/Bonjour.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(RUN pip install pandas) Tj
ET
endstream
endobj
91 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 92 0 R
>>
endobj
92 0 obj
<<
/Length 3831
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(CMD ["python3", "/app/Bonjour.py"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Anschließend **baue das Image neu:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(docker build -t tanaebousfiha/telepathy:latest .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Neues Image verwenden.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Erst danach wird der Import von pandas funktionieren.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(### **3. Mounts wirken leer im Container**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Dass `/input` und `/output` im Container nicht existieren, liegt daran, dass die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(jeweiligen Host-Ordner LEER sind \(bzw. Input-Ordner hat KEINE test.csv\)! Docker) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(mountet leere Verzeichnisse  da ist dann nichts sichtbar.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Wenn also im Host-Ordner) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(`/data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2/` keine Datei \(z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(`test.csv`\) liegt, ist er auch im Container leer!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(**Lösung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(1. Kopiere zuerst die **richtige** test.csv hinein \(siehe Punkt 1\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(2. Starte dann erneut den Container.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(**Zusammengefasst:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(1. **Pandas im Dockerfile installieren** \(Image neu bauen!\)  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(2. **test.csv am richtigen Ort auf dem Host ablegen**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(3. **Container starten und prüfen, ob jetzt `/input` sowie `/app/Bonjour.py` existieren**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(**KONKRETE PRÜFUNG:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(ls -l /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(# Erwartung: Mindestens test.csv ist dort sichtbar) Tj
ET
endstream
endobj
93 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 94 0 R
>>
endobj
94 0 obj
<<
/Length 3514
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(docker run -it --rm \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    -v /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2:/input \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    -v /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc:/output \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(# Im Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(ls /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(python3 /app/Bonjour.py /input/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(**Melde dich, sobald du test.csv hineinkopiert hast und pandas installiert ist!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Danach sollte `/input` sichtbar, pandas verfügbar und ein Lauf möglich sein.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 444.0506299212598265 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 368.9577165354330646 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 368.9577165354330646 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(Deine Meldung  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(> started: task: non-zero exit \(1\) 1  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(zeigt:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(Der Prozess im Container ist mit Exit-Code 1 fehlgeschlagen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(**Das ist zunächst nur ein generischer Hinweis, dass der Task nicht erfolgreich war.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
( ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(Um das **genaue Problem** zu finden, sind drei Dinge zentral:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(### 1. **Fehlermeldung oder Exit-Log aus dem Container**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(Bitte prüfe:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(- Gibt es jetzt eine Datei wie) Tj
ET
endstream
endobj
95 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 96 0 R
>>
endobj
96 0 obj
<<
/Length 4304
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(`/data/xnat/archive/CONTAINER_EXEC//LOGS/docker/stderr.log`?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(  **Inhalt posten oder anschauen.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- Falls du lokal testest:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  **Welche Meldung siehst du direkt bei Ausführung von**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(  `python3 /app/Bonjour.py /input/test.csv /output`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(  **im Container?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Wenn du lokal im Container ausführst \(`docker run -it ... bash`\), poste bitte **die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(komplette Terminal-Ausgabe**, insbesondere alle Zeilen nach dem Ausführen deines) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Skripts.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(**Nur so kann ich die genaue Fehlerursache nennen und gezielt helfen.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(### 2. **Exit-Code 1 bedeutet immer: Ein _Fehler_ ist im Code/Skript aufgetreten**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Typische Ursachen aus deiner Historie:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- **Input-Datei wird nicht im Container gefunden** \(dann steht im Output meistens:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Eingabedatei nicht gefunden: ...\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(- **pandas ist nicht installiert** \(dann: `ModuleNotFoundError: No module named) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
('pandas'`\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- Syntaxfehler, Schreibfehler, falscher Pfad zum Skript, etc.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(### 3. **Sofort-Maßnahmen zur Selbst-Diagnose**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(1. **Starte deinen Container manuell wie gehabt** \(nachdem du sicher bist, dass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(test.csv und das Output-Verzeichnis wirklich existieren und dass pandas installiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(ist\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    ```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    docker run -it --rm \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(       -v /data/xnat/build/57648658-7b30-466f-9607-a3087cc154e2:/input \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(       -v /data/xnat/build/df3e3e91-ce52-4053-bc2f-f80ad30355fc:/output \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(       tanaebousfiha/telepathy:latest bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(2. **Kontrolliere die Verzeichnisse:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    ```bash) Tj
ET
endstream
endobj
97 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 98 0 R
>>
endobj
98 0 obj
<<
/Length 3704
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    ls /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    ls /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    ls /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(3. **Starte das Python-Skript von Hand:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    ```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    python3 /app/Bonjour.py /input/test.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(         * *!   P o s t e   a l l e   A u s g a b e n / F e h l e r ! * *) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(### **Sobald du die Konsole-Ausgabe nach dem Starten deines Skripts hier einfügst,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(kann gezielt geholfen werden.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Ohne Log oder Fehlermeldung kann man immer nur allgemeine Ursachen vermuten.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Bitte **poste die gesamten Ausgaben/Fehler** \(Copy & Paste aus deinem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Container-Terminal\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Dann bekommst du sofort eine präzise Lösung  versprochen!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 388.8506299212598378 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(View stdout \(from file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(Aufruf-Argumente: [&#039;/app/Bonjour.py&#039;, &#039;python3&#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(&#039;/app/Bonjour.py&#039;, &#039;/input/correct_patient.csv&#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(&#039;/output&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(Usage: python script.py) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 240.15771653543311 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 240.15771653543311 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(Sehr gut, jetzt gibt es endlich eine aussagekräftige Meldung aus deinem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(Container-Log!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(Folgende Zeile ist **ausschlaggebend**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(Aufruf-Argumente: ['/app/Bonjour.py', 'python3', '/app/Bonjour.py',) Tj
ET
endstream
endobj
99 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 100 0 R
>>
endobj
100 0 obj
<<
/Length 4162
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
('/input/correct_patient.csv', '/output']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Usage: python script.py <input_file> <output_dir>) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Das bedeutet:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- Dein **Argument-Array** \(`sys.argv`\) lautet:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(  `['/app/Bonjour.py', 'python3', '/app/Bonjour.py', '/input/correct_patient.csv', '/output']`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Das Skript erwartet aber:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(  `['/app/Bonjour.py', <input_file>, <output_dir>]`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(- Deshalb erscheint die Usage-Meldung \(Usage: python script.py...\) und das Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(beendet sich mit Exit-Code 1.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(**Fehlerursache:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Jemand \(dein Container-Workflow, Docker-EntryPoint oder was auch immer das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Skript aufruft\) ruft dein Skript so auf:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(python3 /app/Bonjour.py python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Das ist falsch!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(So landet als erstes Argument `'python3'` im Argumentarray  und alles ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(verschoben!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**Korrekte Art des Aufrufs:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Nur EIN `python3` am Anfang, dann das Skript, dann die Parameter:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(## Was ist zu tun?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(**1. Prüfe, wie dein Skript/Container aktuell aufgerufen wird.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- **Im Dockerfile darf nicht** stehen:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(  `CMD ["python3", "/app/Bonjour.py", "python3", "/app/Bonjour.py", ...]`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(- **Im Workflow/Service-Aufruf** \(z.B.NAT, Compose, etc.\) muss auch nur das Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(mit den Input-Argumenten angegeben werden.) Tj
ET
endstream
endobj
101 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 102 0 R
>>
endobj
102 0 obj
<<
/Length 3933
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**2. Korrigiere den Aufruf so, dass er exakt so aussieht:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(**3. Teste manuell im Container:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Starte den Container mit Bash, dann:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(  ```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(  python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(**4. Nach der Korrektur sollte `sys.argv` so aussehen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(['/app/Bonjour.py', '/input/correct_patient.csv', '/output']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(und dein Skript läuft wie erwartet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(### Hintergrund \(nach wissenschaftlichen Methoden\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- Das Python-Array `sys.argv` enthält beim Aufruf:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(  `python3 <skript> <arg1> <arg2> ...`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(  also:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(  `['/app/Bonjour.py', '<arg1>', '<arg2>']`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(- Bei doppeltem Einfügen von "python3" oder dem Skriptnamen werden die Indizes) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(verschoben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Robustheitstipp: Dein Skript prüft korrekt die Länge der Argumente  das hilft beim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(schnellen Erkennen solcher Fehler.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(**Empfehlung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Stelle sicher, dass der Container bzw. das Skript exakt so aufgerufen wird, wie von) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(deinem Skript erwartet:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(```) Tj
ET
endstream
endobj
103 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 104 0 R
>>
endobj
104 0 obj
<<
/Length 4307
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Falls dein Workflow-System COMMAND oder ENTRYPOINT falsch setzt, können wir) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(gezielt an den Dockerfile-/XNAT-/Workflow-Einstellungen helfen. Teile gern das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(relevante Snippet oder die Einstellung, wenn du Unterstützung brauchst!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 646.4506299212598606 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(das problem ist das ich an eine Automatistaionn Skript arbeite dh meine dockerfile ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(in my automatisation skript...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(#-----------------Bibliotheken---------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(import json # wir brachen json für xnat damit er den Command anlegen kann) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(import requests  # https://wiki.xnat.org/container-service/container-service-api) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(import os #Arbeiten mit Dateien und Pfaden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(import subprocess  # https://www.datacamp.com/tutorial/python-subprocess) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(import getpass #Passwort-Eingabe im Terminal ohne Anzeige) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(import sys#Für sys.exit\(\) bei Fehlern) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(import urllib3#Wird von requests genutzt  hier zur Abschaltung von SSL-Warnungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(urllib3.disable_warnings\(urllib3.exceptions.InsecureRequestWarning\)# Deaktiviert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(SSL-Warnungen, wenn XNAT ohne gültiges Zertifikat läuft) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(#------------------------------------erstmal Skript from the users) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(Fragen-----------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(def check_user_skript\(skript_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(    if not os.path.isfile\(skript_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(        print\(f&quot;Datei nicht gefunden: {skript_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(    if not skript_path.endswith\(&quot;.py&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(        print\(&quot;Datei nicht korrekt, bitte eine .py Datei angeben.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(        return False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    return True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(#-----------------------------------dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(ausfüllen------------------------------------------------------) Tj
ET
endstream
endobj
105 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 106 0 R
>>
endobj
106 0 obj
<<
/Length 4787
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(#Docker ofiziel) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Dokumentation&gt;https://docs.docker.com/engine/reference/commandline/build/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(def write_dockerfile\(docker_dir, script_filename, docker_base_image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    dockerfile_content = f&quot;&quot;&quot;FROM {docker_base_image}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(COPY {script_filename} /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(RUN pip install pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(ENTRYPOINT [&quot;sh&quot;, &quot;-c&quot;, &quot;ls -lRt /&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(ENTRYPOINT [&quot;python3&quot;, &quot;/app/{script_filename}&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(CMD [&quot;example.csv&quot;, &quot;/app/output&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(&quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    os.makedirs\(docker_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    dockerfile_path = os.path.join\(docker_dir, &quot;Dockerfile&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    with open\(dockerfile_path, &quot;w&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        f.write\(dockerfile_content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    print\(f&quot;Dockerfile written to {dockerfile_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    return dockerfile_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(#--------------------------------------Image bauen--------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(#https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(def build_and_push_docker_image\(dockerfile_path, docker_image_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    # Step 1: Ask user for Docker Hub username) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    dockerhub_username = input\(&quot;Docker Hub username \(to push the image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    if not dockerhub_username:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        print\(&quot;No Docker Hub username provided. Skipping push.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        return docker_image_name  # Only use locally) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    # Step 2: Build local image) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    print\(f&quot;Building Docker image &#039;{docker_image_name}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    build_result = subprocess.run\([) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        &quot;docker&quot;, &quot;build&quot;, &quot;-f&quot;, dockerfile_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(&quot;-t&quot;, docker_image_name, &quot;.&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    ], capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    if build_result.returncode != 0:) Tj
ET
endstream
endobj
107 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 108 0 R
>>
endobj
108 0 obj
<<
/Length 4496
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(f&quot;Build failed:\\n{build_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    print\(f&quot;Image &#039;{docker_image_name}&#039; built successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    # Step 3: Tag image with full Docker Hub path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    full_tag = f&quot;{dockerhub_username}/{docker_image_name}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    print\(f&quot;Tagging image as &#039;{full_tag}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    tag_result = subprocess.run\([&quot;docker&quot;, &quot;tag&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(docker_image_name, full_tag], capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    if tag_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        print\(f&quot;Tagging failed:\\n{tag_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    # Step 4: Push image to Docker Hub) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    print\(f&quot;Pushing image to Docker Hub as &#039;{full_tag}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    push_result = subprocess.run\([&quot;docker&quot;, &quot;push&quot;, full_tag],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    if push_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(f&quot;Push failed:\\n{push_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    print\(f&quot;Image successfully pushed: {full_tag}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    return full_tag  # Use this in command.json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(#-----------------------------------User-Input-----------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(#prepare th e input for the json command ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(def get_input\(prompt\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        value = input\(prompt\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        if value.strip\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            return value) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            print\(&quot;Cannot be empty.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(def modification\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    data = {}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    name = get_input\(&quot;What is the name of the command in XNAT: &quot;\)) Tj
ET
endstream
endobj
109 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 110 0 R
>>
endobj
110 0 obj
<<
/Length 5135
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    description = get_input\(&quot;What is the description of the command in XNAT:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    data[&quot;command_name&quot;] = name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    data[&quot;command_description&quot;] = description) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    data[&quot;label_name&quot;] = name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    data[&quot;label_description&quot;] = description) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    return data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(#-----------------------------------json File erstellen-------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(def create_json_file\(docker_image, script_filename, mod_data\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    json_file = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        &quot;name&quot;: mod_data[&quot;command_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        &quot;description&quot;: mod_data[&quot;command_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        &quot;version&quot;: &quot;1.5&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        &quot;image&quot;: docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        &quot;command-line&quot;: f&quot;python3 /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(/input/#input_file# /output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            {&quot;name&quot;: &quot;input&quot;, &quot;path&quot;: &quot;/input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(&quot;writable&quot;: False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            {&quot;name&quot;: &quot;output&quot;, &quot;path&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(&quot;/output&quot;, &quot;writable&quot;: True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                &quot;name&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                &quot;description&quot;: &quot;Input file for analysis&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                &quot;mount&quot;: &quot;input&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        &quot;outputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
endstream
endobj
111 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 112 0 R
>>
endobj
112 0 obj
<<
/Length 4961
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                &quot;description&quot;: &quot;Result file output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                &quot;mount&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                &quot;name&quot;: wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                &quot;label&quot;: mod_data[&quot;label_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                &quot;description&quot;: mod_data[&quot;label_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                &quot;contexts&quot;: [&quot;xnat:mrSessionData&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                &quot;external-inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                        &quot;name&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(                        &quot;type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(                        &quot;required&quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(                    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                &quot;output-handlers&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                        &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                        &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                        &quot;as-a-child-of&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                        &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                        &quot;label&quot;: &quot;Results&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                        &quot;format&quot;: &quot;csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    with open\(&quot;command.json&quot;, &quot;w&quot;\) as json_out:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        json.dump\(json_file, json_out, indent=4\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(&quot; Corrected command.json created.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    return &quot;command.json&quot;) Tj
ET
endstream
endobj
113 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 114 0 R
>>
endobj
114 0 obj
<<
/Length 5362
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(#---------------------Command zu XNAT senden------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(#here is the APIS XNAT dokumentation ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(#https://wiki.xnat.org/container-service/container-service-api) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(#https://wiki.xnat.org/container-service/container-command-json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(#) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(def send_json_to_xnat\(json_file_path, xnat_url, xnat_user, xnat_password\): ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    url = f&quot;{xnat_url}/xapi/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    print\(f&quot;Uploading command to {url}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    with open\(json_file_path, &quot;r&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        response = requests.post\(url, auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(json=json.load\(f\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    if response.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\(&quot;Command uploaded successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    elif response.status_code == 201:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        print\(&quot;Command created successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    elif response.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        print\(&quot;Command already exists.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(f&quot;Failed to upload command: {response.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
({response.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(#-----------------------------------Command-Liste-------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(def get_command_id_by_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(command_name\):# #https://wiki.xnat.org/container-service/container-service-api#Con) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(tainerServiceAPI-Commands) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands&quot;# # Hier wird) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(die URL für die XNAT-API definiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)# wird hier) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(die get me request benutzt laut der APIS ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        print\(f&quot;Error fetching commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    data = resp.json\(\)# # Die Antwort wird als JSON interpretiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    if isinstance\(data, dict\) and &quot;commands&quot; in data:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        command_list = data[&quot;commands&quot;]# # Wenn die Antwort ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Dictionary ist, das &quot;commands&quot; enthält, dann wird es extrahiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        command_list = data) Tj
ET
endstream
endobj
115 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 116 0 R
>>
endobj
116 0 obj
<<
/Length 5268
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    for command in command_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        if command.get\(&quot;name&quot;\) == command_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            return command[&quot;id&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    print\(&quot;Command not found.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(#----------------------Wrapper auslesen/erstellen-------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(def get_command_io\(xnat_host, xnat_user, xnat_password, command_id\):# #https://) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(wiki.xnat.org/container-service/container-service-api#ContainerServiceAPI-Command) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(s) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands/{command_id}&quot;#url) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(wird zusammengebaut, um die spezifischen Informationen für den Command zu) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(erhalten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(verify=False\)#GET-Anfrage an die XNAT-API gesendet) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\(f&quot;Fehler beim Abrufen des Commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        sys.exit\(1\)# # Überprüfen des Statuscodes der Antwort) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    cmd = resp.json\(\)# # Die Antwort wird als JSON interpretiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    outputs = cmd.get\(&quot;outputs&quot;, []\)# # Extrahieren der Outputs aus dem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(Command) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    external_inputs = []# # Initialisieren der externen Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    derived_inputs = []# # Initialisieren der abgeleiteten Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    for wrapper in cmd.get\(&quot;xnat&quot;, []\):# # Durchlaufen der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;xnat&quot;-Sektion des Commands) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        external_inputs = wrapper.get\(&quot;external-inputs&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        derived_inputs = wrapper.get\(&quot;derived-inputs&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        break  # Nur den ersten Wrapper verwenden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    return outputs, external_inputs, derived_inputs# # Rückgabe der Outputs, externen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Inputs und abgeleiteten Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(#--------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(def get_wrapper_id_by_command_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(command_name, wrapper_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    Gibt die Wrapper-ID zurück, die zu einem gegebenen Command-Namen gehört.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    Falls kein Wrapper gefunden wird, wird das Skript beendet.) Tj
ET
endstream
endobj
117 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 118 0 R
>>
endobj
118 0 obj
<<
/Length 4139
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(f&quot;Fehler beim Abrufen der Commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    data = resp.json\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    if isinstance\(data, dict\) and &quot;commands&quot; in data:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        commands = data[&quot;commands&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        commands = data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    for command in commands:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        if command.get\(&quot;name&quot;\) == command_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            for wrapper in command.get\(&quot;xnat&quot;, []\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(                if wrapper.get\(&quot;name&quot;\) == wrapper_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                    return wrapper.get\(&quot;id&quot;\) or wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            for wrapper in command.get\(&quot;wrappers&quot;, []\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                if wrapper.get\(&quot;name&quot;\) == wrapper_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                    return wrapper.get\(&quot;id&quot;\) or wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    print\(&quot;Kein Wrapper für diesen Command gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(#------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(def create_wrapper\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    xnat_host,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    command_id,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    label_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    description,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    outputs,) Tj
ET
endstream
endobj
119 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 120 0 R
>>
endobj
120 0 obj
<<
/Length 4487
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    external_inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    derived_inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    include_output_handler=True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    Erstellt einen Wrapper für einen vorhandenen Command.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    Der Output-Handler wird nur gesetzt, wenn `include_output_handler=True` und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Outputs vorhanden sind.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands/{command_id}/wrap) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(pers&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    wrapper = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        &quot;name&quot;: wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        &quot;label&quot;: label_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        &quot;description&quot;: description,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        &quot;contexts&quot;: [&quot;xnat:mrSessionData&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        &quot;outputs&quot;: outputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        &quot;external-inputs&quot;: external_inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        &quot;derived-inputs&quot;: derived_inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if include_output_handler and outputs:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        wrapper[&quot;output-handlers&quot;] = [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                &quot;as-a-child-of&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                &quot;label&quot;: &quot;Results&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                &quot;format&quot;: &quot;csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    print\(&quot;Wrapper-Payload:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    print\(json.dumps\(wrapper, indent=2\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    resp = requests.post\() Tj
ET
endstream
endobj
121 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 122 0 R
>>
endobj
122 0 obj
<<
/Length 4426
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        url,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        headers={&quot;Content-Type&quot;: &quot;application/json&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        json=wrapper,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        verify=False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    if resp.status_code == 201:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        wrapper_id = resp.text.strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(f&quot;Wrapper erfolgreich erstellt. ID: {wrapper_id}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        return wrapper_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    elif resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\(&quot;Wrapper erfolgreich erstellt \(Status 200\).&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        return wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\(&quot;Wrapper existiert bereits.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(f&quot;Fehler beim Erstellen des Wrappers: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(#----------------------Wrapper Aktivierung---------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(def enable_wrapper_sitewide\(xnat_host, command_id, wrapper_name, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    Aktiviert den Wrapper global \(für alle Projekte\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands/{command_id}/wrap) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(pers/{wrapper_name}/enabled&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    resp = requests.put\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; wurde global) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    elif resp.status_code == 409:) Tj
ET
endstream
endobj
123 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 124 0 R
>>
endobj
124 0 obj
<<
/Length 4660
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; war bereits global) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        print\(f&quot;Fehler beim globalen Aktivieren: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(def enable_wrapper_for_project\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    Aktiviert den Wrapper für ein bestimmtes Projekt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/projects/{project_id}/commands/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
({command_id}/wrappers/{wrapper_name}/enabled&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    resp = requests.put\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; wurde im Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(&#039;{project_id}&#039; aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; war bereits im Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(f&quot;Fehler beim Aktivieren für das Projekt: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(#-----------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(def get_input_file_from_session\(xnat_host, session_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    Fragt XNAT nach allen Dateien in der gegebenen Session \(egal ob CSV oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(anderes Format\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    zeigt sie dem Benutzer zur Auswahl, und gibt den ausgewählten Dateinamen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(zurück.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{session_id}/resou) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(rces&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
endstream
endobj
125 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 126 0 R
>>
endobj
126 0 obj
<<
/Length 4449
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        print\(f&quot;Fehler beim Abrufen der Ressourcen: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    resources = resp.json\(\)[&quot;ResultSet&quot;][&quot;Result&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    all_files = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    for resource in resources:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        res_label = resource[&quot;label&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        file_url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{session_id}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(/resources/{res_label}/files&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        file_resp = requests.get\(file_url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        if file_resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            continue) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        files = file_resp.json\(\)[&quot;ResultSet&quot;][&quot;Result&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        for f in files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            all_files.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                &quot;name&quot;: f[&quot;Name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                &quot;uri&quot;: f&quot;/data/experiments/{session_id}/resources/{res_labe) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(l}/files/{f[&#039;Name&#039;]}&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                &quot;resource&quot;: res_label) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    if not all_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(&quot;Keine Dateien gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    # Benutzer wählt Datei aus) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    print\(&quot;\\nVerfügbare Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    for idx, f in enumerate\(all_files\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(f&quot;{idx + 1}: {f[&#039;name&#039;]} \(Resource:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
({f[&#039;resource&#039;]}\)&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        choice = input\(&quot;Welche Datei soll verwendet werden? Gib die Nummer ein:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        if choice.isdigit\(\) and 1 &lt;= int\(choice\) &lt;= len\(all_files\):) Tj
ET
endstream
endobj
127 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 128 0 R
>>
endobj
128 0 obj
<<
/Length 4308
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            selected = all_files[int\(choice\) - 1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            print\(f&quot;Ausgewählte Datei: {selected[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            return selected) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            print\(&quot;Ungültige Auswahl.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#---------------------Bulklaunch----------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(def launch_container_rest\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(session_id, xnat_user, xnat_password, input_file_info\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    Startet den Container über die REST-API mit vollständigem Pfad zur Eingabedatei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(in der Session.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    input_file_info sollte ein Dict mit Schlüsseln &#039;name&#039; und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(&#039;resource&#039; sein.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    url = f&quot;{xnat_host}/xapi/projects/{project_id}/commands/{command_id}/wrapp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(ers/{wrapper_name}/root/session/launch&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    # Beispiel: /experiments/XNAT_E00428/resources/CSV/files/example.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    input_file_path = input_file_info[&quot;name&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        &quot;session&quot;: f&quot;/experiments/{session_id}&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        &quot;input_file&quot;: input_file_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        &quot;project&quot;: project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    print\(&quot;Launching container with payload:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    print\(json.dumps\(payload, indent=2\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    response = requests.post\(url, auth=\(xnat_user, xnat_password\), headers=headers,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(json=payload, verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    if response.status_code in [200, 201, 202]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(&quot;Container launched successfully via REST.&quot;\)) Tj
ET
endstream
endobj
129 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 130 0 R
>>
endobj
130 0 obj
<<
/Length 3353
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(f&quot;Failed to launch container via REST: {response.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
({response.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(#----------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(#https://hawki.hawk.de/chat/jjitmwrbb5vaeemt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(#https://xnat-dev.gwdg.de/xapi/swagger-ui.html#/launch-rest-api) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(#----------------------------------logstout) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(bekommen--------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(#-----------------------------------------------Main Teil-----------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    xnat_host = &quot;https://xnat-dev.gwdg.de&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    docker_base_image = &quot;python:3.10&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    xnat_user = get_input\(&quot;XNAT Username: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    xnat_password = getpass.getpass\(&quot;XNAT Password: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    project_id = get_input\(&quot;Project ID: &quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    session_id = get_input\(&quot;Session ID: &quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    script_path = get_input\(&quot;Path to the Python script: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    if not check_user_skript\(script_path\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    mod_data = modification\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
endstream
endobj
131 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 132 0 R
>>
endobj
132 0 obj
<<
/Length 4486
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    # Step 1: Dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    dockerfile_path = write_dockerfile\(&quot;.&quot;, os.path.basename\(script_path\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(docker_base_image\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    # Step 2: Docker image name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    local_image_name =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(f&quot;{mod_data[&#039;command_name&#039;].lower\(\).replace\(&#039; &#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(&#039;_&#039;\)}:latest&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    # Step 3: Build and push image) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    full_image_name = build_and_push_docker_image\(dockerfile_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(local_image_name\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    # Step 4: Generate command.json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    json_file_path = create_json_file\(full_image_name, os.path.basename\(script_path\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(mod_data\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    send_json_to_xnat\(json_file_path, xnat_host, xnat_user, xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    # Step 5: Get command ID) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    command_id = get_command_id_by_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(mod_data[&quot;command_name&quot;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    # Step 6: Create or fetch wrapper) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    wrapper_id = None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        wrapper_id = get_wrapper_id_by_command_name\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(mod_data[&quot;command_name&quot;], wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        print\(f&quot;Wrapper already exists: {wrapper_id}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    except SystemExit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&quot;Wrapper not found, creating...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        outputs, external_inputs, derived_inputs = get_command_io\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            xnat_host, xnat_user, xnat_password, command_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        wrapper_id = create_wrapper\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            xnat_host, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(            mod_data[&quot;label_name&quot;],) Tj
ET
endstream
endobj
133 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 134 0 R
>>
endobj
134 0 obj
<<
/Length 4028
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(mod_data[&quot;label_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            outputs, external_inputs, derived_inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        if not wrapper_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            print\(&quot;Wrapper could not be created.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    # Step 7: Enable wrapper) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    enable_wrapper_sitewide\(xnat_host, command_id, wrapper_name, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    enable_wrapper_for_project\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(xnat_user, xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    # Step 8: Select input file from session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    input_file_info = get_input_file_from_session\(xnat_host, session_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    # Step 9: Launch container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    if input_file_info:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        launch_container_rest\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(session_id, xnat_user, xnat_password, input_file_info\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        print\(&quot;No input file selected. Aborting container launch.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(wie kann ich das trozdem lösen ?) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 186.4506299212598606 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 186.4506299212598606 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(Du arbeitest an einer vollautomatischen Docker-Workflow-Integration mit XNAT und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(generierst Dockerfiles und command.json **on the fly**  das ist sehr gut) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(nachvollziehbar.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(Dein Problem ist jedoch, dass dein Script im Container mit einer **falschen) Tj
ET
endstream
endobj
135 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 136 0 R
>>
endobj
136 0 obj
<<
/Length 3971
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Anordnung der Kommandozeilen-Argumente** aufgerufen wird  genauer gesagt so:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(['/app/Bonjour.py', 'python3', '/app/Bonjour.py', '/input/correct_patient.csv', '/output']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Erwartet wird aber:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(['/app/Bonjour.py', '/input/correct_patient.csv', '/output']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(**Das Problem:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Das Workflow-Backend \(insbesondere beim XNAT Container Service\) ruft deinen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Container genau nach der `command-line` aus deiner `command.json` auf.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(**Dein Fehler entsteht, weil im Dockerfile und in der command.json "python3 ...") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(jeweils als Prefix stehen und es dadurch zu einer doppelten Übergabe kommt.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(## Konkrete Ursachen & Lösungsschritte) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(### 1. **Im Dockerfile brauchst du KEIN ENTRYPOINT und KEIN CMD, wenn der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(command-line aus der command.json kommt!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(#### FALSCH:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(```dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(ENTRYPOINT ["python3", "/app/Bonjour.py"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(CMD ["example.csv", "/app/output"]  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Oder:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(ENTRYPOINT ["sh", ...]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(ENTRYPOINT ["python3", ...]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Wenn der XNAT-Container-Service \(bzw. deine Automationslösung\) die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(`command-line` ausführt, entstehen so doppelte Prefixe.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(#### RICHTIG:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(**NUR:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(```dockerfile) Tj
ET
endstream
endobj
137 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 138 0 R
>>
endobj
138 0 obj
<<
/Length 3224
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(FROM python:3.10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(COPY Bonjour.py /app/Bonjour.py) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(RUN pip install pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**\(kein `ENTRYPOINT`/`CMD` setzen!\)**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Das reicht, damit dein Script `/app/Bonjour.py` im Image bereitliegt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 2. Die command.json konfiguriert den Aufruf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Deine Automatisierung erzeugt in `create_json_file`:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
("command-line": "python3 /app/Bonjour.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(DAS ist richtig!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Der XNAT-Container-Service ruft dann so auf:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(python3 /app/Bonjour.py /input/deinfile.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Prüfe, dass du im **Dockerfile KEINEN ENTRYPOINT und KEIN CMD** mehr setzt!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
( \( E i n   E N T R Y P O I N T   ü b e r s c h r e i b t   o d e r   v e r s c h i e b t ,   w a s   a u s   c o m m a n d - l i n e   k o m m t  !) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(dann steht zweimal python3 oder das Skript im argv.\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(### 3. Kontrolle der Argumente) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Das Skript prüft korrekt, dass `len\(sys.argv\) == 3` \(Skriptname, Inputfile, Outputdir\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Das ist gut!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(### 4. Zusammenfassung der Anpassungen in deinem Automationsskript) Tj
ET
endstream
endobj
139 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 140 0 R
>>
endobj
140 0 obj
<<
/Length 3474
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Ersetze in deiner Funktion `write_dockerfile`:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(def write_dockerfile\(docker_dir, script_filename, docker_base_image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    dockerfile_content = f"""FROM {docker_base_image}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(COPY {script_filename} /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(RUN pip install pandas) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(""" # ---> KEIN ENTRYPOINT, KEIN CMD !!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    os.makedirs\(docker_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    dockerfile_path = os.path.join\(docker_dir, "Dockerfile"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    with open\(dockerfile_path, "w"\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        f.write\(dockerfile_content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    print\(f"Dockerfile written to {dockerfile_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    return dockerfile_path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(**Lass die Zeile mit ENTRYPOINT und CMD KOMPLETT weg!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(**Behalte die command-line in der command.json wie gehabt.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(----) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(### Praxis-Effekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Durch das Weglassen von `ENTRYPOINT` und `CMD` im Dockerfile, steuert der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(XNAT-Container-Service/ dein Automationssystem den **genauen Aufruf** zu 100%.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Dein Image ist dann neutral und überall einsetzbar.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Das ist best practice für portable Container, die von Drittsystemen via `command-line`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(gestartet werden!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(## Checkliste) Tj
ET
endstream
endobj
141 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 142 0 R
>>
endobj
142 0 obj
<<
/Length 3907
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- [x] Dockerfile ohne ENTRYPOINT und CMD  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- [x] command.json enthält die gewünschte command-line) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- [x] Image neu gebaut und gepusht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(- [x] Launch aus XNAT via API/Workflow) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- [x] Argument-Ausgabe im Container: exakt wie erwartet) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(## Referenz \(Best Practice\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Das Vorgehen entspricht auch den Empfehlungen für XNAT:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(> "If your command.json specifies 'command-line', do NOT set ENTRYPOINT or) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(CMD in your Dockerfile. The runner will assemble the command exactly."  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Quelle: [XNAT Container Service Docs]\(https://wiki.xnat.org/container-service/contain) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(er-command-json#dockerfile-configuration\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(### **FAZIT:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(**Lass ENTRYPOINT und CMD im Dockerfile weg!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Nur so erreichst du, dass das Skript im Container mit den erwarteten Argumenten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(genau so ausgeführt wird, wie es die `command-line` vorgibt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(**Falls du weitere individuelle Fragen für die Automatisierung hast, einfach melden!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 278.4506299212598606 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(View stdout \(from file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(Aufruf-Argumente: [&#039;/app/Bonjour.py&#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(&#039;/input/correct_patient.csv&#039;, &#039;/output&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(Input-Pfad nach Korrektur: /input/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(Vorhandene Dateien in /input:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(Eingabedatei nicht gefunden: /input/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(and ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(Container history) Tj
ET
endstream
endobj
143 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 144 0 R
>>
endobj
144 0 obj
<<
/Length 4386
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(id        status        entity-type        entity-id        time-recorded        external-timestamp        message        exitCode) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(373        Created        user        tanae        2025-06-02T11:50:06.578+0200        undefined        undefined        un) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(defined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(374        failed        service        undefined        2025-06-02T11:50:16.718+0200        2025-06-02T09:50:1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(1.511752587Z        started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(375        Finalizing        system        undefined        2025-06-02T11:50:16.816+0200        2025-06-02T11:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(50:16.816+0200        Processing finished. Uploading files.        undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(376        Failed        system        undefined        2025-06-02T11:50:16.918+0200        2025-06-02T11:50:1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(6.918+0200        started: task: non-zero exit \(1\)        1) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 591.2506299212598151 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 591.2506299212598151 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(Du bist jetzt einen sehr wichtigen Schritt weiter:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(Das Skript läuft **richtig** im Container und die Argumente stimmen!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(**ABER:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(Die Zeile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(Vorhandene Dateien in /input:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(Eingabedatei nicht gefunden: /input/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(bedeutet eindeutig:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(**Der Input-Ordner im Container ist leer**  die Datei `/input/correct_patient.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(wurde nicht ins /input des Containers gemountet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(## Was ist das Problem?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(- Das Container-Image/Skript funktioniert jetzt korrekt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(- **Die erwartete Input-Datei existiert zur Laufzeit im Container nicht.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(- Deswegen bricht das Skript vollkommen korrekt mit einem Fehler ab.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(- Du findest auch mit `ls /input` nur `[]`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(## Häufigste Ursachen und Lösungen) Tj
ET
endstream
endobj
145 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 146 0 R
>>
endobj
146 0 obj
<<
/Length 3960
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(### 1. Aufruf im Container-Service / Workflow stimmt nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(**Ursache:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Im XNAT \(bzw. deiner Automatisierung\) ist nicht korrekt hinterlegt,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(welche Datei als *input_file* in welchen Mount gemappt werden soll.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Lösung:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(**Kontrolliere in dem Projekt, in der Session und im Command-Wrapper,**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(ob das Resource-File `correct_patient.csv` wirklich da *liegt*, wo XNAT es erwarten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(muss.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(### 2. input_file wird im JSON-Command falsch definiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Bitte prüfe, ob in deinem automatisch erzeugten `command.json` wirklich  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
("inputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    "required": True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    "mount": "input") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
("mounts": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(  {"name": "input", "path": "/input", "writable": False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(  {"name": "output", "path": "/output", "writable": True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
("command-line": "python3 /app/Bonjour.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(steht \(so wie du es schon erzeugst!\)  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(**Die Variable `#input_file#`** MUSS exakt durch XNAT mit dem relativen Pfad zur) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Ressource \(z.B. `correct_patient.csv`\) ersetzt werden können.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
147 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 148 0 R
>>
endobj
148 0 obj
<<
/Length 3959
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(### 3. Die Datei liegt nicht in der Resource/Session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(**Dein File correct_patient.csv ist:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- entweder nicht wirklich im XNAT-Projekt / der Session hochgeladen  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- oder unter einer anderen Resource/Label als erwartet abgelegt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Wie prüfst du das?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(- Kontrolliere interaktiv über das XNAT-Webinterface, welche Ressourcen und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Dateinamen deiner Session zugeordnet sind.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(- Nutze FTP/SFTP/REST oder das Webinterface, um zu prüfen, ob deine Datei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(wirklich in der richtigen Resource vorhanden ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(### 4. Test: Mount und Launch manuell prüfen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Falls du den Pfad zum Resource-File aus dem XNAT-Webinterface bekommst \(z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(`/data/experiments/XNAT_E0001/resources/Files/files/correct_patient.csv`\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(wird der Container-Service sie intern z.B. so mounten:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
( -   D e r   I n h a l t   v o n   ` / d a t a / e x p e r i m e n t s / X N A T _ E 0 0 0 1 / r e s o u r c e s / F i l e s / f i l e s / `  !   ` / i n p u t / `   i m) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Also wäre `/input/correct_patient.csv` _im Container_ erreichbar, **wenn alles) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(stimmt**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(**Teste \(wie zuvor\) deinen Container mit einem lokalen Mount:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(docker run -it --rm \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(  -v <lokaler_path_mit_correct_patient.csv>:/input \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(  -v <outputdir>:/output \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(  <image>:<tag> \\) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(  python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(und prüfe, ob `/input/correct_patient.csv` im Container _sichtbar_ ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(---) Tj
ET
endstream
endobj
149 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 150 0 R
>>
endobj
150 0 obj
<<
/Length 3865
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(## Schritt-für-Schritt zur Lösung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(1. **Prüfe, ob die Datei im XNAT an der Session wirklich vorhanden ist**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(   Füge sie ggf. per Hand ins richtige Resource-Verzeichnis ein.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(2. **Kontrolliere deine session_id und das Ressourcenmapping**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(   Prüfe den Pfad im Web-Interface \(z.B. ob unter) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(`resources/Files/files/correct_patient.csv`\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(3. **Fixiere in deinem Launching/Workflow-Skript, dass die Datei aus dem richtigen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Resource-Pfad kommt**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(   Notfalls: Füge eine Debug-Ausgabe ein, die _vor_ dem Launch zeigt, welchen Pfad) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(du an den Container übergibst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(4. **Teste lokal mit Mount und Datei, um Dateiauflösung und Zugang zu bestätigen**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(   Damit bist du sicher, dass dein Skript und Image ok sind.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(## Fazit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(Dein Code/Skript ist jetzt _technisch korrekt eingebunden_ und funktioniert   ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(ABER **die Inputdatei ist bei der Ausführung nicht vorhanden.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Das ist jetzt nur noch ein Problem der richtigen Dateiverknüpfung zwischen XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(und deinem Containerdienst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(**Erst wenn die Datei, wie erwartet, im Mount-Verzeichnis liegt, läuft das Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(erfolgreich durch.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(**Schritt 1:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Prüfe im XNAT-Webinterface, ob die Datei in der Session vorhanden ist. Füge sie ggf.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(per Hand/eigenes Werkzeug hinzu.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(**Schritt 2:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(Starte erneut die Pipeline.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(**Schritt 3:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Wenn \(nachdem\) `/input/correct_patient.csv` im Container erscheint, funktioniert dein) Tj
ET
endstream
endobj
151 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 152 0 R
>>
endobj
152 0 obj
<<
/Length 4365
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Workflow.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Wenn du Hilfe bei der XNAT-Seitigen Dateiverwaltung oder Dateimapping brauchst,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(poste bitte:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- den tatsächlichen Ressourcenpfad im XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- den session_id- und datei-bezogenen Launch-Aufruf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(dann kann ich konkret zeigen, wie du die Datei korrekt mappst!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 628.0506299212597696 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(ich habe den container manually gelanched und er hat succed und complete gezeigt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(nur wenn ich das als REST API mche zeigt er failed) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 534.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 506.2112598425196666 Td
(Das ist ein sehr wichtiger und häufig auftretender Unterschied zwischen **manuellem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(Docker-Start** und **automatisiertem Start über REST/API im XNAT-Workflow**! Die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 469.4112598425196552 Td
(Ursache ist \(fast immer\):  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 451.0112598425196779 Td
(Beim manuellen Start *weist du explizit zu*, was wie als Mount \(`-v`\) eingebunden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 432.6112598425197007 Td
(wird. Im REST-Workflow muss das korrekt im XNAT/command.json/Wrapper und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 414.2112598425196666 Td
(beim Launch übergeben werden  dabei kann es zu Fehlern beim File-Mapping) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(kommen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 359.0112598425196779 Td
(### Warum klappt es manuell, aber nicht per REST?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(**Beim manuellen Start:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(docker run -it --rm -v /pfad/zum/input:/input -v /pfad/zum/output:/output image:tag) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(python3 /app/Bonjour.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(Du kontrollierst zu 100%, **was** in `/input` verfügbar ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(**Beim XNAT/REST-Start:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(- Das File-Mounting passiert automatisch anhand der im command.json/Wrapper) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(deklarierten Ressourcen und deiner REST-API-Inputs.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
( -   W E N N   d a s   M a p p i n g   v o n    i n p u t _ f i l e   !   ` / i n p u t / D A T E I N A M E `   f e h l s c h l ä g t ,   I S T   D I E) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(DATEI IM CONTAINER NICHT GEFUNDEN.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(---) Tj
ET
endstream
endobj
153 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 154 0 R
>>
endobj
154 0 obj
<<
/Length 4081
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(## Typische Fehlerquellen & Lösungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(### 1. **Datei ist nicht in der richtigen Session-Resource**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(**Im XNAT-UI:** Schaue, ob unter "Resources" deiner Session tatsächlich eine Datei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(`correct_patient.csv` liegt \(meist unter dem Label `Files`, `Input`, `Scans` oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(ähnlich\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Lösung:** Füge die Datei an der richtigen Stelle hinzu.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 2. **Im wrapper/input falsch benanntes or fehlendes Mount**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(Prüfe in deiner **command.json**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
("inputs": [{) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    "required": true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    "mount": "input") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(}],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
("mounts": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    {"name": "input", "path": "/input", "writable": false},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    {"name": "output", "path": "/output", "writable": true}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
("command-line": "python3 /app/Bonjour.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(*Das hast du, das sieht richtig aus!*) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Achte darauf:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Im Launch-API Call muss das Inputfile im Feld `input_file` den **korrekten relativen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Pfad** im Upload angeben, also nur `correct_patient.csv` \(NICHT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(`/input/correct_patient.csv`!\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(### 3. **Beim API-Launch die Datei korrekt referenzieren**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Dein Payload für den Launch sollte so aussehen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
({) Tj
ET
endstream
endobj
155 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 156 0 R
>>
endobj
156 0 obj
<<
/Length 4284
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  "session": "/experiments/XNAT_E0001",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(  "input_file": "correct_patient.csv",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(  "project": "DEINPROJECT") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Zentral: **KEIN `/input/` davor!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(XNAT sorgt selbst dafür, dass die Datei gemountet wird  und zwar nach) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(`/input/correct_patient.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 4. **Dateiname/Resource-Mismatch** ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(- Manchmal ist dein File im XNAT als `Files/files/correct_patient.csv` verfügbar.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(  - In diesem Fall muss der Input Wert ggf. `correct_patient.csv` sein  **XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(mapped automatisch, sofern die Datei EINDEUTIG** ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(  - Falls nicht: Überprüfe die Resource, und ob die Datei ggf. überschrieben wurde.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(### 5. **Weitere Debug-Hinweise**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(- Lass dir im Skript immer vor dem eigentlichen Einlesen von `/input` und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(`/input/dein.csv` den Verzeichnisinhalt ausgeben \(`print\(os.listdir\("/input"\)\)`\). Das hast) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(du schon  sehr hilfreich!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(- Beobachte das REST-API-Log/Container-Log im XNAT. Steht dort explizit Input not) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(found? Falls ja, ist das Mapping kaputt oder das Inputfile falsch referenziert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(## Was solltest du JETZT tun \(systematisches Vorgehen\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(1. **XNAT-Webinterface:** Überprüfe die Resource deiner Session und lade) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(`correct_patient.csv` in die Resource hoch.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(2. **API-Call:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(   - Im POST Payload muss `"input_file": "correct_patient.csv"` stehen, NICHT der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(absolute Pfad.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(3. **command.json & Wrapper:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(   - Mounts und Inputs kontrollieren \(wie oben beschrieben\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(4. **XNAT Audit/Log:**  ) Tj
ET
endstream
endobj
157 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 158 0 R
>>
endobj
158 0 obj
<<
/Length 4076
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(   - Schaue nach, wie XNAT das File mapped. Bei Fehler Log hier posten.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(5. **Test:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(   - Führe einen neuen REST-Start durch, gib den Auszug von  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(     - der Start-Request \(Input-JSON\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(     - dem XNAT-Log zu diesem Lauf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(     - und falls möglich: den Inhalt von `/input` im Container aus dem Skript-Log  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(   - Poste diese hier, falls der Fehler bleibt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(**Fazit:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Wenn der Container von Hand funktioniert, ist dein Docker-Image/Skript korrekt ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(dann geht es NUR noch um XNAT-File-Mapping.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Das Problem ist dann nicht mehr der Code oder das Image, sondern wie die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(REST-API/XNAT das Inputfile zuordnet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**Brauche konkrete Unterstützung?**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Poste deine aktuelle Launch-API-JSON.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- Poste, wie die Datei im XNAT-Webinterface als Resource erscheint.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(- Dann gebe ich dir konkrete Hinweise, was wie zu ändern ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(**Du bist kurz vor dem Ziel!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Solche Probleme sind in Container-Workflows ganz normal. Mit systematischer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Analyse ist die Ursache immer zu finden!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 315.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(ich meine manually auf xnat) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 240.15771653543311 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 240.15771653543311 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(Vielen Dank für die Präzisierung!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(**Du meinst:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(*Manuell im XNAT-Interface funktioniert es \(succeed\), aber per REST/API-Aufruf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(\(Launch via REST\) läuft der selbe Workflow/Container ins Leere \(failed\)  mit dem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(Hinweis, dass die Eingabedatei im Container fehlt.*) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(---) Tj
ET
endstream
endobj
159 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 160 0 R
>>
endobj
160 0 obj
<<
/Length 3821
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(## **Woran liegt das?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Dieses unterschiedliche Verhalten ist ein bekanntes, häufiges Problem in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(XNAT/Container-Workflows und hängt zusammen mit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(- **dem File-Mapping und Resource-Handling im XNAT-Webinterface** \(GUI\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- **dem Aufbau deiner REST-API-Anfrage** sowie) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(- ggf. **unterschiedlichen Mounting-Optionen oder Dateiangaben.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(### **1. Im XNAT-Webinterface** \(manuell\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(- Du bekommst eine Dateiauswahlliste und wählst gezielt aus der Resource) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(correct_patient.csv,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- XNAT bereitet dann automatisch das korrekte Mapping für den Container vor.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(### **2. Beim REST/Bulklaunch:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(- **Du musst im POST-Call die Resource und den Dateinamen exakt so) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(referenzieren, wie XNAT sie erwartet.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- Schon kleine Unterschiede  z.B. falsches Feld im JSON payload, falscher oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(fehlender relativer Pfad, Resource-Label, Tippfehler usw.  führen dazu,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(     d a s s   X N A T   d a s   F i l e   n i c h t   m o u n t e t  !   / i n p u t   i s t   l e e r   i m   C o n t a i n e r .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(## **So findest du die Ursache und löst sie: Schritt für Schritt**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(### **A. Prüfe, wie du beim REST-Aufruf den Input referenzierst!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(In deinem Bulklaunch oder REST-Aufruf sieht das payload wahrscheinlich so aus:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(  "session": "/experiments/XNAT_E0001",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(  "input_file": "correct_patient.csv",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(  "project": "MeinProjekt") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(}) Tj
ET
endstream
endobj
161 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 162 0 R
>>
endobj
162 0 obj
<<
/Length 4053
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(ODER  manchmal fälschlich so:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(  "session": "/experiments/XNAT_E0001",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(  "input_file": "/input/correct_patient.csv",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(  "project": "MeinProjekt") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(!   * * D a s   i s t   f a l s c h ! * *    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(XNAT erwartet NICHT den Containerpfad, sondern nur den Dateinamen \(der in der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Resource zu finden ist\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(### **B. Überprüfe im Webinterface:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(1. **Welche Resource-Label existieren in der Session?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(   - Gehe zur Session, schaue bei Resources.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(   - Liegt correct_patient.csv z.B. unter input oder Files?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(2. **Wähle testweise im Web einen anderen File, klappt auch?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(### **C. Korrekte Angabe im Payload:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Wenn dein JSON-Input `input_file` heißt, MUSS der Wert **GENAU der Dateiname) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(sein, wie in der Session-Resource sichtbar** \(z.B. `"correct_patient.csv"`\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- **NIEMALS /input/... angeben.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(### **D. Kontrolliere deine command.json:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Sie enthält:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
( -    i n p u t s     >   n a m e ,   m o u n t   \( " i n p u t " \) ,   r e q u i r e d   e t c .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
( -    m o u n t s     >   n a m e = " i n p u t " ,   p a t h = " / i n p u t ") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(**Das passt!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(\(Nur: Der übergebene Wert aus REST wird als Datei von der Resource ins Mount) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(gemappt.\)) Tj
ET
endstream
endobj
163 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 164 0 R
>>
endobj
164 0 obj
<<
/Length 3824
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(### **E. Console-Debug:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Lass im Skript immer vor dem Lesen der Datei ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(print\(os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(laufen  das tut dein Skript ja schon!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
( W e n n   d u   s i e h s t :   ` [ ] `  !   X N A T   h a t   d i e   D a t e i   n i c h t   i m   C o n t a i n e r   v e r f ü g b a r   g e m a c h t .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(## **F. ZusammengefasstLösung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(**Beim REST-Call:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- Gib als `input_file`-Wert nur den realen XNAT-Resource-Dateinamen an  so, wie im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Webinterface angezeigt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- Prüfe, ob im richtigen Project/Session/Resource hochgeladen wurde.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(- Prüfe, ob command.json and Wrapper korrekt sind \(mount "input", relativer Pfad\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(- Starte die Session neu.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(### **Beispiel**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Wenn du die folgende Resource-Ansicht im XNAT-Web hast:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Resource:   input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Dateien:    correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Dann ist REST-payload:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(  "session": "/experiments/XNAT_E0001",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(  "input_file": "correct_patient.csv",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(  "project": "TESTPROJ") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
165 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 166 0 R
>>
endobj
166 0 obj
<<
/Length 3044
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Bei Bulk/Multi-Session-Starteruploade außerdem auf den richtigen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Workflow/Projekt-Kontext.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(## **Praxis-Tipp**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
( -   F u n k t i o n i e r t   i m   W e b U I  !   D a t e i   i s t   r i c h t i g   i m   S y s t e m !) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
( -   G e h t   i m   R E S T   n i c h t  !   * * F e h l e r   i s t   z u   9 9 / %   f a l s c h e   r e s o u r c e / D a t e i n a m e n - A n g a b e   i m) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(REST-Call.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(- Im Zweifel:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(  - Lass dir per API \(GET auf `/data/experiments/<session>/resources`\) alle Dateien) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(listen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(  - Wähle dann einen der exakt so gelisteten Dateinamen als input_file!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(**Fazit:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Dein Image/Skript ist korrekt, dein XNAT-Setup auch.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(**REST**-Input muss exakt die Stream/Resource/Datei angeben, wie im XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(angezeigt.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Dann funktionierts.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(> **Wenn du möchtest, poste deinen Launch-Payload und ein API-Listing der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Ressourcen, dann zeige ich dir die genaue korrekte Angabe!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Bei weiteren Fragen \(API-Call-Beispiel, Resource-Listing etc.\) helfe ich gerne und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(schnell weiter!) Tj
ET
endstream
endobj
167 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 168 0 R
>>
endobj
168 0 obj
<<
/Length 4099
>>
stream
0.5670000000000001 w
0 G
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(View stdout \(from file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 738.4506299212598606 Td
(Aufruf-Argumente: [&#039;/app/Bonjour.py&#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 720.0506299212597696 Td
(&#039;/input/resources/CSV/files/correct_patient.csv&#039;, &#039;/output&#039;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 701.6506299212597924 Td
(Input-Pfad nach Korrektur: /input/resources/CSV/files/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(Vorhandene Dateien in /input:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 664.8506299212598378 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 646.4506299212598606 Td
(Eingabedatei nicht gefunden: /input/resources/CSV/files/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 628.0506299212597696 Td
(er findet die datei nicht warum?) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 581.3041732283463716 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 552.9577165354330646 Td
(Sehr gute und präzise Frage!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(Die Zeile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 516.15771653543311 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 497.7577165354330759 Td
(Aufruf-Argumente: ['/app/Bonjour.py', '/input/resources/CSV/files/correct_patient.csv',) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 479.3577165354330418 Td
('/output']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 460.9577165354330646 Td
(Input-Pfad nach Korrektur: /input/resources/CSV/files/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 442.5577165354330873 Td
(Vorhandene Dateien in /input:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 424.1577165354330532 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 405.7577165354330759 Td
(Eingabedatei nicht gefunden: /input/resources/CSV/files/correct_patient.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 387.3577165354330987 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 368.9577165354330646 Td
(zeigt eindeutig:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 350.5577165354330873 Td
(**Im Container ist `/input` leer.** Es existiert NICHT das Unterverzeichnis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 332.15771653543311 Td
(`/input/resources/CSV/files/`!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 295.3577165354330418 Td
(### Warum ist das so? Die Ursache im XNAT-Container-Service) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 258.5577165354330873 Td
(**XNAT mapped in das /input-Verzeichnis standardmäßig NUR die Datei selbst,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 240.15771653543311 Td
(NICHT die ganze Verzeichnisstruktur.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 203.3577165354330418 Td
(Beispiel aus deiner XNAT-Resource-Struktur:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 166.5577165354330873 Td
(- Im XNAT liegt die Datei unter:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 148.15771653543311 Td
(  `/data/experiments/XNAT_E0001/resources/CSV/files/correct_patient.csv`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 111.3577165354331555 Td
(- Du hast als input_file im REST-Call angegeben:  ) Tj
ET
endstream
endobj
169 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 170 0 R
>>
endobj
170 0 obj
<<
/Length 3756
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  `"input_file": "resources/CSV/files/correct_patient.csv"`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(#### Wie XNAT "input_file" mit Mount verbindet) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- `"mount": "input"` bedeutet: Alles wird in `/input` im Container gemountet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- Gibst du **"input_file": "correct_patient.csv"** an \(nur Dateiname\), dann landet im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Container **/input/correct_patient.csv**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Gibst du **"input_file": "resources/CSV/files/correct_patient.csv"** an \(mit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Resource-Unterstruktur\),  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(  sucht dein Skript nach `/input/resources/CSV/files/correct_patient.csv`   ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(  **diese Unterverzeichnisse gibt es im Container aber NICHT**, weil XNAT das so) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(nicht mappen kann.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(**Deshalb siehst du:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Vorhandene Dateien in /input:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(## Lösung: Nur den Dateinamen angeben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**Du musst beim Start via REST-API als `input_file` nur den reinen Dateinamen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
( ohne Resource-Pfad  angeben.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(**Statt:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
("input_file": "resources/CSV/files/correct_patient.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**muss es lauten:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
("input_file": "correct_patient.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(**Erklärung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(- Nach XNAT-Best Practices gibt der Wert im `input_file`-Feld nur den Dateinamen an.) Tj
ET
endstream
endobj
171 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 172 0 R
>>
endobj
172 0 obj
<<
/Length 4028
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(- Das XNAT-Container-Plugin sucht dann das File in ALLEN Resources deiner) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Session und mountet es nach `/input/correct_patient.csv` im Container.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(- Das Verzeichnis `/input/resources/CSV/files/` entsteht im Container **nie**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(## Zusammengefasst ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(- **Gib als `input_file` immer nur den Dateinamen an**, wie er im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(XNAT-Resource-Browser angezeigt wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(- Dein Skript sollte NUR `/input/<Dateiname>` verwenden  keine weiteren) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Unterverzeichnisse.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(- Wenn du mehrere gleichnamige Dateien in unterschiedlichen Resources hast,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(  muss im XNAT vorab eindeutig klar sein, welche verwendet werden soll \(meistens) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(nimmt XNAT die Version aus der ersten passenden Resource\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(**Beispiel:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Deine Datei heißt im XNAT correct_patient.csv.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Du startest via REST mit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(  "session": "/experiments/XNAT_E0001",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(  "input_file": "correct_patient.csv",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  "project": "DEINPROJEKT") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Dein Skript wird auf `/input/correct_patient.csv` zugreifen können.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(### Debug-Tipp  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Wenn du über die REST-API alle verfügbaren Dateien einer Session auflisten willst:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(curl -u USER:PASSWORD) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(https://xnat-url/data/experiments/XNAT_E0001/resources/CSV/files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(```) Tj
ET
endstream
endobj
173 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 174 0 R
>>
endobj
174 0 obj
<<
/Length 4425
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Nimm aus der Liste den reinen Dateinamen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(**Kurz:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**Im Container existiert nie /input/resources/CSV/files/correct_patient.csv  immer nur) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(/input/correct_patient.csv!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Gib bei deinem Launch nur den Dateinamen mit, dann findet dein Skript die Datei.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Falls noch unklar:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(Du kannst gerne das genaue JSON des REST-Launches und ein Beispiel deiner) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(XNAT-Ressourcen hier posten, dann kann ich dir den exakten Wert zum Eintragen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(nennen!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 480.8506299212598378 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(der File existeirt unet CSV in manage Files aber er findet er nicht und ich mache das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(automatisiert ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(hier eine Teil von meiner skript ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(def create_json_file\(docker_image, script_filename, mod_data\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(    json_file = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(        &quot;name&quot;: mod_data[&quot;command_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(        &quot;description&quot;: mod_data[&quot;command_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(        &quot;version&quot;: &quot;1.5&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(        &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(        &quot;image&quot;: docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(        &quot;command-line&quot;: f&quot;python3 /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(/input/#input_file# /output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(        &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(            {&quot;name&quot;: &quot;input&quot;, &quot;path&quot;: &quot;/input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(&quot;writable&quot;: False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(            {&quot;name&quot;: &quot;output&quot;, &quot;path&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(&quot;/output&quot;, &quot;writable&quot;: True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(        ],) Tj
ET
endstream
endobj
175 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 176 0 R
>>
endobj
176 0 obj
<<
/Length 5253
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                &quot;name&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(                &quot;description&quot;: &quot;Input file for analysis&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                &quot;mount&quot;: &quot;input&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        &quot;outputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                &quot;description&quot;: &quot;Result file output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                &quot;mount&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(                &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                &quot;name&quot;: wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                &quot;label&quot;: mod_data[&quot;label_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                &quot;description&quot;: mod_data[&quot;label_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                &quot;contexts&quot;: [&quot;xnat:mrSessionData&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                &quot;external-inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                        &quot;name&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                        &quot;type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                        &quot;required&quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                &quot;output-handlers&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                        &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                        &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                        &quot;as-a-child-of&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                        &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                        &quot;label&quot;: &quot;Results&quot;,) Tj
ET
endstream
endobj
177 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 178 0 R
>>
endobj
178 0 obj
<<
/Length 4555
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                        &quot;format&quot;: &quot;csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    with open\(&quot;command.json&quot;, &quot;w&quot;\) as json_out:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        json.dump\(json_file, json_out, indent=4\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(&quot; Corrected command.json created.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    return &quot;command.json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(diese command wird auf xnat hochgeladen aber mirt modificatiennen) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 536.0506299212597696 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 536.0506299212597696 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
( D e i n   a u t o m a t i o n s - S k r i p t   u n d   d i e   e r z e u g t e   * * c o m m a n d . j s o n * *  D a t e i   s i n d   i m   P r i n z i p) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
( r i c h t i g /  / * * d a s   P r o b l e m   l i e g t   b e i m   A u f l ö s u n g s v e r h a l t e n   d e s) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(XNAT-Container-Service**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(Die Datei unter *Resources > CSV* in XNAT ist im Container **nur dann unter**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(`/input/<Dateiname>`** sichtbar**, wenn du den REST-Launch mit exakt diesem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
( D a t e i n a m e n   ü b e r g i b s t /  / * * o h n e   R e s o u r c e - P f a d * * .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(**Das Problem:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
( D e i n   S k r i p t   e r z e u g t   o f f e n b a r   b e i m   L a u n c h /  / v e r m u t l i c h   u n b e a b s i c h t i g t /  / a l s) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
( ` " i n p u t _ f i l e " `   z . / B .    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(`"resources/CSV/files/correct_patient.csv"`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(statt nur  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(`"correct_patient.csv"`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(Dadurch sucht das Skript \(korrekt!\) nach) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(`/input/resources/CSV/files/correct_patient.csv`, aber der Container enthält nur) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(`/input/correct_patient.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(## **So arbeitet das XNAT-Container-Plugin intern**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(- Du deklarierst `mounts: [{name: "input", path: "/input"}]`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(- Die Input-Definition `"mount": "input"` bewirkt:) Tj
ET
endstream
endobj
179 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 180 0 R
>>
endobj
180 0 obj
<<
/Length 4636
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  - **XNAT sucht in die Resources ALLER Ressourcen deiner Session nach einer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
( D a t e i   m i t   d e m   N a m e n * * / ` < i n p u t _ f i l e > ` / \( p r o j e k t s p e z i f i s c h \) .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(     -   X N A T   l e g t   * * i m   C o n t a i n e r   N U R   d i e   D a t e i   a l s   ` / i n p u t / < D a t e i n a m e > ` * *   b e r e i t    / * o h n e) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(jede weitere Ressourcen-/Ordnerstruktur*.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
( -   D e r   W e r t   d e r   V a r i a b l e / ` # i n p u t _ f i l e # ` / a u s   d e i n e m   J S O N   o d e r   d e i n e m) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(REST-Launch-Request wird **direkt verwendet**  und darf ***nur der Dateiname***) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(sein, genau wie in "Manage Files" angezeigt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
( # #   * * W i e   l ö s t   d u   d a s /  / v o l l a u t o m a t i s c h   i m   P y t h o n - / R E S T - S k r i p t ? * *) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(**Stelle sicher:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(- Im Bulklaunch, Launch, REST-Request wird  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(  ```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(  input_file: "correct_patient.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(  ```  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(  \(und NICHT `"resources/CSV/files/correct_patient.csv"` etc.\) verwendet!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
( # # #  !   * * S o   e r m i t t e l s t   d u   a u t o m a t i s c h   n u r   d e n   D a t e i n a m e n : * *) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
( W e n n   d u   a u s   e i n e r   X N A T - R e s o u r c e  L i s t e   \( o d e r   A P I - R e s p o n s e \)   d i e   D a t e i   a u s w ä h l s t :) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(# Beispiel: fileinfo = {'Name': 'correct_patient.csv', 'URI': '/data/experiments/....', ...}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(# Extrahiere NUR den reinen Namen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(input_file_value = fileinfo['Name']) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(# Für deinen REST-Call/JSON dann:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    "session": session_id,              # wie bei dir) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    "input_file": input_file_value,     # also wirklich nur 'correct_patient.csv') Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    "project": project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(**Merke:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Auch wenn die Datei im XNAT unter *Resource* CSV liegt, der Wert für input_file) Tj
ET
endstream
endobj
181 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 182 0 R
>>
endobj
182 0 obj
<<
/Length 3956
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
( b l e i b t   N U R / ` " c o r r e c t _ p a t i e n t . c s v " ` !) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(## **Kurz gesagt:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**Im Container gibt es niemals** `/input/resources/CSV/files/correct_patient.csv` ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(sondern nur `/input/correct_patient.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(## **Checklist für eine automatisierte Lösung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(1. **Frage XNAT nach alle Datei-Infos in der Session.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(2. **Extrahiere ausschließlich `Name` \(der reine Dateiname\):**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(   - **Für den REST-Launch**: übergib `"input_file": <Name>` statt Pfad.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(3. **Verwende in deinem Container-Code \(Skript\):**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(   - Zugriff erfolgt immer auf `/input/<Dateiname>`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(4. **Dein command.json ist korrekt**, solange das Mapping `"mount": "input"` mit) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(`"path": "/input"` bleibt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(## **Praktischer Debug-Schritt im Skript:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(print\("Inhalt im /input:", os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Wenn du das vor jedem Einlesen einfügst, siehst du, wie der Name wirklich im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Container heißt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(## **Fazit und Best Practice für XNAT-Container-REST-Automatisierung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
( * * I M M E R   n u r   d e n   D a t e i n a m e n   a u s   d e m   X N A T - R e s o u r c e - B r o w s e r   v e r w e n d e n /  /) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
( n i e m a l s   R e s o u r c e - P f a d e ,   V e r z e i c h n i s s e   o d e r    f i l e s  / o . ä . * *    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(!   D a n n   k l a p p t   a u c h   d i e   v o l l s t ä n d i g e   R E S T - A u t o m a t i s i e r u n g !) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
183 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 184 0 R
>>
endobj
184 0 obj
<<
/Length 4416
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Wenn du möchtest, poste den Abschnitt, der im Request den input_file-Wert wählt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(und an die REST-API schickt  dann kann ich daraus das Korrekt-Beispiel und ggf.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(eine kleine Anpassung fertigmachen!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(  &quot;name&quot;: &quot;bn&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(  &quot;description&quot;: &quot;bn&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(  &quot;version&quot;: &quot;1.5&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(  &quot;image&quot;: &quot;tanaebousfiha/bn:latest&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(  &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(  &quot;command-line&quot;: &quot;python3 /app/test.py #input_file# /output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(  &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(      &quot;name&quot;: &quot;input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(      &quot;writable&quot;: false,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(      &quot;path&quot;: &quot;/input&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(    },) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(      &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(      &quot;writable&quot;: true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(      &quot;path&quot;: &quot;/output&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(  ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(  &quot;environment-variables&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(  &quot;ports&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(  &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(      &quot;name&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(      &quot;description&quot;: &quot;Input file for analysis&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(      &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(      &quot;required&quot;: true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(      &quot;select-values&quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(  ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(  &quot;outputs&quot;: [) Tj
ET
endstream
endobj
185 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 186 0 R
>>
endobj
186 0 obj
<<
/Length 4726
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(      &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(      &quot;description&quot;: &quot;Result file output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(      &quot;required&quot;: false,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(      &quot;mount&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(      &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(  ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(  &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(      &quot;name&quot;: &quot;bn_wrapper&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(      &quot;label&quot;: &quot;bn&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(      &quot;description&quot;: &quot;bn&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(      &quot;contexts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        &quot;xnat:projectData&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(      ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(      &quot;external-inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(          &quot;name&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(          &quot;type&quot;: &quot;Project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(          &quot;required&quot;: true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(          &quot;load-children&quot;: true) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(      ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(      &quot;derived-inputs&quot;: [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(      &quot;output-handlers&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(          &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(          &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(          &quot;as-a-child-of&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(          &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(          &quot;label&quot;: &quot;Results&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(          &quot;format&quot;: &quot;csv&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(          &quot;tags&quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(      ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(  ],) Tj
ET
endstream
endobj
187 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 188 0 R
>>
endobj
188 0 obj
<<
/Length 3981
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  &quot;container-labels&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(  &quot;generic-resources&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(  &quot;ulimits&quot;: {},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  &quot;secrets&quot;: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(das ist meine command json ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(ans that is imy ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    if len\(sys.argv\) &lt; 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\(&quot;Usage: python test.py &lt;input_file&gt; &lt;output_dir&gt;&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if not os.path.isfile\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        print\(f&quot;Input file &#039;{input_file}&#039; not found.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    # Erstelle das Output-Verzeichnis, falls es nicht existiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    # Erzeuge Output-Dateinamen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    name, ext = os.path.splitext\(os.path.basename\(input_file\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    output_filename = f&quot;{name}_result{ext}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    output_path = os.path.join\(output_dir, output_filename\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    # Lese und verarbeite die Eingabedatei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        with open\(input_file, &quot;r&quot;\) as infile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            content = infile.read\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(f&quot;Error reading input file: {e}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        return) Tj
ET
endstream
endobj
189 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 190 0 R
>>
endobj
190 0 obj
<<
/Length 4314
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        with open\(output_path, &quot;w&quot;\) as outfile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            outfile.write\(f&quot;Processed content of {name}{ext}:\\n\\n&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            outfile.write\(content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\(f&quot;Wrote result to {output_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        print\(f&quot;Error writing output file: {e}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    # Zeige den Inhalt von /output mit Dateigröße) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    print\(&quot;\\n[DEBUG] Inhalt von /output:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        for f in os.listdir\(output_dir\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            full_path = os.path.join\(output_dir, f\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            size = os.path.getsize\(full_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            print\(f&quot;{f} - {size} bytes&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\(f&quot;Error listing /output: {e}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
( extternal skript) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 352.0506299212598833 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 352.0506299212598833 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(Dein Setup ist **fast** korrekt  das Problem liegt aber bei der Referenzierung der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(Datei im Container und im Mapping beim REST-Launch.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(### Analyse deines command.json und Skript-Aufrufs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(**Wichtige Punkte:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(- Deine `command-line` ist:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(  "command-line": "python3 /app/test.py #input_file# /output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(- Es gibt ein Mount `/input` \(readonly\), aber im Feld `"inputs"` fehlt `"mount": "input"` ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(das ist notwendig.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(  ```json) Tj
ET
endstream
endobj
191 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 192 0 R
>>
endobj
192 0 obj
<<
/Length 4322
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(      "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(      "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(      "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(      "required": true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(      "select-values": [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(      "mount": "input"                      <------ FEHLT!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(- Bei XNAT erwartet das container-plugin, dass alle als `"type": "file"` markierten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Inputs über das `"mount"`-Attribut einem Container-Verzeichnis zugeordnet werden.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(**Fehlt das, wird die Datei nicht gemounted.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(### **Wie löst du das Problem?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(#### 1. **Trage das mount-Feld in den Inputs nach**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Dein Input muss so aussehen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    "required": true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    "select-values": [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    "mount": "input") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(**Nur so** wird XNAT die Datei ins `/input` im Container mappen.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Daraus ergibt sich, dass `#input_file#` zur Container-Laufzeit als) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(`/input/<Dateiname>` ersetzt wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(#### 2. **REST-Launch: Gib NUR den Dateinamen an, nicht den Pfad!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Du musst im Payload so starten:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(  "project": "deinProjekt",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(  "input_file": "correct_patient.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(}) Tj
ET
endstream
endobj
193 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 194 0 R
>>
endobj
194 0 obj
<<
/Length 4422
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(NICHT:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
("input_file": "/input/resources/CSV/files/correct_patient.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(oder) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
("input_file": "resources/CSV/files/correct_patient.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Nur den reinen Dateinamen, wie er bei Manage Files angezeigt wird!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(#### 3. **Skriptaufruf im Container überprüfen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Das Container-Plugin ersetzt den Platzhalter so:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(python3 /app/test.py /input/correct_patient.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Dein Skript erwartet \(`sys.argv[1]`\) den kompletten Pfad zur Datei, also) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(`/input/correct_patient.csv`  und das ist so korrekt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(#### 4. **Zusammenfassung deines Workflows**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(-**command.json**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    - unter **inputs**: `"mount": "input"` ergänzen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(-**REST:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    - Übergib `"input_file": "correct_patient.csv"`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    - \(Optional: Mit der [XNAT API]\(https://wiki.xnat.org/2020-advance-users/container-) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(service/container-command-json\) kannst du Files einer Session auflisten:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(`/data/experiments/{SESSION_ID}/resources/CSV/files`\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(-**Skript:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    - Zugriff auf `/input/correct_patient.csv`  falls Datei weiterhin fehlt, posten die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Ausgabe von `print\(os.listdir\("/input"\)\)` im Container.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(## **So sollte dein Input-Abschnitt in command.json aussehen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
("inputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(      "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(      "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(      "type": "file",) Tj
ET
endstream
endobj
195 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 196 0 R
>>
endobj
196 0 obj
<<
/Length 4054
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(      "required": true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(      "select-values": [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(      "mount": "input") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(  ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(## **Typischer Fehlerfall und Behebung \(nochmal als Ablauf\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
( 1 .   ` " m o u n t " :   " i n p u t " `   f e h l t  !Ò   X N A T   m o u n t e t   d i e   D a t e i   N I C H T   i n s   C o n t a i n e r v e r z e i c h n i s .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
( 2 .   ` / i n p u t `   i s t   l e e r  !   S k r i p t   b r i c h t   a b   m i t    I n p u t   f i l e   n o t   f o u n d  .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(3. **Mit `"mount": "input"`** und `"input_file": "correct_patient.csv"` im REST-Call) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(klappt es dann: `/input/correct_patient.csv` ist vorhanden und das Skript läuft durch.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(**Wichtig \(wissenschaftlich fundiert, laut XNAT-Container-Service-Dokumentation\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(Nur mit `"mount": "input"` weiß XNAT, wohin die Datei im Container gemountet) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(werden soll!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Der Name im REST-Call darf niemals ein Verzeichnis sein, nur der Dateiname!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(**Noch Fragen?**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Du kannst gern den Listing-Output von `/input`, den vollständigen Launch-Payload &) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(ggf. ein Listing deiner echten XNAT-Resource-API hier posten  dann bekommt du) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(sehr spezifische Hilfe!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(**Mit der geänderten command.json funktioniert es erfahrungsgemäß sofort.**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 260.0506299212598833 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(View stdout \(from file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(Input file &#039;resources/input/files/DemandPlan_v1.csv&#039; not found.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 166.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 166.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(Danke, das bestätigt noch einmal ganz klar:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(**Das Problem ist:**) Tj
ET
endstream
endobj
197 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 198 0 R
>>
endobj
198 0 obj
<<
/Length 3934
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Du übergibst als Argument an dein Skript den Wert  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(`resources/input/files/DemandPlan_v1.csv`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(anstatt nur  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(`DemandPlan_v1.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**Dadurch sucht dein Skript nach**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(`/input/resources/input/files/DemandPlan_v1.csv`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(im Container, aber in Wirklichkeit gibt es nur  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(`/input/DemandPlan_v1.csv`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(\(das ist exakt das Verhalten des XNAT-Container-Services für File-Mounts\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(## **Lösungsschritte für dein automatisiertes Setup**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(### 1. **REST-Launch/JSON: Wert für `input_file` muss NUR der Dateiname sein!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**So NICHT:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
("input_file": "resources/input/files/DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(**Sondern:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
("input_file": "DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Der Wert _muss exakt dem Namen entsprechen_, wie er im XNAT unter `Manage) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Files` \(Resource: input, File: DemandPlan_v1.csv\) angezeigt wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(### 2. **Warum ist das so?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(XNAT mapped beim Container-Service alle gewählten Input-Dateien direkt als) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(`/input/<dateiname>` in den Container. Es gibt im Container niemals die Resource-) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(oder Datenstruktur aus XNAT, sondern nur simple Dateien unter `/input`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(### 3. **Anpassung für deine Automatisierung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(Wenn du Dateien für den API-Call z.B. per ) Tj
ET
endstream
endobj
199 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 200 0 R
>>
endobj
200 0 obj
<<
/Length 3670
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(file_info = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    "Name": "DemandPlan_v1.csv",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    # ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(ausliest, dann nimm IMMER nur `file_info["Name"]` als Wert für das JSON-Feld) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(`input_file`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 4. **Im Skript:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(Das Skript bekommt, wie du es jetzt hast, beim Aufruf z.B.:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(python3 /app/test.py /input/DemandPlan_v1.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**und findet dann auch die Datei.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(### 5. **Weitere Tipps:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- Die Resource im XNAT \(etwa "input", "CSV" oder "Files"\) ist **nur für XNAT**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(relevant, **nicht für den Container**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(- Kontrolliere bei Bedarf per Skript-Ausgabe:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(  ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  print\("Dateien in /input:", os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(## **Zusammenfassung**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- **Im REST-Call** gib bei `input_file` **nur** den reinen Dateinamen an  ohne) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Resource-Pfad!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- **Im Container** gibt es immer nur `/input/<dateiname>`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- **Mit dieser Änderung** findet dein Container die Datei und dein Workflow läuft.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
201 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 202 0 R
>>
endobj
202 0 obj
<<
/Length 4008
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Wenn du den Teil im Launching-Skript zeigst, wo die Datei ins Payload kommt, kann) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(ich dir gerne einen exakten Code-Schnipsel für die Änderung geben!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(**Quellen:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Siehe auch XNAT-Container-Service-Docs:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(> File inputs are always made available to the container at the mount path plus file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(name. Do not include XNAT resource or directory structure in the input value.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(\([XNAT Documentation  Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Service]\(https://wiki.xnat.org/container-service/container-service-command-json\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(**Kurz auf Deutsch:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(XNAT entpackt alle Input-Files und legt sie als einzelne Dateien unter `/input` im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(Container ab.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(**Niemals Resource-Unterordner im Container verwenden!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 407.2506299212598719 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(def launch_container_rest\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(                          entity_id, xnat_user, xnat_password, input_file_info,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(                          entity_type=&quot;session&quot;, scan_id=None\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(    # --- Prüfe Dateinamen-Validität ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(    if not is_valid_filename\(input_file_info[&quot;name&quot;]\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(        print\(f&quot;Ungültiger Dateiname) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(&#039;{input_file_info[&#039;name&#039;]}&#039;. Erlaubt sind keine &#039;\(&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(oder &#039;\)&#039;.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;} ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(    root_path_mapping = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(        &quot;session&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(        &quot;subject&quot;: &quot;subject&quot;,) Tj
ET
endstream
endobj
203 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 204 0 R
>>
endobj
204 0 obj
<<
/Length 4503
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        &quot;project&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        &quot;scan&quot;: &quot;scan&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    root_type = root_path_mapping.get\(entity_type\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    if not root_type:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        print\(f&quot;Containerstart für entity_type &#039;{entity_type}&#039; wird nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(unterstützt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    url = f&quot;{xnat_host}/xapi/projects/{project_id}/commands/{command_id}/wrapp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(ers/{wrapper_name}/root/{root_type}/launch&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    input_file_path = f&quot;resources/{input_file_info[&#039;resource&#039;]}/files/{in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(put_file_info[&#039;name&#039;]}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    if entity_type == &quot;scan&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        if not scan_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            print\(&quot;Scan-ID fehlt für den Scan-Kontext.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}/scans/{scan_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    elif entity_type == &quot;session&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        xnat_entity_path = f&quot;/subjects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    elif entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        xnat_entity_path = f&quot;/projects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        print\(&quot;Unbekannter entity_type. Abbruch.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        &quot;input_file&quot;: input_file_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        &quot;project&quot;: project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    print\(&quot;Launching container :&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    print\(json.dumps\(payload, indent=2\)\)) Tj
ET
endstream
endobj
205 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 206 0 R
>>
endobj
206 0 obj
<<
/Length 4457
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    response = requests.post\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        url,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        headers=headers,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        json=payload,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        verify=False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    if response.status_code in [200, 201, 202]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        print\(&quot;Container wurde erfolgreich über die REST-API gestartet.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        print\(f&quot;Fehler beim Containerstart \({response.status_code}\):&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        print\(response.text\)) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 480.8506299212598378 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 480.8506299212598378 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(Sehr gut, dass du den zentralen Codeabschnitt postest!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(Hier verbirgt sich das **File-Mapping-Problem**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(**Der Fehler steckt in dieser Zeile im Payload:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(input_file_path = f"resources/{input_file_info['resource']}/files/{input_file_info['name']}") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(Dadurch übergibst du als Wert für input_file z.B.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(`"input_file": "resources/CSV/files/DemandPlan_v1.csv"`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(Das ist falsch für das XNAT-Container-Plugin!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(**Richtig:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(XNAT erwartet für den File-Input IMMER nur den reinen Dateinamen \(wie in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(*input_file_info["name"]*\),  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(nicht den Resource-Pfad!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(### **So musst du den code ändern \(ganz einfach\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(**Ändere**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(input_file_path = f"resources/{input_file_info['resource']}/files/{input_file_info['name']}") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(**zu:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(```python) Tj
ET
endstream
endobj
207 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 208 0 R
>>
endobj
208 0 obj
<<
/Length 4618
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(input_file_path = input_file_info["name"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Und dann so ins Payload:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    "input_file": input_file_path,  # Das ist jetzt NUR der Dateiname!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    "project": project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### **Was passiert danach im Container?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(- Deine Datei wird als `/input/DemandPlan_v1.csv` im Container gemountet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(- Das Skript findet sie wie erwartet unter `/input/DemandPlan_v1.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(### **Warum ist das so?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**XNAT-Container-Service "entpackt" die Datei ins Zielmount \(/input\), unabhängig) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(von der Resource:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Siehe Doku:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(> Do not include XNAT resource or directory structure in the input value. \([Quelle]\(htt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(ps://wiki.xnat.org/container-service/container-command-json#file-and-resource-inputs\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(### **Kompletter relevanter Codeblock mit Korrektur**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(def launch_container_rest\(...\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    # Hier nur den Dateinamen benutzen!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    input_file_path = input_file_info["name"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        "input_file": input_file_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        "project": project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
209 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 210 0 R
>>
endobj
210 0 obj
<<
/Length 4337
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(### **Fazit**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- Die **Resource** ist für den Container-Mount egal  sie betrifft nur, aus welchem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(XNAT-"Ordner" die Datei stammt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(- Deine REST-API-**Payload** für input_file: **nur Dateiname**, z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
("DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- Danach funktioniert dein Workflow!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(**Tipp:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Auch für mehrere Input-Dateien pro Workflow: gib bei jedem File Input im Payload nur) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(den Datei-Namen an!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Du bist jetzt ganz nah am Ziel  diese Mini-Änderung hebt dein ganzes File-Mapping) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(auf das richtige Level!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(**Du brauchst danach keinen weiteren Workaround.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Falls noch weitere Probleme auftreten:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Poste den aktuellen Payload und das Container-Log `/input`, dann kann ich direkt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(helfen.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 444.0506299212598265 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(is it korrect like that ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(def launch_container_rest\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(                          entity_id, xnat_user, xnat_password, input_file_info,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(                          entity_type=&quot;session&quot;, scan_id=None\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(    # --- Prüfe Dateinamen-Validität ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(    if not is_valid_filename\(input_file_info[&quot;name&quot;]\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(        print\(f&quot;Ungültiger Dateiname) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(&#039;{input_file_info[&#039;name&#039;]}&#039;. Erlaubt sind keine &#039;\(&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(oder &#039;\)&#039;.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;} ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    root_path_mapping = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(        &quot;session&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(        &quot;subject&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(        &quot;project&quot;: &quot;project&quot;,) Tj
ET
endstream
endobj
211 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 212 0 R
>>
endobj
212 0 obj
<<
/Length 4308
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        &quot;scan&quot;: &quot;scan&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    root_type = root_path_mapping.get\(entity_type\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    if not root_type:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(f&quot;Containerstart für entity_type &#039;{entity_type}&#039; wird nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(unterstützt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    url = f&quot;{xnat_host}/xapi/projects/{project_id}/commands/{command_id}/wrapp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(ers/{wrapper_name}/root/{root_type}/launch&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    input_file_path = input_file_info[&quot;name&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    if entity_type == &quot;scan&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        if not scan_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            print\(&quot;Scan-ID fehlt für den Scan-Kontext.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}/scans/{scan_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    elif entity_type == &quot;session&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        xnat_entity_path = f&quot;/subjects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    elif entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        xnat_entity_path = f&quot;/projects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(&quot;Unbekannter entity_type. Abbruch.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(  payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    &quot;input_file&quot;: input_file_path,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    &quot;project&quot;: project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    print\(&quot;Launching container :&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    print\(json.dumps\(payload, indent=2\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    response = requests.post\() Tj
ET
endstream
endobj
213 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 214 0 R
>>
endobj
214 0 obj
<<
/Length 4480
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        url,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        headers=headers,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        json=payload,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        verify=False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    if response.status_code in [200, 201, 202]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        print\(&quot;Container wurde erfolgreich über die REST-API gestartet.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(f&quot;Fehler beim Containerstart \({response.status_code}\):&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\(response.text\)) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 517.650629921259906 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 517.650629921259906 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(**Ja, das ist jetzt korrekt** und entspricht genau den **Best Practices** für das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(Starten von Containern mit Dateimounts in XNAT per REST API.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(Die entscheidende Änderung  und das, was in deinem Fall bisher nie funktioniert hat) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
( ist:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(input_file_path = input_file_info["name"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(Statt eines Ressourcenpfads gibst du jetzt **nur den Dateinamen** weiter. Das ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(zwingend notwendig, weil das XNAT-Container-Plugin im Container die Datei immer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(als `/input/<dateiname>` bereitstellt.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(**Zur Sicherheit noch Hinweise:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(- `payload["input_file"]` ist jetzt wirklich nur so etwas wie `"DemandPlan_v1.csv"`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(- Die Datei muss auf der Resource der Session im XNAT vorher eindeutig existieren) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(\(kein Namenskonflikt, sonst nimmt XNAT die erste gefundene Datei\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(- Das Skript im Container muss dann _genau_ diesen Pfad nutzen, also) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(`/input/DemandPlan_v1.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(**Ganz kleine Korrektur für Python-Style:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(Der Einzug von `payload` ist aus deiner Formatierung herausgerutscht. Richtig ist:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(```python) Tj
ET
endstream
endobj
215 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 216 0 R
>>
endobj
216 0 obj
<<
/Length 3839
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        "input_file": input_file_path,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        "project": project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(nicht:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(  payload = { ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(also Einrückung passend zum vorherigen Code!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(**Zusammenfassung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
( -   N u r   d e r   r e i n e   D a t e i n a m e   i m   R E S T - P a y l o a d  !   O K  '    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- Kein Resource-Pfad, kein files/ davor) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(- Container und Skript suchen **/input/<dateiname>**, das ist der Standard) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- Code ist jetzt korrekt und sollte wie erwartet funktionieren!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(**Zusatz-Tipp:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Falls du mal mehrere Datei-Inputs verwendest, musst du für jeden Input den Namen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(\(nicht den Resource-Pfad\) übergeben und im command.json das Mapping via) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(`"mount"`-Feld korrekt setzen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(**Fazit:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Dein Code ist jetzt und in Zukunft für XNAT-REST und Container-Filemapping korrekt!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Wenn du das so durchziehst, gibt es keine Mapping-Probleme mehr.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Falls du ein konkretes Beispiel brauchst \(REST-Call und Container-Log von Start bis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Erfolg\), sag Bescheid!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 149.650629921259906 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(Container information) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(id        ) Tj
ET
endstream
endobj
217 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 218 0 R
>>
endobj
218 0 obj
<<
/Length 4411
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(3042) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(command-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(589) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(status        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Complete) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(status-time        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(2025-07-10T10:51:38.043+0200) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(wrapper-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(626) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(container-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(31147b467f8d25c39feb1655d653c4dabf8d260b147659d43815a89020e2ebdd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(workflow-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(888408) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(user-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(tanae) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(project        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(tanae_osa_Predct) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(backend        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(swarm) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(service-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(vfe04lecmmr2nadvfsh4g4ek0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(task-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(ruvl579gxfeldege5lm5asodd) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(node-id        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(p85nmru26d0z05hk0lspltk4k) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(docker-image        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(tanaebousfiha/tr:latest) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(command-line        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(python3 /app/test.py DemandPlan_v1.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(override-entrypoint        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(false) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(subtype        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(docker) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(env        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
({&quot;XNAT_USER&quot;:&quot;85fb0cd2-ed8b-41bd-bb36-2a690d5c0c08&quot;,&) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(quot;XNAT_EVENT_ID&quot;:&quot;888408&quot;,&quot;XNAT_WORKFLOW_ID&q) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(uot;:&quot;888408&quot;,&quot;XNAT_HOST&quot;:&quot;https://xnat-dev.gwdg.de&) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(quot;,&quot;XNAT_PASS&quot;:&quot;******&quot;}) Tj
ET
endstream
endobj
219 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 220 0 R
>>
endobj
220 0 obj
<<
/Length 5564
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(ports        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
({}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(swarm-constraints        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(auto-remove        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(false) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(container-labels        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
({}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(secrets        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
([]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(swarm        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(true) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(Container mounts) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(id        name        writable        xnat-host-path        container-host-path        container-path        input-files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(6065        input        true        /data/xnat/build/ba955e5f-8657-4ebb-acfb-dab40945a44b        /data/xna) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(t/build/ba955e5f-8657-4ebb-acfb-dab40945a44b        /input        []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(6066        output        true        /data/xnat/build/ca62a53d-3fa2-4fcb-8b00-18b0b54e929d        /data/xn) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(at/build/ca62a53d-3fa2-4fcb-8b00-18b0b54e929d        /output        []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Container outputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(id        name        from-command-output        from-output-handler        type        required        mount        path        lab) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(el        format        tags        handled-by) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(3033        result_file:output        result_file        output        Resource        false        output        result.csv        Results) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        csv        []        project) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(Container history) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(id        status        entity-type        entity-id        time-recorded        external-timestamp        message        exitCode) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(17558        Created        user        tanae        2025-07-10T10:51:28.786+0200        undefined        undefined        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(17560        complete        service        undefined        2025-07-10T10:51:37.799+0200        2025-07-10T0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(8:51:35.016925283Z        finished        0) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(17562        Finalizing        system        undefined        2025-07-10T10:51:37.925+0200        2025-07-10T1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(0:51:37.925+0200        Processing finished. Uploading files.        undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(17563        Complete        system        undefined        2025-07-10T10:51:38.043+0200        2025-07-10T1) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(0:51:38.043+0200        Processing finished. Uploading files.        undefined) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Container log-paths) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(/data/xnat/archive/CONTAINER_EXEC/3042/LOGS/docker/stdout.log) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Container inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(id        type        name        sensitive        value) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(14531        raw        project        false        tanae_osa_Predct) Tj
ET
endstream
endobj
221 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 222 0 R
>>
endobj
222 0 obj
<<
/Length 4684
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(14532        raw        input_file        false        DemandPlan_v1.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(14533        command        input_file        false        DemandPlan_v1.csv) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(14534        wrapper-external        project        false        /archive/projects/tanae_osa_Predct) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 701.6506299212597924 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 701.6506299212597924 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(**Herzlichen Glückwunsch  dein Workflow war erfolgreich!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(Das erkennst du an:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(- `status: Complete`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(- `exitCode: 0`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(- `Container history ... finished`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(- Keine Fehlermeldung, sondern Upload & Abschluss) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(Was bedeutet das konkret für dich?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(1. **Datei-Mapping und Skript-Aufruf passen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(   - Im Aufruf steht jetzt genau wie empfohlen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(     ```bash) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(     python3 /app/test.py DemandPlan_v1.csv /output) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(     ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(   - `DemandPlan_v1.csv` ist **ohne Resource-Pfad** als Argument übergeben!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(   - XNAT hat die Datei im Container unter `/input/DemandPlan_v1.csv` bereitgestellt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(   - Dein Skript hat funktioniert und einen Output produziert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(2. **Konfigurations-Kernpunkte, die jetzt stimmen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(   - Im REST-API Payload und Container-Start wird als `input_file` nur der reine) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(Dateiname mitgegeben \(**niemals ein Resource-Pfad**!\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(   - In der `command.json` ist das `inputs`-Feld korrekt mit `"mount": "input"` versehen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(\(sonst würde der Mount fehlen\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(   - Deine Automation \(und der XNAT-Container-Service\) funktioniert wie) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(vorgesehen, solange du immer nur den Dateinamen \(wie im "Manage Files"-Tab) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(sichtbar\) übergibst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(3. **Nachhaltigkeit:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(   - Mit diesem Muster kannst du jetzt **beliebige weitere Dateien/Workflows**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(automatisieren.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(   - Alle Container, Skripte und Ressourcen werden künftig gefunden, solange du) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(beim REST-Launch-Payload NUR den Dateinamen übergibst.) Tj
ET
endstream
endobj
223 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 224 0 R
>>
endobj
224 0 obj
<<
/Length 4068
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(4. **Good Practice für XNAT-Container-Workflows:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(   - **Dateimapping-Problem gelöst:** Übergebe am Input-File-Parameter im Payload) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(NUR den Dateinamen der Ressource, nicht den Resource-Pfad!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(   - Kontrolliere immer, ob das gewünschte File in der richtigen Resource \(= im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(Container-Mount sichtbar\) hochgeladen ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(### Wissenschaftlicher Kontext) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(Diese Lösung entspricht den Vorgaben des XNAT-Container-Service \("file inputs are) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(always made available to the container at the mount path plus file name"\) und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(generalisiert für alle vergleichbaren Automationslösungen mit Input-Files in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(Container-Umgebungen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(**Du hast jetzt einen robusten, auditierbaren Automations-Workflow!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Melde dich gern, wenn du weitere Szenarien \(mehrere Inputs, andere Mounts,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Output-Handling, Fehlerbehandlung\) optimieren möchtest.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Falls du möchtest, kann ich noch eine Checkliste/"Best Practice"-Box für dein Team) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(dazu formulieren!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 352.0506299212598833 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(stdout ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(View stdout \(from file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(Input file &#039;DemandPlan_v1.csv&#039; not found.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 240.15771653543311 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 240.15771653543311 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(**Trotz des erfolgreichen Workflows und korrekt gesetztem Dateinamen kann dein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(Skript die Datei `DemandPlan_v1.csv` im Container nicht finden.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(Das ist ein klassischer Fall von:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(- **Workflow \(Container, Exit-Code\) = erfolgreich**,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(- **aber Output: Datei wurde nicht gefunden**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(Das passiert häufig, wenn im *command-line* NICHT der volle Pfad) Tj
ET
endstream
endobj
225 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 226 0 R
>>
endobj
226 0 obj
<<
/Length 4050
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(\(`/input/DemandPlan_v1.csv`\) verwendet wird, sondern nur der Dateiname ohne das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(`/input/`-Verzeichnis.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(**WARUM?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(- XNAT mountet Input-Files immer nach `/input/Dateiname` \(bei "mount": "input"\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- **Im Container liegt die Datei niemals direkt als `DemandPlan_v1.csv` im) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Arbeitsverzeichnis, sondern als `/input/DemandPlan_v1.csv`.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Wenn dein Skript nach `"DemandPlan_v1.csv"` im aktuellen Directory sucht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(\(`open\("DemandPlan_v1.csv"\)` oder `os.path.isfile\("DemandPlan_v1.csv"\)`\), findet es) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(sie nicht.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(## **Was tun?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(### 1. **command-line** in `command.json` anpassen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(**Jetzt:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
("command-line": "python3 /app/test.py DemandPlan_v1.csv /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(**Muss sein:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
("command-line": "python3 /app/test.py /input/DemandPlan_v1.csv /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(**ODER Automatismus:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
("command-line": "python3 /app/test.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(Wobei **`#input_file#`** im Payload nur der reine Dateiname \("DemandPlan_v1.csv"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(bleibt.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
( I m   C o n t a i n e r   w i r d   d e r   P l a t z h a l t e r   e r s e t z t :  !   ` / i n p u t / D e m a n d P l a n _ v 1 . c s v ` .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(### 2. **Skript**: Argument 1 ist ein vollständiger Pfad) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Das Skript muss immer `sys.argv[1]` als `/input/DemandPlan_v1.csv` erhalten und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(darauf zugreifen.) Tj
ET
endstream
endobj
227 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 228 0 R
>>
endobj
228 0 obj
<<
/Length 3521
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Bequeme Debug-Zeile am Anfang einbauen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(print\("Dateien in /input:", os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(print\("sys.argv:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(## **CHECKLISTE**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(- In der command.json:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(  - `"command-line": "python3 /app/test.py /input/#input_file# /output"`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(- Automation/REST:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(  - `"input_file": "DemandPlan_v1.csv"`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(- Skript verwendet **`sys.argv[1]`** wie **`/input/DemandPlan_v1.csv`**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(## **Zusammenfassung der Fehlerursache**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(Im Container liegt die Datei immer in **/input/**, nie im Arbeitsverzeichnis.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(Wenn du **/input/#input_file#** als CLI-Argument übergibst, findet dein Skript die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Datei sauber.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(**Praxis-Tipp:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Im Container: `ls /input` sollte dir die Datei zeigen.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(`ls .` \(im aktuellen Arbeitsverzeichnis\) wird sie nicht zeigen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(**Fazit:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Passe den Command an wie oben beschrieben. Dann läuft dein Workflow) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(zuverlässig, das Skript findet die Datei und die Automation bleibt portabel und) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(XNAT-konform.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(> Wenn du möchtest, poste die relevante Zeile deiner aktuellen `command.json`) Tj
ET
endstream
endobj
229 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 230 0 R
>>
endobj
230 0 obj
<<
/Length 4787
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(\(command-line\), dann formuliere ich daraus die exakte Änderung für deinen Fall!) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 738.4506299212598606 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 710.1041732283464398 Td
(def create_json_file\(docker_image, script_filename, mod_data\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(    # Mapping Kontext &gt;&gt;external-input + as-a-child-of) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(    context_mappings = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(        &quot;xnat:projectData&quot;: {&quot;input_name&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(&quot;input_type&quot;: &quot;Project&quot;, &quot;child_of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(&quot;project&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(        &quot;xnat:subjectData&quot;: {&quot;input_name&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(&quot;input_type&quot;: &quot;Subject&quot;, &quot;child_of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(&quot;subject&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(        &quot;xnat:mrSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(        &quot;xnat:petSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(        &quot;xnat:ctSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(        &quot;xnat:imageScanData&quot;: {&quot;input_name&quot;: &quot;scan&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(&quot;input_type&quot;: &quot;Scan&quot;, &quot;child_of&quot;: &quot;scan&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(    # Dynamische Listen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(    external_inputs = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(    output_handlers = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(    used_inputs = set\(\)  # Duplikate vermeiden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    for context in mod_data[&quot;contexts&quot;]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(        mapping = context_mappings.get\(context\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(        if not mapping:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(            continue  # unbekannter Kontext wird übersprungen) Tj
ET
endstream
endobj
231 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 232 0 R
>>
endobj
232 0 obj
<<
/Length 4814
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        # External input nur einmal pro Name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        input_key = \(mapping[&quot;input_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(mapping[&quot;input_type&quot;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        if input_key not in used_inputs:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            external_inputs.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                &quot;name&quot;: mapping[&quot;input_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                &quot;type&quot;: mapping[&quot;input_type&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                &quot;required&quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            used_inputs.add\(input_key\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        output_handlers.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            &quot;as-a-child-of&quot;: mapping[&quot;child_of&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            &quot;label&quot;: &quot;Results&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            &quot;format&quot;: &quot;csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    # JSON zusammenbauen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    json_file = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        &quot;name&quot;: mod_data[&quot;command_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        &quot;description&quot;: mod_data[&quot;command_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        &quot;version&quot;: &quot;1.5&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        &quot;image&quot;: docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        &quot;command-line&quot;: f&quot;python3 /app/{script_filename} #input_file#) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(/output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            {&quot;name&quot;: &quot;input&quot;, &quot;path&quot;: &quot;/input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(&quot;writable&quot;: False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            {&quot;name&quot;: &quot;output&quot;, &quot;path&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(&quot;/output&quot;, &quot;writable&quot;: True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(            {) Tj
ET
endstream
endobj
233 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 234 0 R
>>
endobj
234 0 obj
<<
/Length 4867
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                &quot;name&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                &quot;description&quot;: &quot;Input file for analysis&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                &quot;mount&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(                &quot;select-values&quot;: [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        &quot;outputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(                &quot;description&quot;: &quot;Result file output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(                &quot;mount&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(                &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                &quot;name&quot;: wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(                &quot;label&quot;: mod_data[&quot;label_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                &quot;description&quot;: mod_data[&quot;label_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(                &quot;contexts&quot;: mod_data[&quot;contexts&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(                &quot;external-inputs&quot;: external_inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(                &quot;output-handlers&quot;: output_handlers) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    with open\(&quot;command.json&quot;, &quot;w&quot;\) as json_out:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        json.dump\(json_file, json_out, indent=4\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&quot; Corrected command.json created.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    return &quot;command.json&quot;) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 149.650629921259906 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 149.650629921259906 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(Sehr gut, dass du das vollständige `create_json_file` postest! Hier ist der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(entscheidende Fehler und die genaue Lösung:) Tj
ET
endstream
endobj
235 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 236 0 R
>>
endobj
236 0 obj
<<
/Length 3680
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(## Fehlerquelle in deiner command.json-Erstellung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Deine aktuelle input-Definition lautet:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    "required": True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    "mount": "input_file",      <-- DAS ist FALSCH!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    "select-values": []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Hier steht:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- `"mount": "input_file"`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Im "mounts"-Block hast du aber korrekt definiert:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
("mounts": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    {"name": "input", "path": "/input", "writable": False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    {"name": "output", "path": "/output", "writable": True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Das bedeutet:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(**Der Input muss an den Mount `"input"` \(nicht `"input_file"`\) gebunden werden!**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(Daher mountet XNAT dein Input-File aktuell überhaupt nicht in `/input`, sondern **gar) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(nicht** korrekt in den Container.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(## Lösung: Unbedingt den Mount-Namen korrigieren!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Korrigiere die entsprechende Stelle in deinem Python-Code auf:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        "inputs": [) Tj
ET
endstream
endobj
237 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 238 0 R
>>
endobj
238 0 obj
<<
/Length 4100
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(                "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(                "required": True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(                "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(                "mount": "input",       # <---- RICHTIG!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                "select-values": [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(Nur dann wird das Input-File als `/input/<Dateiname>` in den Container gemountet, so) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(wie es im Skript und in der XNAT-Standard-Convention erwartet wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(## Zusätzlich: command-line beachten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Dein command-line:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
("command-line": "python3 /app/<script_filename> #input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(WICHTIG:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
( X N A T   e r s e t z t   ` # i n p u t _ f i l e # `   d u r c h   d e n   * * D a t e i n a m e n * *   \( z . / B .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(`"DemandPlan_v1.csv"`\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Aber dein Skript sucht vermutlich unter `/input/<Dateiname>`.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Also setze die command-line besser auf:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
("command-line": "python3 /app/<script_filename> /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Oder, falls du es variabel halten willst:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    "command-line": f"python3 /app/{script_filename} /input/#input_file# /output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(Das ist die Standardpraxis für XNAT-Container-Service!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(---) Tj
ET
endstream
endobj
239 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 240 0 R
>>
endobj
240 0 obj
<<
/Length 3966
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(## Zusammengefasst: So muss dein Input-Block aussehen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    "inputs": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(            "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            "required": True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(            "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            "mount": "input",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            "select-values": [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Und:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    "mounts": [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        {"name": "input", "path": "/input", "writable": False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Und:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    "command-line": f"python3 /app/{script_filename} /input/#input_file# /output",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(## Fazit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- `"mount": "input"` in den inputs verwenden \(nicht `"input_file"`\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- In der command-line `/input/#input_file#` verwenden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(- Im REST-Launch nur den Dateinamen \(z.B. `"DemandPlan_v1.csv"`\) angeben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Damit funktioniert dein Workflow und das Input-File ist im Container korrekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(sichtbar.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(Falls du noch Fragen zum Zusammenspiel von command.json, Mounts und Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(hast, oder zu Tests in XNAT, melde dich gerne  ich helfe dir bei der vollständigen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(Automatisierung!) Tj
ET
endstream
endobj
241 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 242 0 R
>>
endobj
242 0 obj
<<
/Length 3985
>>
stream
0.5670000000000001 w
0 G
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 756.8506299212598378 Td
(View stdout \(from file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 738.4506299212598606 Td
(Input file &#039;DemandPlan_v1.csv&#039; not found.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 691.7041732283464626 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 663.3577165354330418 Td
(Das Problem bleibt bestehen, weil trotz der Anpassungen "Input file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 644.9577165354330646 Td
('DemandPlan_v1.csv' not found." ausgegeben wird.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(Das bedeutet:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 608.15771653543311 Td
(**Dein Skript sucht im aktuellen Arbeitsverzeichnis nach DemandPlan_v1.csv, findet) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 589.7577165354330191 Td
(die Datei aber nicht, da sie im Container unter `/input/DemandPlan_v1.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 571.3577165354330418 Td
(gemountet wird.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 534.5577165354330873 Td
(## Die Ursache) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 497.7577165354330759 Td
(- **XNAT mountet Input-Dateien unter `/input`** im Container, **_nicht_** im aktuellen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 479.3577165354330418 Td
(Arbeitsverzeichnis.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 460.9577165354330646 Td
(- Dein Skript wird mit `DemandPlan_v1.csv` als Argument aufgerufen \(das ist nur der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 442.5577165354330873 Td
(Dateiname\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 424.1577165354330532 Td
(- Dein Skript prüft jedoch `os.path.isfile\(input_file\)`, wobei `input_file ==) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 405.7577165354330759 Td
('DemandPlan_v1.csv'`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 387.3577165354330987 Td
(- Da die Datei nicht im aktuellen Arbeitsverzeichnis liegt, sondern unter `/input/`,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 368.9577165354330646 Td
(schlägt diese Prüfung fehl.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 332.15771653543311 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 295.3577165354330418 Td
(## Die Lösung) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 258.5577165354330873 Td
(#### **Variante A: Passe die `command-line` in deiner `command.json` an**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 240.15771653543311 Td
(**Statt:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 221.7577165354331328 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 203.3577165354330418 Td
("command-line": "python3 /app/test.py #input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 184.9577165354330646 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 166.5577165354330873 Td
(**muss stehen:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 148.15771653543311 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 129.7577165354331328 Td
("command-line": "python3 /app/test.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 111.3577165354331555 Td
(```) Tj
ET
endstream
endobj
243 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 244 0 R
>>
endobj
244 0 obj
<<
/Length 4011
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(Dadurch bekommt dein Skript als Argument **den gesamten Pfad** \(z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(`/input/DemandPlan_v1.csv`\) und findet die Datei.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(#### **Variante B: Oder passe das Skript an**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Wenn du die `command-line` nicht ändern möchtest, kannst du im Skript selbst den) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Input auf `/input/` mappen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    if len\(sys.argv\) < 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        print\("Usage: python test.py <input_file> <output_dir>"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    # Ergänzung: Prüfe, ob die Datei direkt gefunden wird,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    # sonst versuche es im /input/-Verzeichnis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if not os.path.isfile\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        input_file_candidate = os.path.join\('/input', input_file\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        if os.path.isfile\(input_file_candidate\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(            input_file = input_file_candidate) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            print\(f"Input file '{input_file}' not found."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(            print\("Dateien in /input:", os.listdir\('/input'\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(**Empfohlen wird jedoch, die `command-line` zu korrigieren!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Das verhindert unnötige Fehlerquellen und entspricht der XNAT-Best-Practice.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(## **Was tun?**) Tj
ET
endstream
endobj
245 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 246 0 R
>>
endobj
246 0 obj
<<
/Length 3535
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(**Setze \(meist automatisch im Python-Generator-Skript\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
("command-line": f"python3 /app/{script_filename} /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(in deiner ``command.json``.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Starte danach den Workflow neu.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(Jetzt wird die Datei immer gefunden  sofern sie tatsächlich in /input im Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(liegt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(**Kurz:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(- Die Datei liegt in /input/<Dateiname>) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(- Die `command-line` muss den vollen Pfad `/input/#input_file#` an dein Skript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(übergeben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(**Fazit:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(Passe die `command-line` an  dann funktioniert alles wie erwartet!  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(Falls du möchtest, poste deine aktuelle `command.json` oder die relevante Log-Zeile,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(dann erhältst du ein konkretes Beispiel.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 315.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(so sieht meine exteernal skript ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(    if len\(sys.argv\) &lt; 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(        print\(&quot;Usage: python test.py &lt;input_file&gt; &lt;output_dir&gt;&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(    input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(    output_dir = sys.argv[2]) Tj
ET
endstream
endobj
247 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 248 0 R
>>
endobj
248 0 obj
<<
/Length 4364
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if not os.path.isfile\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(f&quot;Input file &#039;{input_file}&#039; not found.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    # Erstelle das Output-Verzeichnis, falls es nicht existiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    # Erzeuge Output-Dateinamen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    name, ext = os.path.splitext\(os.path.basename\(input_file\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    output_filename = f&quot;{name}_result{ext}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    output_path = os.path.join\(output_dir, output_filename\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    # Lese und verarbeite die Eingabedatei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        with open\(input_file, &quot;r&quot;\) as infile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            content = infile.read\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(f&quot;Error reading input file: {e}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        with open\(output_path, &quot;w&quot;\) as outfile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            outfile.write\(f&quot;Processed content of {name}{ext}:\\n\\n&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            outfile.write\(content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        print\(f&quot;Wrote result to {output_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        print\(f&quot;Error writing output file: {e}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    # Zeige den Inhalt von /output mit Dateigröße) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    print\(&quot;\\n[DEBUG] Inhalt von /output:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        for f in os.listdir\(output_dir\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            full_path = os.path.join\(output_dir, f\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            size = os.path.getsize\(full_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            print\(f&quot;{f} - {size} bytes&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    except Exception as e:) Tj
ET
endstream
endobj
249 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 250 0 R
>>
endobj
250 0 obj
<<
/Length 3522
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(f&quot;Error listing /output: {e}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    main\(\)) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 683.2506299212598151 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(**Dein Problem:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(Dein Skript sucht die Eingabedatei **genau unter dem übergebenen Argument**, also) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(unter **DemandPlan_v1.csv** im *aktuellen Arbeitsverzeichnis*.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(Im XNAT-Container wird die Datei aber IMMER in **/input/** gemountet:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(- Richtig: `/input/DemandPlan_v1.csv`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(- Nicht vorhanden: `DemandPlan_v1.csv` \(im aktuellen Arbeitsverzeichnis, das) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(meistens `/app` ist\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(**Lösung 1: Korrigiere die command-line in der command.json**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(In deinem command.json \(und Python-Generator\) **muss** stehen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
("command-line": "python3 /app/test.py /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(Dadurch bekommt dein Skript als Argument den vollständigen Pfad) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(\(**/input/DemandPlan_v1.csv**\) übergeben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(Das Skript sucht dann direkt an der richtigen Stelle und alles funktioniert wie erwartet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(**Lösung 2: Skript automatisch an /input/ anpassen**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(Falls du aus irgendeinem Grund immer noch nur "DemandPlan_v1.csv" als Argument) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(bekommst, ergänze dies als Fallback \(weniger elegant als Lösung 1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(```python) Tj
ET
endstream
endobj
251 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 252 0 R
>>
endobj
252 0 obj
<<
/Length 4212
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(input_file = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(# Versuche, die Datei direkt zu finden, ansonsten im /input-Verzeichnis) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(if not os.path.isfile\(input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    alt_input_file = os.path.join\('/input', os.path.basename\(input_file\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    if os.path.isfile\(alt_input_file\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        print\(f"Input file not found at {input_file}, found at {alt_input_file}."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        input_file = alt_input_file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        print\(f"Input file '{input_file}' not found in working dir or /input."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\("Files in /input:", os.listdir\('/input'\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(**Empfohlen:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
( S e t z e   i m   c o m m a n d . j s o n   w i e   i n   L ö s u n g / 1   d e n   * * P f a d   / i n p u t / # i n p u t _ f i l e # * *   e i n .    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(So ist dein Container-Workflow universell XNAT-kompatibel und eindeutig.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**Zusammengefasst:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Command-Line in command.json:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(  `"command-line": "python3 /app/test.py /input/#input_file# /output"`) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(- Skript unverändert lassen \(so wie du es hast\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- XNAT findet immer die Datei, wenn der Dateiname korrekt übergeben wurde.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(**Falls trotzdem Probleme:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(Stelle sicher, dass **`/input/DemandPlan_v1.csv`** im Container wirklich existiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(\(notfalls logge dies kurz vor der Prüfung!\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(print\("Files in /input:", os.listdir\('/input'\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(print\("sys.argv:", sys.argv\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(```) Tj
ET
endstream
endobj
253 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 254 0 R
>>
endobj
254 0 obj
<<
/Length 4090
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Melde dich, falls die Datei weiterhin nicht gefunden wird  dann genügt ein Blick auf) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(die tatsächliche `command-line` aus dem Container-Log und den Inhalt von `/input`.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 701.6506299212597924 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
(kannst du bitte mir den Skript geben) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 626.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 598.2112598425196666 Td
(Sehr gerne! Hier ist ein **robustes, XNAT-kompatibles Skript**, das unabhängig) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 579.8112598425196893 Td
(davon funktioniert, ob die Eingabedatei **mit oder ohne Pfadangabe** \(also z.B.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 561.411259842519712 Td
(DemandPlan_v1.csv oder /input/DemandPlan_v1.csv\) übergeben wird. Es prüft bei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 543.0112598425196211 Td
(Fehlermeldung außerdem, was im /input-Verzeichnis liegt, damit du die Ursache) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 524.6112598425196438 Td
(direkt im Log siehst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 469.4112598425196552 Td
(import sys) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 451.0112598425196779 Td
(import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 414.2112598425196666 Td
(def find_input_file\(input_arg\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(    """) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(    Überprüft, ob das übergebene Argument eine existierende Datei ist.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 359.0112598425196779 Td
(    Testet zusätzlich automatisch im /input-Verzeichnis, falls die Datei im aktuellen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(Verzeichnis nicht gefunden wird.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 322.2112598425196666 Td
(    """) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(    # Fall 1: Datei existiert direkt unter angegebener Pfadangabe) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(    if os.path.isfile\(input_arg\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(        return input_arg) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 230.2112598425196666 Td
(    # Fall 2: Datei unter /input \(wird von XNAT normalerweise dahin gemountet\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(    candidate = os.path.join\("/input", os.path.basename\(input_arg\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 193.411259842519712 Td
(    if os.path.isfile\(candidate\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(        print\(f"[INFO] Eingabedatei nicht direkt gefunden, aber als {candidate}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(vorhanden."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(        return candidate) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(    # Fall 3: Datei nicht vorhanden) Tj
ET
endstream
endobj
255 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 256 0 R
>>
endobj
256 0 obj
<<
/Length 4135
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    print\(f"[ERROR] Eingabedatei '{input_arg}' wurde nicht gefunden!"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    # Gib zur Diagnose die vorhandenen Dateien im /input-Verzeichnis aus) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    if os.path.isdir\("/input"\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        print\("[DEBUG] Aktuelle Dateien in /input:", os.listdir\("/input"\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\("[DEBUG] Kein /input-Verzeichnis im Container vorhanden."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    if len\(sys.argv\) < 3:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        print\("Usage: python test.py <input_file> <output_dir>"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    input_arg = sys.argv[1]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    output_dir = sys.argv[2]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    # Robust suchen: Funktion oben nutzen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    input_file = find_input_file\(input_arg\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if input_file is None:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        print\("[ERROR] Analyse abgebrochen, da Eingabedatei fehlt."\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    # Output-Verzeichnis anlegen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    os.makedirs\(output_dir, exist_ok=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    # Output-Dateiname bauen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    name, ext = os.path.splitext\(os.path.basename\(input_file\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    output_filename = f"{name}_result{ext}") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    output_path = os.path.join\(output_dir, output_filename\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    # Datei lesen und verarbeiten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        with open\(input_file, "r"\) as infile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            content = infile.read\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(f"[ERROR] Fehler beim Lesen der Eingabedatei: {e}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        return) Tj
ET
endstream
endobj
257 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 258 0 R
>>
endobj
258 0 obj
<<
/Length 4502
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        with open\(output_path, "w"\) as outfile:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            outfile.write\(f"Processed content of {name}{ext}:\\n\\n"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            outfile.write\(content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\(f"[INFO] Ergebnis geschrieben nach {output_path}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        print\(f"[ERROR] Fehler beim Schreiben der Ausgabedatei: {e}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    # Zeige Inhalt des Output-Verzeichnisses an) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    print\("\\n[DEBUG] Inhalt von", output_dir\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        for f in os.listdir\(output_dir\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            full_path = os.path.join\(output_dir, f\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(            size = os.path.getsize\(full_path\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            print\(f"{f} - {size} bytes"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    except Exception as e:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        print\(f"[ERROR] Fehler beim Listen des Output-Verzeichnisses: {e}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**Erläuterung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(- Das Skript sucht automatisch mit und ohne /input/-Präfix nach der Datei.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(- Gibt es ein Problem, wird das /input-Verzeichnis zur schnellen Fehlerdiagnose) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(gelistet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Optimal für XNAT-Container-Service und automatisierte Workflows.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(**Empfohlen:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(Setze im `command.json` trotzdem immer  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(`"command-line": "python3 /app/test.py /input/#input_file# /output"`  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(und stelle sicher, dass du im REST-API-Call als `input_file` nur den Dateinamen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(\(ohne Pfad\) angibst.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(Aber das Skript funktioniert notfalls auch, wenn die Umgebungsvariable oder der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(Workflow anders arbeitet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(**Nutze dieses Skript als robusten Baustein für Portabilität in) Tj
ET
endstream
endobj
259 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 260 0 R
>>
endobj
260 0 obj
<<
/Length 3998
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(XNAT-Container-Umgebungen!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 738.4506299212598606 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 710.1041732283464398 Td
([ERROR] Eingabedatei &#039;DemandPlan_v1.csv&#039; wurde nicht gefunden!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 691.7041732283464626 Td
([DEBUG] Aktuelle Dateien in /input: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 673.3041732283463716 Td
([ERROR] Analyse abgebrochen, da Eingabedatei fehlt.) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 626.5577165354330873 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 626.5577165354330873 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 598.2112598425196666 Td
(Die Meldung  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 579.8112598425196893 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 561.411259842519712 Td
([ERROR] Eingabedatei 'DemandPlan_v1.csv' wurde nicht gefunden!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 543.0112598425196211 Td
([DEBUG] Aktuelle Dateien in /input: []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 524.6112598425196438 Td
([ERROR] Analyse abgebrochen, da Eingabedatei fehlt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 506.2112598425196666 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 487.8112598425196893 Td
(bedeutet:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 469.4112598425196552 Td
(**Auch der aktualisierte, robuste Suchmechanismus hat keine Datei im Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 451.0112598425196779 Td
(gefunden  das Verzeichnis /input ist LEER.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 414.2112598425196666 Td
(Das Skript ist korrekt und funktioniert, **wenn überhaupt eine Datei beim) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 395.8112598425196893 Td
(Containerstart ins /input gemountet wird.**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 377.411259842519712 Td
(**Dass /input leer ist, ist ein Infrastrukturproblem, kein Softwarefehler im Skript**.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 340.6112598425197007 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 303.8112598425196893 Td
(### Was ist der Grund?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 285.411259842519712 Td
(**Die Datei DemandPlan_v1.csv**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 267.0112598425197348 Td
(- liegt im XNAT-Projekt \(Resource CSV oder input\),  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 248.6112598425196438 Td
(- wird aber beim Containerstart NICHT nach /input in den Container gemountet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 211.8112598425196893 Td
(**Typische Ursachen in XNAT/Container Service:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 175.0112598425197348 Td
(1. **Im XNAT Launch/REST-Aufruf wird die Datei nicht korrekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 156.6112598425197575 Td
(ausgewählt/übergeben.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 138.2112598425196666 Td
(2. **Im command.json fehlt `"mount": "input"` am Input-File.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 119.8112598425196893 Td
(3. **Im command-line steht der Dateiname falsch \(siehe vorangegangene) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 101.4112598425195984 Td
(Hinweise\).**) Tj
ET
endstream
endobj
261 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 262 0 R
>>
endobj
262 0 obj
<<
/Length 4299
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(4. **Die Datei heißt im XNAT anders \(z.B. Groß-/Kleinschreibung, Tippfehler, anderer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(Resource-Ordner als erwartet\).**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(5. **Es gibt \(noch\) keine einzige Datei in dieser Session/Project-Resource.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(## Systematische Problemanalyse) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(#### 1. **Stimmt command.json und REST-Aufruf?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(- Im command.json unter inputs MUSS stehen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(  ```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(  {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    "mount": "input",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(  }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(- Im REST-Aufruf/payload MUSS stehen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(  ```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(  "input_file": "DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(  **\(NICHT mit Resource- oder Verzeichnis-Präfix!\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(#### 2. **Im XNAT-Webinterface wirklich in der Session/Resource hochgeladen?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
( -   N a v i g i e r e   i m   W e b i n t e r f a c e   a u f   D e i n e   S e s s i o n  !    M a n a g e   F i l e s   !   R e s o u r c e   \( z . B .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(CSV\).  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(- Gibt es dort GENAU DemandPlan_v1.csv?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Richtige Groß-/Kleinschreibung im Dateinamen?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(#### 3. **Was sagt das Container-Mounting?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(- Im XNAT-Container-Log: Ist das Input-Mount auf /input gesetzt?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- In Deiner Container information siehst Du:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(  container-host-path        /data/xnat/build/.....        /input) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(  Wenn das richtig ist UND die Datei im Quell-Verzeichnis liegt, müsste sie sichtbar) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(sein.) Tj
ET
endstream
endobj
263 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 264 0 R
>>
endobj
264 0 obj
<<
/Length 3984
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(  Prüfe auch am Host:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(  ls /data/xnat/build/<id>   # \(dort wo /input gemountet wird\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(  ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(#### 4. **REST-API-Test:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Hole Dir per REST alle Resource-Dateien der Session:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(```sh) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(curl -u user:pass https://xnat-url/data/experiments/<session-id>/resources/CSV/files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(!   T a u c h t    D e m a n d P l a n _ v 1 . c s v    a u c h   w i r k l i c h   i n   d e r   A P I - A n t w o r t   a u f ?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(### **Lösungsschritte**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(**a\)** Liegt die Datei nicht in der richtigen Resource?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(!   L a d e   s i e   p e r   W e b - O b e r f l ä c h e   i n   d i e   g e w ü n s c h t e   S e s s i o n   n a c h .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(**b\)** Im JSON für den Containerstart stimmt der Wert input_file nicht?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(!   G i b   N U R   d e n   D a t e i n a m e n   a n .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(**c\)** Fehlt `"mount": "input"` in command.json?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(!   K o r r i g i e r e   c o m m a n d . j s o n   u n d   l a d e   d i e   D a t e i   a n   X N A T   n e u   h o c h .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(**d\)** Falsche Session/Project-Resource?  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(!   P r ü f e   d i e   Z u o r d n u n g   i m   W e b i n t e r f a c e   u n d   a n   d e r   A P I .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(### FAZIT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(- **Das Skript ist korrekt.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(- Das eigentliche Problem ist, dass die Input-Datei gar nicht im /input im Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(landet.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- Ursache liegt zu 99% in der Ressourcen-Zuordnung im XNAT-Workflow, nicht in) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(deinem Python-Code.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(> **Korrigiere File-Zuordnung, command.json und deinen API-Payload.  ) Tj
ET
endstream
endobj
265 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 266 0 R
>>
endobj
266 0 obj
<<
/Length 4787
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(> Danach wird die Datei gefunden und das Skript läuft durch.**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(**Wenn du Details \(Kommando/Logs\) posten magst, helfe ich beim Auffinden des) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Dateimappings im XNAT gern direkt weiter!**) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(Bousfiha, Tanae:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(#-----------------Bibliotheken-------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(----------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(import json # wir brauchen json für xnat damit er den Command anlegen kann) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(import requests  # type: ignore # # für die Kommunikation mit der XNAT-API) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(import os #Arbeiten mit Dateien und Pfaden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 562.904173228346508 Td
(import subprocess  # # für die Ausführung von Docker-Befehlen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(import getpass #Passwort-Eingabe im Terminal ohne Anzeige) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(import sys#Für sys.exit\(\) bei Fehlern) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(import urllib3# type: ignore #Wird von requests genutzt  hier zur Abschaltung von) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 489.3041732283464853 Td
(Warnungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(urllib3.disable_warnings\(urllib3.exceptions.InsecureRequestWarning\)# Deaktiviert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 452.5041732283464739 Td
(SSL-Warnungen, wenn XNAT ohne gültiges Zertifikat läuft) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(#-----------------------------------1\)dockerfile) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 415.7041732283464626 Td
(ausfüllen------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(def write_dockerfile\(docker_dir, script_filename,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
(docker_base_image=&quot;python:3.10-slim&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(    dockerfile_content = f&quot;&quot;&quot;FROM {docker_base_image}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(WORKDIR /app) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(COPY {script_filename} /app/{script_filename}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(COPY requirements.txt /app/requirements.txt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(RUN pip install --no-cache-dir -r /app/requirements.txt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(CMD [&quot;python3&quot;, &quot;/app/{script_filename}&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(&quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(    dockerfile_path = os.path.join\(docker_dir, &quot;Dockerfile&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
(    with open\(dockerfile_path, &quot;w&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(        f.write\(dockerfile_content\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(    print\(f&quot;Dockerfile geschrieben nach {dockerfile_path}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 102.904173228346508 Td
(    return dockerfile_path) Tj
ET
endstream
endobj
267 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 268 0 R
>>
endobj
268 0 obj
<<
/Length 4724
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(#--------------------------------------2\)Image bauen&gt;&gt;pushen&gt;&gt;taggen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(--------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(def build_image\(dockerfile_path, docker_image_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    dockerhub_username = input\(&quot;Docker Hub username \(to push the image\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(&quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    if not dockerhub_username:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(&quot;No Docker Hub username provided.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        return docker_image_name  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    #&gt;&gt;Ersat form zum : docker build -f Dockerfile -t docker_image_name .) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    print\(f&quot;Building Docker image &#039;{docker_image_name}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    build_result = subprocess.run\([&quot;docker&quot;, &quot;build&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(&quot;-f&quot;, dockerfile_path, &quot;-t&quot;, docker_image_name, &quot;.&quot;], ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    #Fehler Behandlungspart) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    if build_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        print\(f&quot;Build failed:\\n{build_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    print\(f&quot;Image &#039;{docker_image_name}&#039; built successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
( #-------------------------------/Tag/Push/------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(--------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
( ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    full_tag = f&quot;{dockerhub_username}/{docker_image_name}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    print\(f&quot;Tagging image as &#039;{full_tag}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    tag_result = subprocess.run\([&quot;docker&quot;, &quot;tag&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(docker_image_name, full_tag], capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if tag_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(f&quot;Tagging failed:\\n{tag.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    print\(f&quot;Pushing image to Docker Hub as &#039;{full_tag}&#039;...&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    push_result = subprocess.run\([&quot;docker&quot;, &quot;push&quot;, full_tag],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(capture_output=True, text=True\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    print\(push_result\)) Tj
ET
endstream
endobj
269 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 270 0 R
>>
endobj
270 0 obj
<<
/Length 4642
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    #Fehler Behadlungspart) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if push_result.returncode != 0:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(f&quot;Push failed:\\n{push_result.stderr}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    print\(f&quot;Image successfully pushed: {full_tag}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    return full_tag ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(#-----------------------------------3\)User-Input-----------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(-----------------------------------------   ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(#prepare the input for the json command ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(def get_input\(prompt\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        value = input\(prompt\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        if value.strip\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            return value) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            print\(&quot;Cannot be empty.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(#----------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(def modification\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    context_options = [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        \(&quot;xnat:subjectData&quot;, &quot;Subject-Ebene \(Patientenebene\)&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        \(&quot;xnat:mrSessionData&quot;, &quot;MRI-Session-Ebene \(häufigste) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(Session-Ebene\)&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        \(&quot;xnat:petSessionData&quot;, &quot;PET-Session-Ebene&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        \(&quot;xnat:ctSessionData&quot;, &quot;CT-Session-Ebene&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        \(&quot;xnat:imageScanData&quot;, &quot;Scan-Ebene innerhalb einer) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(Session&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        \(&quot;xnat:projectData&quot;, &quot;Projekt-Ebene&quot;\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    print\(&quot;\\nWähle einen Kontext:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    #--------------------Enumerate those Contextes----------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    #https://www.coursera.org/tutorials/enumerate-python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    for i, \(context, options\) in enumerate\(context_options, 1\):) Tj
ET
endstream
endobj
271 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 272 0 R
>>
endobj
272 0 obj
<<
/Length 4780
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(f&quot;{i} : {context},{options}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        context_input = input\(&quot;Nummer eingeben: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            i = int\(context_input.strip\(\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            if i &lt; 1 or i &gt; len\(context_options\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                raise ValueError) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(            selected_context = context_options[i-1][0]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(            break) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        except Exception:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(            print\(&quot;Ungültige Eingabe. Bitte erneut versuchen.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    # Zusätzliche Eingaben einholen:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    command_name = input\(&quot;Name des Commands: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    command_description = input\(&quot;Beschreibung des Commands: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    # Ausgabe oder Rückgabe eines Dictionaries mit den benötigten Werten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    return {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        &quot;selected_context&quot;: selected_context,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        &quot;command_name&quot;: command_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        &quot;command_description&quot;: command_description) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(# es wiederholt sich weil in der jsoncommand muss mehr als eine varial geschreiben) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(werden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(#und ich wollte nicht dass der user meher mals etwas ähnliches schreibt, deshalb) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(habe ich es so gemacht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(#-----------------------------------4\)json File erstellen-------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(def create_json_file\(docker_image, script_filename, mod_data\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    # Mapping Kontext &gt;&gt;external-input + as-a-child-of) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    context_mappings = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        &quot;xnat:projectData&quot;: {&quot;input_name&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(&quot;input_type&quot;: &quot;Project&quot;, &quot;child_of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&quot;project&quot;},) Tj
ET
endstream
endobj
273 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 274 0 R
>>
endobj
274 0 obj
<<
/Length 4811
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        &quot;xnat:subjectData&quot;: {&quot;input_name&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(&quot;input_type&quot;: &quot;Subject&quot;, &quot;child_of&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(&quot;subject&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        &quot;xnat:mrSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        &quot;xnat:petSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        &quot;xnat:ctSessionData&quot;: {&quot;input_name&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(&quot;session&quot;, &quot;input_type&quot;: &quot;Session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(&quot;child_of&quot;: &quot;session&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        &quot;xnat:imageScanData&quot;: {&quot;input_name&quot;: &quot;scan&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(&quot;input_type&quot;: &quot;Scan&quot;, &quot;child_of&quot;: &quot;scan&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    # Dynamische Listen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    external_inputs = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    output_handlers = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    used_inputs = set\(\)  # Duplikate vermeiden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    for context in mod_data[&quot;contexts&quot;]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        mapping = context_mappings.get\(context\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        if not mapping:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            continue  # unbekannter Kontext wird übersprungen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        # External input nur einmal pro Name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        input_key = \(mapping[&quot;input_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(mapping[&quot;input_type&quot;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        if input_key not in used_inputs:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(            external_inputs.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                &quot;name&quot;: mapping[&quot;input_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                &quot;type&quot;: mapping[&quot;input_type&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                &quot;required&quot;: True) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            used_inputs.add\(input_key\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        output_handlers.append\({) Tj
ET
endstream
endobj
275 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 276 0 R
>>
endobj
276 0 obj
<<
/Length 5104
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            &quot;name&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            &quot;accepts-command-output&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            &quot;as-a-child-of&quot;: mapping[&quot;child_of&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            &quot;type&quot;: &quot;Resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            &quot;label&quot;: &quot;Results&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            &quot;format&quot;: &quot;csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    # JSON zusammenbauen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    json_file = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        &quot;name&quot;: mod_data[&quot;command_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        &quot;description&quot;: mod_data[&quot;command_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        &quot;version&quot;: &quot;1.5&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        &quot;type&quot;: &quot;docker&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        &quot;image&quot;: docker_image,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        &quot;command-line&quot;: f&quot;python3 /app/{script_filename} #input_file#) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(/output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        &quot;mounts&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            {&quot;name&quot;: &quot;input&quot;, &quot;path&quot;: &quot;/input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(&quot;writable&quot;: False},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            {&quot;name&quot;: &quot;output&quot;, &quot;path&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(&quot;/output&quot;, &quot;writable&quot;: True}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        &quot;inputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                &quot;name&quot;: &quot;input_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                &quot;required&quot;: True,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                &quot;description&quot;: &quot;Input file for analysis&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                &quot;mount&quot;: &quot;input&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                &quot;select-values&quot;: [],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        &quot;outputs&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                &quot;name&quot;: &quot;result_file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                &quot;type&quot;: &quot;file&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(                &quot;description&quot;: &quot;Result file output&quot;,) Tj
ET
endstream
endobj
277 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 278 0 R
>>
endobj
278 0 obj
<<
/Length 4754
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                &quot;mount&quot;: &quot;output&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                &quot;path&quot;: &quot;result.csv&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        ],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        &quot;xnat&quot;: [) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(            {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(                &quot;name&quot;: wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(                &quot;label&quot;: mod_data[&quot;label_name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(                &quot;description&quot;: mod_data[&quot;label_description&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(                &quot;contexts&quot;: mod_data[&quot;contexts&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(                &quot;external-inputs&quot;: external_inputs,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(                &quot;output-handlers&quot;: output_handlers) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        ]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    with open\(&quot;command.json&quot;, &quot;w&quot;\) as json_out:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        json.dump\(json_file, json_out, indent=4\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        print\(&quot; Corrected command.json created.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    return &quot;command.json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(#---------------------5\)Command zu XNAT senden------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(def send_json_to_xnat\(json_file_path, xnat_url, xnat_user, xnat_password\): ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    url = f&quot;{xnat_url}/xapi/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    print\(f&quot;Uploading command to {url}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    with open\(json_file_path, &quot;r&quot;\) as f:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        response = requests.post\(url, auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(json=json.load\(f\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if response.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(&quot;Command uploaded successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    elif response.status_code == 201:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        print\(&quot;Command created successfully.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    elif response.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(&quot;Command already exists.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(f&quot;Failed to upload command: {response.status_code} -) Tj
ET
endstream
endobj
279 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 280 0 R
>>
endobj
280 0 obj
<<
/Length 5102
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
({response.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(#-----------------------------------6\)Command-Liste-----------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(-------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(def get_command_id_by_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(command_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands&quot;#Baut die) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(vollständige URL zur Command-Liste der XNAT REST-API&gt;&gt;keinen doppelten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(Schrägstrich gibt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)# wird hier) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(die get me request benutzt laut der APIS ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        print\(f&quot;Error fetching commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    data = resp.json\(\)# # Die Antwort wird als JSON interpretiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    if isinstance\(data, dict\) and &quot;commands&quot; in data:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        command_list = data[&quot;commands&quot;]# # Wenn die Antwort ein) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(Dictionary ist, das &quot;commands&quot; enthält, dann wird es extrahiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        command_list = data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    for command in command_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        if command.get\(&quot;name&quot;\) == command_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            return command[&quot;id&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    print\(&quot;Command not found.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(#----------------------7\)Wrapper auslesen/erstellen---------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(---------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(def get_command_id\(xnat_host, xnat_user, xnat_password, command_id\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands/{command_id}&quot;#url) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(wird zusammengebaut, um die spezifischen Informationen für den Command zu) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(erhalten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(verify=False\)#GET-Anfrage an die XNAT-API gesendet) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(f&quot;Fehler beim Abrufen des Commands: {resp.status_code}&quot;\)) Tj
ET
endstream
endobj
281 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 282 0 R
>>
endobj
282 0 obj
<<
/Length 5008
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        sys.exit\(1\)# # Überprüfen des Statuscodes der Antwort) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    cmd = resp.json\(\)# # Die Antwort wird als JSON interpretiert) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    outputs = cmd.get\(&quot;outputs&quot;, []\)# # Extrahieren der Outputs aus dem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(Command) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    external_inputs = []# # Initialisieren der externen Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    derived_inputs = []# # Initialisieren der abgeleiteten Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    for wrapper in cmd.get\(&quot;xnat&quot;, []\):# # Durchlaufen der) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(&quot;xnat&quot;-Sektion des Commands) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        external_inputs = wrapper.get\(&quot;external-inputs&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        derived_inputs = wrapper.get\(&quot;derived-inputs&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        break  # Nur den ersten Wrapper verwenden) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    return outputs, external_inputs, derived_inputs# # Rückgabe der Outputs, externen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(Inputs und abgeleiteten Inputs) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(#-------------------------------------- 8\)get_wrapper_id_by_command_name---------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(def get_wrapper_id_by_command_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(command_name, wrapper_name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(f&quot;Fehler beim Abrufen der Commands: {resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    data = resp.json\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    if isinstance\(data, dict\) and &quot;commands&quot; in data:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        commands = data[&quot;commands&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        commands = data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    for command in commands:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        if command.get\(&quot;name&quot;\) == command_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            for wrapper in command.get\(&quot;xnat&quot;, []\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                if wrapper.get\(&quot;name&quot;\) == wrapper_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(                    return wrapper.get\(&quot;id&quot;\) or wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(            for wrapper in command.get\(&quot;wrappers&quot;, []\):) Tj
ET
endstream
endobj
283 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 284 0 R
>>
endobj
284 0 obj
<<
/Length 4279
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(                if wrapper.get\(&quot;name&quot;\) == wrapper_name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(                    return wrapper.get\(&quot;id&quot;\) or wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    print\(&quot;Kein Wrapper für diesen Command gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    sys.exit\(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#----------------------9\)Wrapper Aktivierung---------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def enable_wrapper_sitewide\(xnat_host, command_id, wrapper_name, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    Aktiviert den Wrapper global \(für alle Projekte\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/commands/{command_id}/wrap) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(pers/{wrapper_name}/enabled&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    resp = requests.put\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; wurde global) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; war bereits global) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f&quot;Fehler beim globalen Aktivieren: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(def enable_wrapper_for_project\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(    Aktiviert den Wrapper für ein bestimmtes Projekt.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/xapi/projects/{project_id}/commands/) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
({command_id}/wrappers/{wrapper_name}/enabled&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    resp = requests.put\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
endstream
endobj
285 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 286 0 R
>>
endobj
286 0 obj
<<
/Length 4756
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if resp.status_code == 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; wurde im Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(&#039;{project_id}&#039; aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    elif resp.status_code == 409:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(f&quot;Wrapper &#039;{wrapper_name}&#039; war bereits im Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(aktiviert.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        print\(f&quot;Fehler beim Aktivieren für das Projekt: {resp.status_code} -) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
({resp.text}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(#----------------------------------------10\)get_input_file-------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(#Je nachdem, welcher Kontext gewählt wird, wird die Datei aus diesem Kontext) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(geholt. ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(def get_input_files\(xnat_host, entity_id, entity_type, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(scan_id=None\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    Gibt alle Dateien vom angegebenen XNAT-Objekt zurück \(OHNE) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(Benutzerauswahl\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    # REST-Pfad je nach Kontexttyp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        base_url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/projects/{entity_id}/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        base_url =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/subjects/{entity_id}/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    elif entity_type in [&quot;session&quot;, &quot;experiment&quot;]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        base_url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{entity_id}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    elif entity_type == &quot;scan&quot; and scan_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        base_url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{entity_id}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(/scans/{scan_id}/resources&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        print\(&quot;Unbekannter oder nicht unterstützter Entitätstyp.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        return []) Tj
ET
endstream
endobj
287 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 288 0 R
>>
endobj
288 0 obj
<<
/Length 5105
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    resp = requests.get\(base_url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        print\(f&quot;Fehler beim Abrufen der Ressourcen \({entity_type}\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    resources = resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    all_files = []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    for resource in resources:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        res_label = resource[&quot;label&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        file_url = f&quot;{base_url}/{res_label}/files&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        file_resp = requests.get\(file_url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        if file_resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(            continue) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        files = file_resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        for f in files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            all_files.append\({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(                &quot;name&quot;: f[&quot;Name&quot;],) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                &quot;uri&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(f&quot;{base_url}/{res_label}/files/{f[&#039;Name&#039;]}&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(                &quot;resource&quot;: res_label) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            }\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    return all_files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(#------------------------------------------------- Entities auflisten und auswählen) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(lassen----------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(def select_entity\(entities, id_key=&quot;ID&quot;, name_key=&quot;label&quot;\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    if not entities:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        print\(&quot;Keine Entities gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        return None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    print\(&quot;Verfügbare Entities:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    for idx, entity in enumerate\(entities, 1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        print\(f&quot;{idx}: {entity.get\(id_key, &#039;---&#039;\)} \({entity.get\(name_key,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(&#039;&#039;\)}\)&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        choice = input\(f&quot;Wähle eine Entity \(1-{len\(entities\)}\): &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        if choice.isdigit\(\) and 1 &lt;= int\(choice\) &lt;= len\(entities\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(            return entities[int\(choice\)-1]) Tj
ET
endstream
endobj
289 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 290 0 R
>>
endobj
290 0 obj
<<
/Length 5400
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        print\(&quot;Ungültige Auswahl!&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(#-------------------------------------------------------Datei-Auswahl-Menü-----------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(def select_files_from_list\(all_files\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    if not all_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        print\(&quot;Keine Dateien gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    print\(&quot;Verfügbare Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    for idx, f in enumerate\(all_files, 1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        print\(f&quot;{idx}: {f[&#039;name&#039;]} [Resource:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
({f[&#039;resource&#039;]}]&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        choice = input\(&quot;Welche Datei\(en\) sollen verwendet werden? Gib Nummern) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(ein \(z.B. 1,3,5\): &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        indices = [c.strip\(\) for c in choice.split\(&quot;,&quot;\) if c.strip\(\)]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        if all\(i.isdigit\(\) and 1 &lt;= int\(i\) &lt;= len\(all_files\) for i in indices\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            unique_indices = list\(set\(int\(i\) for i in indices\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(            selected = [all_files[i-1] for i in unique_indices]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            print\(&quot;Ausgewählt:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            for s in selected:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(                print\(f&quot;- {s[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            return selected) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        print\(&quot;Ungültige Auswahl.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
( #---------------------------------sessions_for_project---------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(def get_sessions_for_project\(xnat_host, project_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    Listet alle Sessions \(Experimente\) für ein Projekt auf.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    &quot;&quot;&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/projects/{project_id}/experiment) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(s?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        print\(f&quot;Fehler beim Abrufen der Sessions für Projekt {project_id}:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    return resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(#---------------------------------------------------------------------------------------------------------) Tj
ET
endstream
endobj
291 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 292 0 R
>>
endobj
292 0 obj
<<
/Length 4994
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(def get_subjects_for_project\(xnat_host, project_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/projects/{project_id}/subjects?fo) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(rmat=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        print\(f&quot;Fehler beim Abrufen der Subjects für Projekt {project_id}:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    return resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(def get_scans_for_session\(xnat_host, session_id, xnat_user, xnat_password\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    url = f&quot;{xnat_host.rstrip\(&#039;/&#039;\)}/data/experiments/{session_id}/scans) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(?format=json&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    resp = requests.get\(url, auth=\(xnat_user, xnat_password\), verify=False\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    if resp.status_code != 200:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\(f&quot;Fehler beim Abrufen der Scans für Session {session_id}:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
({resp.status_code}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    return resp.json\(\).get\(&quot;ResultSet&quot;, {}\).get\(&quot;Result&quot;, []\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(#---------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(def is_valid_filename\(name\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    return &quot;\(&quot; not in name and &quot;\)&quot; not in name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(#----------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(----------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(def launch_container_rest\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                          entity_id, xnat_user, xnat_password, input_file_info,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                          entity_type=&quot;session&quot;, scan_id=None\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    # --- Prüfe Dateinamen-Validität ---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    if not is_valid_filename\(input_file_info[&quot;name&quot;]\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        print\(f&quot;Ungültiger Dateiname) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(&#039;{input_file_info[&#039;name&#039;]}&#039;. Erlaubt sind keine &#039;\(&#039;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(oder &#039;\)&#039;.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;} ) Tj
ET
endstream
endobj
293 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 294 0 R
>>
endobj
294 0 obj
<<
/Length 4468
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    root_path_mapping = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(        &quot;session&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        &quot;subject&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        &quot;project&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        &quot;scan&quot;: &quot;scan&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    root_type = root_path_mapping.get\(entity_type\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(    if not root_type:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        print\(f&quot;Containerstart für entity_type &#039;{entity_type}&#039; wird nicht) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(unterstützt.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    url = f&quot;{xnat_host}/xapi/projects/{project_id}/commands/{command_id}/wrapp) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(ers/{wrapper_name}/root/{root_type}/launch&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    input_file_path = input_file_info[&quot;name&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    if entity_type == &quot;scan&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        if not scan_id:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(            print\(&quot;Scan-ID fehlt für den Scan-Kontext.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}/scans/{scan_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    elif entity_type == &quot;session&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        xnat_entity_path = f&quot;/experiments/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        xnat_entity_path = f&quot;/subjects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    elif entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(        xnat_entity_path = f&quot;/projects/{entity_id}&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        print\(&quot;Unbekannter entity_type. Abbruch.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        &quot;input_file&quot;: input_file_path,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        &quot;project&quot;: project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    }) Tj
ET
endstream
endobj
295 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 296 0 R
>>
endobj
296 0 obj
<<
/Length 4712
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(    print\(&quot;Launching container :&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    print\(json.dumps\(payload, indent=2\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    response = requests.post\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        url,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        auth=\(xnat_user, xnat_password\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        headers=headers,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        json=payload,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        verify=False) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    if response.status_code in [200, 201, 202]:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(        print\(&quot;Container wurde erfolgreich über die REST-API gestartet.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(        print\(f&quot;Fehler beim Containerstart \({response.status_code}\):&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        print\(response.text\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(#-----------------------------------------------Main Teil-----------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(def select_files\(all_files\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    if not all_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(        print\(&quot;Keine verfügbaren Dateien gefunden.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        return []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    print\(&quot;Verfügbare Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(    for idx, f in enumerate\(all_files, start=1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        print\(f&quot;{idx}: {f[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(    while True:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        choice = input\(&quot;Nummern der Dateien auswählen \(z.B. 1,3,5\): &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(        indices = [c.strip\(\) for c in choice.split\(&#039;,&#039;\) if c.strip\(\)]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        if all\(i.isdigit\(\) and 1 &lt;= int\(i\) &lt;= len\(all_files\) for i in indices\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(            unique_indices = list\(set\(int\(i\) for i in indices\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(            selected_files = [all_files[i-1] for i in unique_indices]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            print\(&quot;Ausgewählte Dateien:&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            for s in selected_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(                print\(f&quot;- {s[&#039;name&#039;]}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(            return selected_files) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        else:) Tj
ET
endstream
endobj
297 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 298 0 R
>>
endobj
298 0 obj
<<
/Length 4179
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(            print\(&quot;Ungültige Auswahl. Bitte wiederholen.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(#----------------------------------------result_files-----------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(#-------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(def main\(\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    import os) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(    import getpass) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    xnat_host = &quot;https://xnat-dev.gwdg.de&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    docker_base_image = &quot;python:3.10&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    xnat_user = get_input\(&quot;XNAT Username: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(    xnat_password = getpass.getpass\(&quot;XNAT Password: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    project_id = get_input\(&quot;Project ID: &quot;\).strip\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    script_path = get_input\(&quot;Path to the Python script: &quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    # Step 1: Gather Command/Wrapper Data) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    mod_data = modification\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    mod_data[&quot;contexts&quot;] = [mod_data[&quot;selected_context&quot;]]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    mod_data[&quot;label_name&quot;] = mod_data[&quot;command_name&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(    mod_data[&quot;label_description&quot;] =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(mod_data[&quot;command_description&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(    wrapper_name = mod_data[&quot;command_name&quot;].replace\(&quot; &quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(&quot;_&quot;\).lower\(\) + &quot;_wrapper&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    # Step 2: Prepare and upload Docker image and command) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    dockerfile_path = write_dockerfile\(&quot;.&quot;, os.path.basename\(script_path\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(docker_base_image\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(    local_image_name =) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(f&quot;{mod_data[&#039;command_name&#039;].lower\(\).replace\(&#039; &#039;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(&#039;_&#039;\)}:latest&quot;) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(    full_image_name = build_image\(dockerfile_path, local_image_name\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(    json_file_path = create_json_file\(full_image_name, os.path.basename\(script_path\),) Tj
ET
endstream
endobj
299 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 300 0 R
>>
endobj
300 0 obj
<<
/Length 4972
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(mod_data\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(    send_json_to_xnat\(json_file_path, xnat_host, xnat_user, xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(    command_id = get_command_id_by_name\(xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(mod_data[&quot;command_name&quot;]\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(    try:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        wrapper_id = get_wrapper_id_by_command_name\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(            xnat_host, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(mod_data[&quot;command_name&quot;], wrapper_name) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        print\(f&quot;Wrapper already exists: {wrapper_id}&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(    except SystemExit:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        print\(&quot;Wrapper not found&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        outputs, external_inputs, derived_inputs = get_command_id\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(            xnat_host, xnat_user, xnat_password, command_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    enable_wrapper_sitewide\(xnat_host, command_id, wrapper_name, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    enable_wrapper_for_project\(xnat_host, project_id, command_id, wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(xnat_user, xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(    CONTEXT_ENTITY_MAPPING = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        &quot;xnat:projectData&quot;: {&quot;entity_type&quot;: &quot;project&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(&quot;id_label&quot;: &quot;Project ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        &quot;xnat:subjectData&quot;: {&quot;entity_type&quot;: &quot;subject&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(&quot;id_label&quot;: &quot;Subject ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        &quot;xnat:mrSessionData&quot;: {&quot;entity_type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(&quot;session&quot;, &quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        &quot;xnat:petSessionData&quot;: {&quot;entity_type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(&quot;session&quot;, &quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        &quot;xnat:ctSessionData&quot;: {&quot;entity_type&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(&quot;session&quot;, &quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(        &quot;xnat:sessionData&quot;: {&quot;entity_type&quot;: &quot;session&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(&quot;id_label&quot;: &quot;Session ID&quot;},) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        &quot;xnat:imageScanData&quot;: {&quot;entity_type&quot;: &quot;scan&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&quot;id_label&quot;: &quot;Session ID + Scan ID&quot;},) Tj
ET
endstream
endobj
301 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 302 0 R
>>
endobj
302 0 obj
<<
/Length 4309
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        &quot;xnat:resource&quot;: {&quot;entity_type&quot;: &quot;resource&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(&quot;id_label&quot;: &quot;Resource \(not supported\)&quot;}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    }) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(    first_context = mod_data[&quot;contexts&quot;][0]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(    context_info = CONTEXT_ENTITY_MAPPING.get\(first_context\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(    if not context_info:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        print\(f&quot;Unknown context: {first_context}. Aborting.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(    entity_type = context_info[&quot;entity_type&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    # ----------- ENTITY CHOOSER -----------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    all_files, container_entity_id, scan_id = [], None, None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(    if entity_type == &quot;scan&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(        session_list = get_sessions_for_project\(xnat_host, project_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(        if not session_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(            print\(&quot;No sessions found in project.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        chosen_session = select_entity\(session_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(name_key=&quot;label&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        if not chosen_session:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(            print\(&quot;No session selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        session_id = chosen_session[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(        scan_list = get_scans_for_session\(xnat_host, session_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(        if not scan_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(            print\(&quot;No scans found in session.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(        # Find a good key for human-readable scan name:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        scan_name_key = &quot;series_description&quot; if) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(&quot;series_description&quot; in scan_list[0] else &quot;ID&quot;) Tj
ET
endstream
endobj
303 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 304 0 R
>>
endobj
304 0 obj
<<
/Length 4716
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        chosen_scan = select_entity\(scan_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(name_key=scan_name_key\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(        if not chosen_scan:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(            print\(&quot;No scan selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        scan_id = chosen_scan[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(        container_entity_id = session_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(            xnat_host, session_id, &#039;scan&#039;, xnat_user, xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(scan_id=scan_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    elif entity_type == &quot;session&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(        session_list = get_sessions_for_project\(xnat_host, project_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        if not session_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(            print\(&quot;No sessions found in project.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(        chosen_session = select_entity\(session_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(name_key=&quot;label&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(        if not chosen_session:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(            print\(&quot;No session selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(        session_id = chosen_session[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(        container_entity_id = session_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(            xnat_host, session_id, &#039;session&#039;, xnat_user, xnat_password) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    elif entity_type == &quot;subject&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(        subject_list = get_subjects_for_project\(xnat_host, project_id, xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(xnat_password\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(        if not subject_list:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(            print\(&quot;No subjects found in project.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(        chosen_subject = select_entity\(subject_list, id_key=&quot;ID&quot;,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(name_key=&quot;label&quot;\)) Tj
ET
endstream
endobj
305 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 306 0 R
>>
endobj
306 0 obj
<<
/Length 4442
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(        if not chosen_subject:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(            print\(&quot;No subject selected.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(            return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(        subject_id = chosen_subject[&quot;ID&quot;]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(        container_entity_id = subject_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(            xnat_host, subject_id, &#039;subject&#039;, xnat_user, xnat_password) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(    elif entity_type == &quot;project&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(        container_entity_id = project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(        all_files = get_input_files\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(            xnat_host, project_id, &#039;project&#039;, xnat_user, xnat_password) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(        \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(        print\(&quot;This context is currently not supported.&quot;\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(        return) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(    # ------------- FILE CHOOSER -----------) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    selected_files = select_files\(all_files\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(    if selected_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(        for input_file_info in selected_files:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(            launch_container_rest\() Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(                xnat_host,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(                project_id,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(                command_id,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(                wrapper_name,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(                container_entity_id,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(                xnat_user,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(                xnat_password,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(                input_file_info,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(                entity_type=entity_type,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(                scan_id=scan_id if entity_type == &quot;scan&quot; else None) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(            \)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(    else:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(        print\(&quot;No file selected. Container launch aborted.&quot;\)) Tj
ET
endstream
endobj
307 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 308 0 R
>>
endobj
308 0 obj
<<
/Length 3889
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(if __name__ == &quot;__main__&quot;:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    main\(\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(das ist meine Automatisierte Skript) Tj
ET
BT
/F2 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 683.2506299212598151 Td
(HAWKI) Tj
ET
BT
/F2 10 Tf
11.5 TL
0 g
128.9763779527559109 683.2506299212598151 Td
(\(gpt-4.1\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 654.904173228346508 Td
(Du hast ein sehr gutes, strukturiertes und umfassendes Automatisierungsskript) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 636.5041732283464171 Td
(gebaut, das lokale Skripte als Container nach XNAT bringt und \(inkl.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 618.1041732283464398 Td
(Context-Auswahl, Build, Wrapper, Inputs, Launch\) alles automatisiert.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 599.7041732283464626 Td
(**Dein Skript ist technisch grundsätzlich sauber, aber**:  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 581.3041732283463716 Td
(**Die Ursache, dass `/input` im Container leer ist, liegt im Zusammenspiel von**:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 544.5041732283464171 Td
(- der Übergabe des input_file an das REST-API,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 526.1041732283464398 Td
(- der command.json-Konfiguration \(mounts/inputs\),) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 507.7041732283464626 Td
(- und dem tatsächlichen Vorliegen der Datei im XNAT-Resource-Kontext.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 470.9041732283464512 Td
(## **Letzte Checkliste \(wie du gezielt zum Ziel kommst\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 434.1041732283464398 Td
(### 1. **command.json-Check \(wird korrekt erstellt?\)**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 397.3041732283464853 Td
(**`inputs`-Eintrag:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 378.9041732283464512 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 360.5041732283464739 Td
({) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 342.1041732283464967 Td
(  "name": "input_file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 323.7041732283464626 Td
(  "type": "file",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 305.3041732283464853 Td
(  "required": true,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 286.904173228346508 Td
(  "description": "Input file for analysis",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 268.5041732283465308 Td
(  "mount": "input",) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 250.1041732283464398 Td
(  "select-values": []) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 231.7041732283464626 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 213.3041732283464853 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 194.904173228346508 Td
(**NICHT:**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 176.5041732283465308 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 158.1041732283464398 Td
("mount": "input_file") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 139.7041732283464626 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 121.3041732283464853 Td
(**Bei dir ist das bereits richtig gesetzt!**) Tj
ET
endstream
endobj
309 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 310 0 R
>>
endobj
310 0 obj
<<
/Length 3793
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 785.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(### 2. **command-line in der JSON**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
("command-line": "python3 /app/<script_filename> /input/#input_file# /output") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(**Das ist optimal!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(Jetzt erwartet das Skript als Argument z.B. `/input/DemandPlan_v1.csv`.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(### 3. **REST-Launch: Input-Feld**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(**Der Wert muss der DATEINAME sein, wie in XNAT angezeigt!**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(Beispiel:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
("input_file": "DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(NICHT:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(```json) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
("input_file": "resources/CSV/files/DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
("input_file": "/input/DemandPlan_v1.csv") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(**Dein Funktionsaufruf**  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(input_file_path = input_file_info["name"]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(# ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(payload = {) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(    root_type: xnat_entity_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(    "input_file": input_file_path,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    "project": project_id) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(}) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(ist **korrekt**, solange input_file_info["name"] wirklich nur den Dateinamen enthält!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(### 4. **Ist die Datei im XNAT vorhanden?**) Tj
ET
endstream
endobj
311 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 312 0 R
>>
endobj
312 0 obj
<<
/Length 4072
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(- Wenn du per `get_input_files\(\)` an die Files kommst, prüfe:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(    - Kommt `input_file_info["name"]` **GENAU** als `"DemandPlan_v1.csv"`?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(- Gehe im XNAT-UI zu der entsprechenden Session/Resource und prüfe, ob die Datei) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(wirklich da ist und ob sie exakt so heißt!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(- Wenn Groß-/Kleinschreibung, Leerzeichen oder ähnliches nicht exakt passen, wird) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(das Mounten fehlschlagen.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 601.1970866141732586 Td
(### 5. **Debug: Was gibt der Launcher ins Container-Log aus?**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 564.397086614173304 Td
(- Nutze in deinem externen Skript \(wie vorher besprochen\):) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(    ```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 527.5970866141732358 Td
(    print\("Vorhandene Dateien in /input:", os.listdir\('/input'\)\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(    ```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(- **Wenn** das `/input`-Verzeichnis leer bleibt,  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(stimmt eines der folgenden Dinge nicht:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 453.9970866141732699 Td
(    - Die Datei ist zum Startzeitpunkt NICHT an der richtigen Stelle im XNAT-Projekt) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(\(falsche Session/Resource\).) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(    - Sie heißt nicht exakt wie übergeben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(    - Beim Container-Launch wurde ein falscher Wert ins input_file geschrieben.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 325.1970866141732586 Td
(## **Sofort-Tipp für robuste Live-Prüfung \(im select_files_from_list\):**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Ergänze da ein Print:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(```python) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(selected = [all_files[i-1] for i in unique_indices]) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(for s in selected:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(    print\(f"[DEBUG] Für REST wird als input_file übergeben: {s['name']}"\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 214.7970866141732813 Td
(```) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 177.9970866141733268 Td
(Und nach dem Launch:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(- Prüfe im Container-Log: Was gibt `/input` aus?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(- Wenn leer: Prüfe alles wie oben!) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 104.3970866141734177 Td
(---) Tj
ET
endstream
endobj
313 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 314 0 R
>>
endobj
314 0 obj
<<
/Length 3965
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 766.7970866141731676 Td
(## **Wissenschaftlicher Hinweis:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 748.3970866141731904 Td
(Die von dir gezeigte Struktur \("file inputs werden in /input/<Dateiname> im Container) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 729.9970866141732131 Td
(gemountet, siehe [XNAT) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 711.5970866141732358 Td
(Docs]\(https://wiki.xnat.org/container-service/container-command-json\)"\) ist) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 693.1970866141732586 Td
(**State-of-the-Art** und exakt so gedacht.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 674.7970866141731676 Td
(Fast alle Probleme, die du siehst, entstehen durch:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 656.3970866141731904 Td
(- Resource-Mapping-Fehler) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 637.9970866141732131 Td
(- Falsche Dateinamen \(z.B. Pfad, Schreibweise, Tippfehler\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 619.5970866141732358 Td
(- Timing-Probleme beim Upload) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 582.7970866141731676 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 545.9970866141732131 Td
(## **Zusammenfassung & Lösung:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 509.1970866141732586 Td
(Dein Automatisierungsskript ist **am Ziel**,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 490.7970866141732245 Td
(wenn im XNAT die Datei exakt so existiert und du exakt den Namen als input_file) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 472.3970866141732472 Td
(übergibst.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 435.5970866141732358 Td
(### **Checkliste:**) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 417.1970866141732586 Td
(- [x] command.json: "mount": "input") Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 398.7970866141732245 Td
(- [x] command-line: ... /input/#input_file# ...) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 380.3970866141732472 Td
(- [x] REST-Input: nur Dateiname \(`"DemandPlan_v1.csv"`\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 361.9970866141732699 Td
(- [x] Datei liegt im Projekt/Session auf XNAT ohne) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 343.5970866141732358 Td
(Tippfehler/Groß-Kleinschreibungsmismatch) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 306.7970866141732813 Td
(Dann funktioniert alles.  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 288.397086614173304 Td
(Falls `/input` im Container leer bleibt:) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 269.9970866141732131 Td
(- Poste von XNAT die Resource-API-Antwort zu deiner Session) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 251.5970866141732358 Td
(\(`.../data/experiments/ID/resources/CSV/files`\)  ) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 233.1970866141732586 Td
(- und die genauen debug-Prints im Skript-Log.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 196.397086614173304 Td
(---) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 159.5970866141732358 Td
(**Melde dich, wenn du ein Beispiel-Log möchtest oder wenn du das Problem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 141.1970866141732586 Td
(trotzdem nicht lösen kannst  dann analysiere ich gern Schritt für Schritt die letzten) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
70.8661417322834666 122.7970866141732813 Td
(offenen Details!**) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R 11 0 R 13 0 R 15 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R 27 0 R 29 0 R 31 0 R 33 0 R 35 0 R 37 0 R 39 0 R 41 0 R 43 0 R 45 0 R 47 0 R 49 0 R 51 0 R 53 0 R 55 0 R 57 0 R 59 0 R 61 0 R 63 0 R 65 0 R 67 0 R 69 0 R 71 0 R 73 0 R 75 0 R 77 0 R 79 0 R 81 0 R 83 0 R 85 0 R 87 0 R 89 0 R 91 0 R 93 0 R 95 0 R 97 0 R 99 0 R 101 0 R 103 0 R 105 0 R 107 0 R 109 0 R 111 0 R 113 0 R 115 0 R 117 0 R 119 0 R 121 0 R 123 0 R 125 0 R 127 0 R 129 0 R 131 0 R 133 0 R 135 0 R 137 0 R 139 0 R 141 0 R 143 0 R 145 0 R 147 0 R 149 0 R 151 0 R 153 0 R 155 0 R 157 0 R 159 0 R 161 0 R 163 0 R 165 0 R 167 0 R 169 0 R 171 0 R 173 0 R 175 0 R 177 0 R 179 0 R 181 0 R 183 0 R 185 0 R 187 0 R 189 0 R 191 0 R 193 0 R 195 0 R 197 0 R 199 0 R 201 0 R 203 0 R 205 0 R 207 0 R 209 0 R 211 0 R 213 0 R 215 0 R 217 0 R 219 0 R 221 0 R 223 0 R 225 0 R 227 0 R 229 0 R 231 0 R 233 0 R 235 0 R 237 0 R 239 0 R 241 0 R 243 0 R 245 0 R 247 0 R 249 0 R 251 0 R 253 0 R 255 0 R 257 0 R 259 0 R 261 0 R 263 0 R 265 0 R 267 0 R 269 0 R 271 0 R 273 0 R 275 0 R 277 0 R 279 0 R 281 0 R 283 0 R 285 0 R 287 0 R 289 0 R 291 0 R 293 0 R 295 0 R 297 0 R 299 0 R 301 0 R 303 0 R 305 0 R 307 0 R 309 0 R 311 0 R 313 0 R ]
/Count 156
>>
endobj
315 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
316 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
317 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
318 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
319 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
320 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
321 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
322 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
323 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
324 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
325 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
326 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
327 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
328 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 315 0 R
/F2 316 0 R
/F3 317 0 R
/F4 318 0 R
/F5 319 0 R
/F6 320 0 R
/F7 321 0 R
/F8 322 0 R
/F9 323 0 R
/F10 324 0 R
/F11 325 0 R
/F12 326 0 R
/F13 327 0 R
/F14 328 0 R
>>
/XObject <<
>>
>>
endobj
329 0 obj
<<
/Producer (jsPDF 2.5.2)
/CreationDate (D:20250902165516+02'00')
>>
endobj
330 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 331
0000000000 65535 f 
0000692134 00000 n 
0000695161 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000003735 00000 n 
0000003872 00000 n 
0000007717 00000 n 
0000007854 00000 n 
0000012374 00000 n 
0000012512 00000 n 
0000016562 00000 n 
0000016701 00000 n 
0000020756 00000 n 
0000020895 00000 n 
0000024731 00000 n 
0000024870 00000 n 
0000028606 00000 n 
0000028745 00000 n 
0000032834 00000 n 
0000032973 00000 n 
0000037912 00000 n 
0000038051 00000 n 
0000043352 00000 n 
0000043491 00000 n 
0000047279 00000 n 
0000047418 00000 n 
0000051270 00000 n 
0000051409 00000 n 
0000055273 00000 n 
0000055412 00000 n 
0000059992 00000 n 
0000060131 00000 n 
0000064064 00000 n 
0000064203 00000 n 
0000068101 00000 n 
0000068240 00000 n 
0000071783 00000 n 
0000071922 00000 n 
0000076209 00000 n 
0000076348 00000 n 
0000080208 00000 n 
0000080347 00000 n 
0000084231 00000 n 
0000084370 00000 n 
0000088659 00000 n 
0000088798 00000 n 
0000093132 00000 n 
0000093271 00000 n 
0000097358 00000 n 
0000097497 00000 n 
0000101484 00000 n 
0000101623 00000 n 
0000106122 00000 n 
0000106261 00000 n 
0000110449 00000 n 
0000110588 00000 n 
0000115230 00000 n 
0000115369 00000 n 
0000119326 00000 n 
0000119465 00000 n 
0000123539 00000 n 
0000123678 00000 n 
0000127434 00000 n 
0000127573 00000 n 
0000132116 00000 n 
0000132255 00000 n 
0000136250 00000 n 
0000136389 00000 n 
0000141259 00000 n 
0000141398 00000 n 
0000146111 00000 n 
0000146250 00000 n 
0000150495 00000 n 
0000150634 00000 n 
0000154869 00000 n 
0000155008 00000 n 
0000158606 00000 n 
0000158745 00000 n 
0000162997 00000 n 
0000163136 00000 n 
0000167298 00000 n 
0000167437 00000 n 
0000171230 00000 n 
0000171369 00000 n 
0000175205 00000 n 
0000175344 00000 n 
0000178805 00000 n 
0000178944 00000 n 
0000183718 00000 n 
0000183857 00000 n 
0000187904 00000 n 
0000188043 00000 n 
0000191927 00000 n 
0000192066 00000 n 
0000195633 00000 n 
0000195772 00000 n 
0000200129 00000 n 
0000200268 00000 n 
0000204025 00000 n 
0000204165 00000 n 
0000208381 00000 n 
0000208522 00000 n 
0000212509 00000 n 
0000212650 00000 n 
0000217011 00000 n 
0000217152 00000 n 
0000221993 00000 n 
0000222134 00000 n 
0000226684 00000 n 
0000226825 00000 n 
0000232014 00000 n 
0000232155 00000 n 
0000237170 00000 n 
0000237311 00000 n 
0000242727 00000 n 
0000242868 00000 n 
0000248190 00000 n 
0000248331 00000 n 
0000252524 00000 n 
0000252665 00000 n 
0000257206 00000 n 
0000257347 00000 n 
0000261827 00000 n 
0000261968 00000 n 
0000266682 00000 n 
0000266823 00000 n 
0000271326 00000 n 
0000271467 00000 n 
0000275829 00000 n 
0000275970 00000 n 
0000279377 00000 n 
0000279518 00000 n 
0000284058 00000 n 
0000284199 00000 n 
0000288281 00000 n 
0000288422 00000 n 
0000292447 00000 n 
0000292588 00000 n 
0000295866 00000 n 
0000296007 00000 n 
0000299535 00000 n 
0000299676 00000 n 
0000303637 00000 n 
0000303778 00000 n 
0000308218 00000 n 
0000308359 00000 n 
0000312373 00000 n 
0000312514 00000 n 
0000316527 00000 n 
0000316668 00000 n 
0000320587 00000 n 
0000320728 00000 n 
0000325147 00000 n 
0000325288 00000 n 
0000329423 00000 n 
0000329564 00000 n 
0000333902 00000 n 
0000334043 00000 n 
0000338173 00000 n 
0000338314 00000 n 
0000342189 00000 n 
0000342330 00000 n 
0000346437 00000 n 
0000346578 00000 n 
0000350456 00000 n 
0000350597 00000 n 
0000353695 00000 n 
0000353836 00000 n 
0000357989 00000 n 
0000358130 00000 n 
0000361940 00000 n 
0000362081 00000 n 
0000366163 00000 n 
0000366304 00000 n 
0000370783 00000 n 
0000370924 00000 n 
0000376231 00000 n 
0000376372 00000 n 
0000380981 00000 n 
0000381122 00000 n 
0000385812 00000 n 
0000385953 00000 n 
0000389963 00000 n 
0000390104 00000 n 
0000394574 00000 n 
0000394715 00000 n 
0000399495 00000 n 
0000399636 00000 n 
0000403671 00000 n 
0000403812 00000 n 
0000408180 00000 n 
0000408321 00000 n 
0000412697 00000 n 
0000412838 00000 n 
0000417314 00000 n 
0000417455 00000 n 
0000421563 00000 n 
0000421704 00000 n 
0000425692 00000 n 
0000425833 00000 n 
0000429557 00000 n 
0000429698 00000 n 
0000433760 00000 n 
0000433901 00000 n 
0000438458 00000 n 
0000438599 00000 n 
0000443110 00000 n 
0000443251 00000 n 
0000447923 00000 n 
0000448064 00000 n 
0000452455 00000 n 
0000452596 00000 n 
0000456958 00000 n 
0000457099 00000 n 
0000461633 00000 n 
0000461774 00000 n 
0000465667 00000 n 
0000465808 00000 n 
0000470273 00000 n 
0000470414 00000 n 
0000476032 00000 n 
0000476173 00000 n 
0000480911 00000 n 
0000481052 00000 n 
0000485174 00000 n 
0000485315 00000 n 
0000489419 00000 n 
0000489560 00000 n 
0000493135 00000 n 
0000493276 00000 n 
0000498117 00000 n 
0000498258 00000 n 
0000503126 00000 n 
0000503267 00000 n 
0000508188 00000 n 
0000508329 00000 n 
0000512063 00000 n 
0000512204 00000 n 
0000516358 00000 n 
0000516499 00000 n 
0000520519 00000 n 
0000520660 00000 n 
0000524699 00000 n 
0000524840 00000 n 
0000528905 00000 n 
0000529046 00000 n 
0000532635 00000 n 
0000532776 00000 n 
0000537194 00000 n 
0000537335 00000 n 
0000540911 00000 n 
0000541052 00000 n 
0000545318 00000 n 
0000545459 00000 n 
0000549603 00000 n 
0000549744 00000 n 
0000553933 00000 n 
0000554074 00000 n 
0000558630 00000 n 
0000558771 00000 n 
0000562823 00000 n 
0000562964 00000 n 
0000567317 00000 n 
0000567458 00000 n 
0000571496 00000 n 
0000571637 00000 n 
0000576478 00000 n 
0000576619 00000 n 
0000581397 00000 n 
0000581538 00000 n 
0000586234 00000 n 
0000586375 00000 n 
0000591209 00000 n 
0000591350 00000 n 
0000596215 00000 n 
0000596356 00000 n 
0000601514 00000 n 
0000601655 00000 n 
0000606463 00000 n 
0000606604 00000 n 
0000611760 00000 n 
0000611901 00000 n 
0000616963 00000 n 
0000617104 00000 n 
0000621437 00000 n 
0000621578 00000 n 
0000626388 00000 n 
0000626529 00000 n 
0000631688 00000 n 
0000631829 00000 n 
0000637283 00000 n 
0000637424 00000 n 
0000642472 00000 n 
0000642613 00000 n 
0000647135 00000 n 
0000647276 00000 n 
0000652042 00000 n 
0000652183 00000 n 
0000656416 00000 n 
0000656557 00000 n 
0000661583 00000 n 
0000661724 00000 n 
0000666087 00000 n 
0000666228 00000 n 
0000670998 00000 n 
0000671139 00000 n 
0000675635 00000 n 
0000675776 00000 n 
0000679719 00000 n 
0000679860 00000 n 
0000683707 00000 n 
0000683848 00000 n 
0000687974 00000 n 
0000688115 00000 n 
0000693382 00000 n 
0000693509 00000 n 
0000693641 00000 n 
0000693776 00000 n 
0000693915 00000 n 
0000694040 00000 n 
0000694170 00000 n 
0000694303 00000 n 
0000694440 00000 n 
0000694569 00000 n 
0000694697 00000 n 
0000694827 00000 n 
0000694961 00000 n 
0000695064 00000 n 
0000695428 00000 n 
0000695515 00000 n 
trailer
<<
/Size 331
/Root 330 0 R
/Info 329 0 R
/ID [ <4D7F07186B48F0E9FC636D74CC17B4F7> <4D7F07186B48F0E9FC636D74CC17B4F7> ]
>>
startxref
695620
%%EOF