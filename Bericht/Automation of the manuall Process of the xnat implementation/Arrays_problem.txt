### Beschreibung zur Problemlösung: XNAT Array-Input Fehler

---

#### Problem:

Beim Starten des XNAT-Containers trat folgender Fehler auf:

> **„Cannot deserialize value of type `String` from Array“**

Das bedeutet:
XNAT erwartete einen einzelnen **String** für das Eingabefeld `input_files`, erhielt jedoch ein **Array** (eine Liste von Strings). Dadurch konnte XNAT die Anfrage nicht korrekt verarbeiten.

---

####  Lösung:

1. **Command-Definition (`command.json`) anpassen:**

   Das Input-Feld `input_files` muss korrekt als **Array von Dateien** definiert sein:

   ```json
   {
     "name": "input_files",
     "description": "Input files",
     "type": "array",
     "element_type": "file",
     "required": true,
     "mount": "input"
   }
   ```

2. **Python-Skript auf mehrere Dateien vorbereiten:**

   Das Skript muss alle übergebenen Dateien entgegennehmen können:

   ```python
   import sys

   input_files = sys.argv[1:-1]  # alle Eingabedateien
   output_dir = sys.argv[-1]     # letztes Argument ist das Ausgabeverzeichnis
   ```

3. **Kommandozeile in `command.json` korrekt formulieren:**

   Damit XNAT die Eingabedateien automatisch ersetzt:

   ```json
   "command-line": "python3 /app/dein_script.py #input_files# /output"
   ```

   ➔ XNAT ersetzt dann `#input_files#` durch eine Liste der tatsächlichen Dateinamen.

4. **Container-Start (via REST-API):**

   Beim Aufruf des Containers muss das Feld `input_files` ein **Array** sein, z. B.:

   ```json
   {
     "project": "mein_projekt",
     "input_files": ["datei1.csv", "datei2.csv"]
   }
   ```

---

#### Fazit:

Durch die Korrektur der `command.json`, der Kommandozeile und des Python-Skripts wurde das Problem behoben.
XNAT kann jetzt mehrere Eingabedateien korrekt an den Container übergeben und das Skript verarbeitet sie zuverlässig in einem Lauf.
